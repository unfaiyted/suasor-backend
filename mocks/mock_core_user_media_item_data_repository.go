// Code generated by MockGen. DO NOT EDIT.
// Source: repository/core_user_media_item_data.go
//
// Generated by this command:
//
//	mockgen -source=repository/core_user_media_item_data.go -destination=mocks/mock_core_user_media_item_data_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	types "suasor/clients/media/types"
	models "suasor/types/models"

	gomock "go.uber.org/mock/gomock"
)

// MockCoreUserMediaItemDataRepository is a mock of CoreUserMediaItemDataRepository interface.
type MockCoreUserMediaItemDataRepository[T types.MediaData] struct {
	ctrl     *gomock.Controller
	recorder *MockCoreUserMediaItemDataRepositoryMockRecorder[T]
	isgomock struct{}
}

// MockCoreUserMediaItemDataRepositoryMockRecorder is the mock recorder for MockCoreUserMediaItemDataRepository.
type MockCoreUserMediaItemDataRepositoryMockRecorder[T types.MediaData] struct {
	mock *MockCoreUserMediaItemDataRepository[T]
}

// NewMockCoreUserMediaItemDataRepository creates a new mock instance.
func NewMockCoreUserMediaItemDataRepository[T types.MediaData](ctrl *gomock.Controller) *MockCoreUserMediaItemDataRepository[T] {
	mock := &MockCoreUserMediaItemDataRepository[T]{ctrl: ctrl}
	mock.recorder = &MockCoreUserMediaItemDataRepositoryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreUserMediaItemDataRepository[T]) EXPECT() *MockCoreUserMediaItemDataRepositoryMockRecorder[T] {
	return m.recorder
}

// Create mocks base method.
func (m *MockCoreUserMediaItemDataRepository[T]) Create(ctx context.Context, data *models.UserMediaItemData[T]) (*models.UserMediaItemData[T], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(*models.UserMediaItemData[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCoreUserMediaItemDataRepositoryMockRecorder[T]) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCoreUserMediaItemDataRepository[T])(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockCoreUserMediaItemDataRepository[T]) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCoreUserMediaItemDataRepositoryMockRecorder[T]) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCoreUserMediaItemDataRepository[T])(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockCoreUserMediaItemDataRepository[T]) GetByID(ctx context.Context, id uint64) (*models.UserMediaItemData[T], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.UserMediaItemData[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCoreUserMediaItemDataRepositoryMockRecorder[T]) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCoreUserMediaItemDataRepository[T])(nil).GetByID), ctx, id)
}

// GetByUserIDAndMediaItemID mocks base method.
func (m *MockCoreUserMediaItemDataRepository[T]) GetByUserIDAndMediaItemID(ctx context.Context, userID, mediaItemID uint64) (*models.UserMediaItemData[T], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDAndMediaItemID", ctx, userID, mediaItemID)
	ret0, _ := ret[0].(*models.UserMediaItemData[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDAndMediaItemID indicates an expected call of GetByUserIDAndMediaItemID.
func (mr *MockCoreUserMediaItemDataRepositoryMockRecorder[T]) GetByUserIDAndMediaItemID(ctx, userID, mediaItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDAndMediaItemID", reflect.TypeOf((*MockCoreUserMediaItemDataRepository[T])(nil).GetByUserIDAndMediaItemID), ctx, userID, mediaItemID)
}

// HasUserMediaItemData mocks base method.
func (m *MockCoreUserMediaItemDataRepository[T]) HasUserMediaItemData(ctx context.Context, userID, mediaItemID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserMediaItemData", ctx, userID, mediaItemID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUserMediaItemData indicates an expected call of HasUserMediaItemData.
func (mr *MockCoreUserMediaItemDataRepositoryMockRecorder[T]) HasUserMediaItemData(ctx, userID, mediaItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserMediaItemData", reflect.TypeOf((*MockCoreUserMediaItemDataRepository[T])(nil).HasUserMediaItemData), ctx, userID, mediaItemID)
}

// Search mocks base method.
func (m *MockCoreUserMediaItemDataRepository[T]) Search(ctx context.Context, query *types.QueryOptions) ([]*models.UserMediaItemData[T], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]*models.UserMediaItemData[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockCoreUserMediaItemDataRepositoryMockRecorder[T]) Search(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCoreUserMediaItemDataRepository[T])(nil).Search), ctx, query)
}

// Update mocks base method.
func (m *MockCoreUserMediaItemDataRepository[T]) Update(ctx context.Context, data *models.UserMediaItemData[T]) (*models.UserMediaItemData[T], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(*models.UserMediaItemData[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCoreUserMediaItemDataRepositoryMockRecorder[T]) Update(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCoreUserMediaItemDataRepository[T])(nil).Update), ctx, data)
}
