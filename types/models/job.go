package models

import (
	"time"
)

// JobType defines the type of scheduled job
type JobType string

const (
	// JobTypeRecommendation represents a recommendation generation job
	JobTypeRecommendation JobType = "recommendation"
	// JobTypeSync represents a media synchronization job
	JobTypeSync JobType = "sync"
	// JobTypeSystem represents a system maintenance job
	JobTypeSystem JobType = "system"
	// JobTypeNotification represents a notification job
	JobTypeNotification JobType = "notification"
	// JobTypeAnalysis represents an analysis job
	JobTypeAnalysis JobType = "analysis"
)

// JobStatus defines the status of a job run
type JobStatus string

const (
	// JobStatusPending job is scheduled but hasn't run yet
	JobStatusPending JobStatus = "pending"
	// JobStatusRunning job is currently running
	JobStatusRunning JobStatus = "running"
	// JobStatusCompleted job completed successfully
	JobStatusCompleted JobStatus = "completed"
	// JobStatusFailed job failed to complete
	JobStatusFailed JobStatus = "failed"
)

// JobRun represents a single execution of a scheduled job
type JobRun struct {
	BaseModel
	// The name of the job
	JobName string `json:"jobName" gorm:"index;not null"`
	// Type of job (recommendation, sync, etc.)
	JobType JobType `json:"jobType" gorm:"index;not null"`
	// Status of the job run
	Status JobStatus `json:"status" gorm:"not null"`
	// When the job started running
	StartTime *time.Time `json:"startTime"`
	// When the job finished running
	EndTime *time.Time `json:"endTime"`
	// User ID associated with the job, if applicable
	UserID *uint64 `json:"userId" gorm:"index"`
	// Any error message from the job run
	ErrorMessage string `json:"errorMessage"`
	// Progress percentage (0-100)
    Progress int `json:"progress" gorm:"not null;default:0"`
    // Total items to process
    TotalItems int `json:"totalItems" gorm:"default:0"`
    // Items processed so far
    ProcessedItems int `json:"processedItems" gorm:"default:0"`
    // Current status message
    StatusMessage string `json:"statusMessage"`
	// Metadata related to the job (stored as JSON)
	Metadata string `json:"metadata" gorm:"type:jsonb"`
}

// JobSchedule represents a scheduled job
type JobSchedule struct {
	BaseModel
	// Unique name of the job
	JobName string `json:"jobName" gorm:"uniqueIndex;not null"`
	// Type of job (recommendation, sync, etc.)
	JobType JobType `json:"jobType" gorm:"index;not null"`
	// How often the job should run
	Frequency string `json:"frequency" gorm:"not null"`
	// When the job last ran
	LastRunTime *time.Time `json:"lastRunTime"`
	// Whether the job is enabled
	Enabled bool `json:"enabled" gorm:"not null;default:true"`
	// User ID associated with the job, if applicable (for user-specific jobs)
	UserID *uint64 `json:"userId" gorm:"index"`
	// Any configuration for the job (stored as JSON)
	Config string `json:"config" gorm:"type:jsonb"`
}

// RecommendationSource defines the source of a recommendation
type RecommendationSource string

const (
	// RecommendationSourceAI recommendation was generated by an AI model
	RecommendationSourceAI RecommendationSource = "ai"
	// RecommendationSourceSystem recommendation was generated systematically by the application
	RecommendationSourceSystem RecommendationSource = "system"
	// RecommendationSourceManual recommendation was manually added
	RecommendationSourceManual RecommendationSource = "manual"
)

// Recommendation represents a recommendation for a specific user
type Recommendation struct {
	BaseModel
	// ID of the user receiving this recommendation
	UserID uint64 `json:"userId" gorm:"index;not null"`
	// ID of the media item being recommended
	MediaItemID uint64 `json:"mediaItemId" gorm:"index;not null"`
	// Type of media being recommended (movie, series, etc.)
	MediaType string `json:"mediaType" gorm:"index;not null"`
	// Source of the recommendation (AI, system, manual)
	Source RecommendationSource `json:"source" gorm:"index;not null"`
	// ID of the client that generated this recommendation, if applicable
	SourceClientID *uint64 `json:"sourceClientId" gorm:"index"`
	// Type of the client that generated this recommendation
	SourceClientType string `json:"sourceClientType"`
	// Explanation of why this was recommended
	Reason string `json:"reason" gorm:"type:text"`
	// Confidence score (0.0 to 1.0) if available
	Confidence float32 `json:"confidence"`
	// Whether this item is present in the user's library
	InLibrary bool `json:"inLibrary" gorm:"index"`
	// Whether this item has been viewed/played by the user
	Viewed bool `json:"viewed" gorm:"index"`
	// Whether this item has been dismissed by the user
	Dismissed bool `json:"dismissed" gorm:"index;default:false"`
	// Whether this is an active recommendation
	Active bool `json:"active" gorm:"index;default:true"`
	// Job run that created this recommendation
	JobRunID *uint64 `json:"jobRunId" gorm:"index"`
	// Additional metadata (stored as JSON)
	Metadata string `json:"metadata" gorm:"type:jsonb"`
}

// MediaSyncJob represents a job to sync media from external clients
type MediaSyncJob struct {
	BaseModel
	// ID of the user
	UserID uint64 `json:"userId" gorm:"index;not null"`
	// ID of the client to sync from
	ClientID uint64 `json:"clientId" gorm:"index;not null"`
	// Type of the client
	ClientType string `json:"clientType" gorm:"not null"`
	// Type of media to sync (movies, series, music, etc.)
	MediaType string `json:"mediaType" gorm:"index;not null"`
	// Last sync time
	LastSyncTime *time.Time `json:"lastSyncTime"`
	// Sync frequency
	Frequency string `json:"frequency" gorm:"not null;default:'daily'"`
	// Whether sync is enabled
	Enabled bool `json:"enabled" gorm:"not null;default:true"`
	// Sync filter criteria (stored as JSON)
	Filters string `json:"filters" gorm:"type:jsonb;default:'{}'"`
}