basePath: /api/v1
definitions:
  models.APIResponse-any:
    properties:
      data: {}
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.APIResponse-models_AuthData:
    properties:
      data:
        $ref: '#/definitions/models.AuthData'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.APIResponse-models_Configuration:
    properties:
      data:
        $ref: '#/definitions/models.Configuration'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.APIResponse-models_ShortenData:
    properties:
      data:
        $ref: '#/definitions/models.ShortenData'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.APIResponse-models_UserConfig:
    properties:
      data:
        $ref: '#/definitions/models.UserConfig'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.APIResponse-models_UserResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.APIResponse-string:
    properties:
      data:
        type: string
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.AuthData:
    description: Authentication data returned to client after successful authentication
    properties:
      accessToken:
        description: |-
          AccessToken is the JWT token for API access
          @Description JWT access token for authenticated requests
          @Example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type: string
      expiresAt:
        description: |-
          ExpiresAt indicates when the access token expires
          @Description UNIX timestamp when the access token expires
          @Example 1674140400
        type: integer
      refreshToken:
        description: |-
          RefreshToken is used to get new access tokens
          @Description JWT refresh token for obtaining new access tokens
          @Example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.UserResponse'
        description: |-
          User contains the user profile information
          @Description User profile data
    type: object
  models.ChangePasswordRequest:
    description: Request payload for changing user password
    properties:
      currentPassword:
        description: |-
          CurrentPassword is the user's existing password for verification
          @Description User's current password for verification
          @Example "oldpassword123"
        example: oldpassword123
        type: string
      newPassword:
        description: |-
          NewPassword is the password to change to
          @Description New password to set for the user
          @Example "newpassword456"
        example: newpassword456
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  models.ChangeRoleRequest:
    description: Request payload for changing user role
    properties:
      role:
        description: |-
          Role is the new role to assign to the user
          @Description New role to assign to the user
          @Enum "user" "admin"
          @Example "admin"
        enum:
        - user
        - admin
        example: admin
        type: string
    required:
    - role
    type: object
  models.Configuration:
    description: Complete application configuration settings
    properties:
      app:
        description: App contains core application settings
        properties:
          apiBaseURL:
            example: http://localhost:8080
            type: string
          appURL:
            example: http://localhost:3000
            type: string
          environment:
            enum:
            - development
            - staging
            - production
            example: development
            type: string
          logLevel:
            enum:
            - debug
            - info
            - warn
            - error
            example: info
            type: string
          maxPageSize:
            example: 100
            maximum: 1000
            minimum: 1
            type: integer
          name:
            example: suasor
            type: string
        required:
        - apiBaseURL
        - appURL
        - environment
        - logLevel
        - maxPageSize
        - name
        type: object
      auth:
        description: Auth contains authentication settings
        properties:
          accessExpiryMinutes:
            description: New fields to add
            example: 15
            minimum: 1
            type: integer
          allowedOrigins:
            example:
            - http://localhost:3000
            items:
              type: string
            type: array
          enable2FA:
            example: false
            type: boolean
          enableLocal:
            example: true
            type: boolean
          jwtSecret:
            example: your-secret-key
            type: string
          refreshExpiryDays:
            example: 7
            minimum: 1
            type: integer
          sessionTimeout:
            example: 60
            minimum: 1
            type: integer
          tokenAudience:
            example: suasor-client
            type: string
          tokenExpiration:
            example: 24
            minimum: 1
            type: integer
          tokenIssuer:
            example: suasor-api
            type: string
        required:
        - accessExpiryMinutes
        - jwtSecret
        - refreshExpiryDays
        - sessionTimeout
        - tokenAudience
        - tokenExpiration
        - tokenIssuer
        type: object
      db:
        description: Database contains database connection settings
        properties:
          host:
            example: localhost
            type: string
          maxConns:
            example: 20
            minimum: 1
            type: integer
          name:
            example: suasor
            type: string
          password:
            example: yourpassword
            type: string
          port:
            example: "5432"
            type: string
          timeout:
            example: 30
            minimum: 1
            type: integer
          user:
            example: postgres_user
            type: string
        required:
        - host
        - maxConns
        - name
        - password
        - port
        - timeout
        - user
        type: object
      http:
        description: HTTP contains HTTP server configuration
        properties:
          enableSSL:
            example: false
            type: boolean
          idleTimeout:
            example: 60
            minimum: 1
            type: integer
          port:
            example: "8080"
            type: string
          proxyEnabled:
            example: false
            type: boolean
          proxyURL:
            example: http://proxy:8080
            type: string
          rateLimitEnabled:
            example: true
            type: boolean
          readTimeout:
            example: 30
            minimum: 1
            type: integer
          requestsPerMin:
            example: 100
            minimum: 0
            type: integer
          sslCert:
            example: /path/to/cert.pem
            type: string
          sslKey:
            example: /path/to/key.pem
            type: string
          writeTimeout:
            example: 30
            minimum: 1
            type: integer
        required:
        - idleTimeout
        - port
        - readTimeout
        - writeTimeout
        type: object
      integrations:
        description: Integrations contains all third-party service configurations
        properties:
          emby:
            $ref: '#/definitions/models.EmbyConfig'
          jellyfin:
            $ref: '#/definitions/models.JellyfinConfig'
          navidrome:
            $ref: '#/definitions/models.NavidromeConfig'
          plex:
            $ref: '#/definitions/models.PlexConfig'
          spotify:
            $ref: '#/definitions/models.SpotifyConfig'
          trakt:
            $ref: '#/definitions/models.TraktConfig'
        type: object
    type: object
  models.EmbyConfig:
    description: Emby media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      enabled:
        example: false
        type: boolean
      host:
        example: localhost
        type: string
      port:
        example: 8096
        type: integer
      ssl:
        example: false
        type: boolean
      username:
        example: admin
        type: string
    type: object
  models.ErrorResponse-error:
    properties:
      details: {}
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      statusCode:
        example: 201
        type: integer
      timestamp:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/models.ErrorType'
        example: FAILED_CHECK
    type: object
  models.ErrorType:
    enum:
    - FAILED_CHECK
    - UNAUTHORIZED
    - NOT_FOUND
    - BAD_REQUEST
    - INTERNAL_ERROR
    - FORBIDDEN
    - CONFLICT
    - VALIDATION_ERROR
    - RATE_LIMITED
    - TIMEOUT
    - SERVICE_UNAVAILABLE
    - UNPROCESSABLE_ENTITY
    type: string
    x-enum-varnames:
    - ErrorTypeFailedCheck
    - ErrorTypeUnauthorized
    - ErrorTypeNotFound
    - ErrorTypeBadRequest
    - ErrorTypeInternalError
    - ErrorTypeForbidden
    - ErrorTypeConflict
    - ErrorTypeValidation
    - ErrorTypeRateLimited
    - ErrorTypeTimeout
    - ErrorTypeServiceUnavailable
    - ErrorTypeUnprocessableEntity
  models.GetByOriginalURLRequest:
    properties:
      createIfNotExists:
        type: boolean
      customCode:
        type: string
      expiresAfter:
        type: integer
      originalUrl:
        type: string
    required:
    - originalUrl
    type: object
  models.HealthResponse:
    properties:
      application:
        example: true
        type: boolean
      database:
        example: true
        type: boolean
      status:
        description: Overall status of the system
        enum:
        - up
        - down
        - degraded
        example: up
        type: string
    required:
    - application
    - database
    - status
    type: object
  models.JellyfinConfig:
    description: Jellyfin media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      enabled:
        example: false
        type: boolean
      host:
        example: localhost
        type: string
      port:
        example: 8096
        type: integer
      ssl:
        example: false
        type: boolean
      username:
        example: admin
        type: string
    type: object
  models.LoginRequest:
    description: Request payload for user login
    properties:
      email:
        description: |-
          Email is the user's email address
          @Description User's email address
          @Example "user@example.com"
        example: user@example.com
        type: string
      password:
        description: |-
          Password is the user's chosen password
          @Description User's password (plain text in request)
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.LogoutRequest:
    description: Request payload for user logout
    properties:
      refreshToken:
        description: |-
          RefreshToken identifies the session to terminate
          @Description JWT refresh token to invalidate
        type: string
    required:
    - refreshToken
    type: object
  models.NavidromeConfig:
    description: Supersonic music server configuration
    properties:
      enabled:
        example: false
        type: boolean
      host:
        example: localhost
        type: string
      password:
        example: your-password
        type: string
      port:
        example: 4533
        type: integer
      ssl:
        example: false
        type: boolean
      username:
        example: admin
        type: string
    type: object
  models.PlexConfig:
    description: Plex media server configuration
    properties:
      enabled:
        example: false
        type: boolean
      host:
        example: localhost
        type: string
      port:
        example: 32400
        type: integer
      ssl:
        example: false
        type: boolean
      token:
        example: your-plex-token
        type: string
    type: object
  models.RefreshTokenRequest:
    description: Request payload for refreshing access tokens
    properties:
      refreshToken:
        description: |-
          RefreshToken is used to generate a new access token
          @Description JWT refresh token to use for generating new access token
        type: string
    required:
    - refreshToken
    type: object
  models.RegisterRequest:
    description: Request payload for user registration
    properties:
      email:
        description: |-
          Email is the user's email address
          @Description User's email address
          @Example "user@example.com"
        example: user@example.com
        type: string
      password:
        description: |-
          Password is the user's chosen password
          @Description User's password (plain text in request)
        minLength: 8
        type: string
      username:
        description: |-
          Username is the user's desired username
          @Description User's chosen username
          @Example "johndoe"
        example: johndoe
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Shorten:
    properties:
      clickCount:
        example: 0
        type: integer
      createdAt:
        type: string
      expiresAt:
        type: string
      id:
        example: 1
        type: integer
      originalUrl:
        example: https://example.com/some/long/path
        type: string
      shortCode:
        example: abc123
        type: string
      updatedAt:
        type: string
    required:
    - originalUrl
    type: object
  models.ShortenData:
    properties:
      shortUrl:
        type: string
      shorten:
        $ref: '#/definitions/models.Shorten'
    type: object
  models.ShortenRequest:
    properties:
      customCode:
        type: string
      expiresAfter:
        description: In days
        type: integer
      originalUrl:
        type: string
    required:
    - originalUrl
    type: object
  models.SpotifyConfig:
    description: Spotify configuration
    properties:
      clientId:
        example: your-client-id
        type: string
      clientSecret:
        example: your-client-secret
        type: string
      enabled:
        example: false
        type: boolean
      redirectUri:
        example: http://localhost:8080/callback
        type: string
      scopes:
        example: user-library-read playlist-read-private
        type: string
    type: object
  models.TraktConfig:
    description: Trakt.tv configuration
    properties:
      clientId:
        example: your-client-id
        type: string
      clientSecret:
        example: your-client-secret
        type: string
      enabled:
        example: false
        type: boolean
      redirectUri:
        example: http://localhost:8080/callback
        type: string
    type: object
  models.UpdateProfileRequest:
    description: Request payload for updating user profile
    properties:
      email:
        description: |-
          Email is the new email address
          @Description Updated email address for the user
          @Example "newemail@example.com"
        example: newemail@example.com
        type: string
      username:
        description: |-
          Username is the new username
          @Description Updated username for the user
          @Example "newusername"
        example: newusername
        type: string
    type: object
  models.UserConfig:
    description: User-specific configuration stored in the database
    properties:
      autoSyncRecommendations:
        example: true
        type: boolean
      contentLanguages:
        example: en,es,fr
        type: string
      createServerPlaylists:
        example: true
        type: boolean
      createdAt:
        type: string
      defaultCollection:
        example: AI Picks
        type: string
      defaultMediaServer:
        description: Sync Preferences
        enum:
        - emby
        - jellyfin
        - plex
        example: plex
        type: string
      deletedAt:
        type: string
      digestFrequency:
        enum:
        - never
        - daily
        - weekly
        example: weekly
        type: string
      emailNotifications:
        example: true
        type: boolean
      enableAnimations:
        example: true
        type: boolean
      enableExperimentalAI:
        example: false
        type: boolean
      excludedGenres:
        example: horror,war
        type: string
      id:
        type: integer
      includeUnratedContent:
        example: false
        type: boolean
      itemsPerPage:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      language:
        example: en-US
        type: string
      maxContentRating:
        example: R
        type: string
      maxRecommendations:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      minContentRating:
        example: PG-13
        type: string
      newContentWeight:
        example: 0.7
        maximum: 1
        minimum: 0
        type: number
      notificationsEnabled:
        description: Notification Settings
        example: true
        type: boolean
      notifyOnNewRecommendations:
        example: true
        type: boolean
      notifyOnSync:
        example: false
        type: boolean
      personalHistoryWeight:
        example: 0.8
        maximum: 1
        minimum: 0
        type: number
      popularityWeight:
        example: 0.3
        maximum: 1
        minimum: 0
        type: number
      preferredGenres:
        example: action,comedy,drama
        type: string
      recommendationFrequency:
        description: Recommendation Preferences
        enum:
        - daily
        - weekly
        - monthly
        example: daily
        type: string
      recommendationStrategy:
        description: AI Algorithm Settings
        enum:
        - similar
        - diverse
        - balanced
        example: diverse
        type: string
      syncFrequency:
        enum:
        - manual
        - daily
        - weekly
        example: daily
        type: string
      theme:
        description: UI Preferences
        enum:
        - light
        - dark
        - system
        example: dark
        type: string
      updatedAt:
        type: string
      userId:
        description: UserID links this config to a specific user
        type: integer
    required:
    - language
    type: object
  models.UserResponse:
    description: User information returned in API responses
    properties:
      email:
        description: |-
          Email is the unique email address of the user
          @Description User's email address
          @Example "user@example.com"
        type: string
      id:
        description: |-
          ID is the unique identifier for the user
          @Description User's unique identifier
          @Example 1
        type: integer
      role:
        description: |-
          Role defines the user's permission level
          @Description User's role in the system
          @Enum "user" "admin"
          @Example "user"
        type: string
      username:
        description: |-
          Username is the display name chosen by the user
          @Description User's chosen username
          @Example "johndoe"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: Dane Miller
    url: http://www.swagger.io/support
  description: API Server for Suasor
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Suasor API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password
      parameters:
      - description: User login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated user
          schema:
            $ref: '#/definitions/models.APIResponse-models_AuthData'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Invalid credentials or inactive account
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Log in a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates the refresh token, effectively logging the user out
      parameters:
      - description: Logout data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/models.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Log out a user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed token
          schema:
            $ref: '#/definitions/models.APIResponse-models_AuthData'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email, username, and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/models.APIResponse-models_AuthData'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "409":
          description: Email or username already in use
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Register a new user
      tags:
      - auth
  /config:
    get:
      consumes:
      - application/json
      description: Returns the current system configuration
      produces:
      - application/json
      responses:
        "200":
          description: Configuration retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse-models_Configuration'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Get current configuration
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Updates the system-wide application configuration (admin only)
      parameters:
      - description: Configuration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Configuration'
      produces:
      - application/json
      responses:
        "200":
          description: Configuration updated successfully
          schema:
            $ref: '#/definitions/models.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Update application configuration
      tags:
      - config
  /config/file:
    get:
      consumes:
      - application/json
      description: Returns the file-based system configuration (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: File configuration retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse-models_Configuration'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Get file-based configuration
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Saves the configuration to file only (admin only)
      parameters:
      - description: Configuration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Configuration'
      produces:
      - application/json
      responses:
        "200":
          description: Configuration saved to file successfully
          schema:
            $ref: '#/definitions/models.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Save configuration to file
      tags:
      - config
  /config/reset:
    post:
      consumes:
      - application/json
      description: Resets the system configuration to default values (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Configuration reset successfully
          schema:
            $ref: '#/definitions/models.APIResponse-any'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Reset configuration to defaults
      tags:
      - config
  /config/user:
    get:
      consumes:
      - application/json
      description: Returns the configuration for the current user
      produces:
      - application/json
      responses:
        "200":
          description: User configuration retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse-models_UserConfig'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Get user configuration
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Updates the configuration for the current user
      parameters:
      - description: User configuration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserConfig'
      produces:
      - application/json
      responses:
        "200":
          description: User configuration updated successfully
          schema:
            $ref: '#/definitions/models.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Update user configuration
      tags:
      - config
  /health:
    get:
      description: returns JSON object with health statuses.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: checks app and database health
      tags:
      - health
  /shorten:
    post:
      consumes:
      - application/json
      description: Creates a new shortened URL from a long URL, with optional custom
        code and expiration. If no custom code is provided, one will be generated.
      parameters:
      - description: URL to shorten
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ShortenRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created shortened URL
          schema:
            $ref: '#/definitions/models.APIResponse-models_ShortenData'
        "400":
          description: Invalid request format or short code already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Create a shortened URL
      tags:
      - shorten
  /shorten/{code}:
    delete:
      description: Deletes an existing shortened URL by its short code
      parameters:
      - description: Short code identifier
        in: path
        name: code
        required: true
        type: string
      responses:
        "204":
          description: No Content - URL successfully deleted
        "400":
          description: Bad request - missing code parameter
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "404":
          description: Short URL not found
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Delete a shortened URL
      tags:
      - shorten
    get:
      description: Redirects to the original URL from a short code
      parameters:
      - description: Short code identifier
        in: path
        name: code
        required: true
        type: string
      responses:
        "302":
          description: Found - Redirects to the original URL
          headers:
            Location:
              description: The URL to redirect to
              type: string
        "400":
          description: Bad request - missing code parameter
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "404":
          description: Short URL not found or has expired
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Redirect to original URL
      tags:
      - shorten
    put:
      consumes:
      - application/json
      description: Updates an existing shortened URL by its short code
      parameters:
      - description: Short code identifier
        in: path
        name: code
        required: true
        type: string
      - description: Updated URL data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ShortenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated shortened URL
          schema:
            $ref: '#/definitions/models.APIResponse-models_ShortenData'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "404":
          description: Short URL not found
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Update a shortened URL
      tags:
      - shorten
  /shorten/lookup:
    post:
      consumes:
      - application/json
      description: Checks if an original URL already has a short code and optionally
        creates one if it doesn't exist
      parameters:
      - description: Original URL to check
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GetByOriginalURLRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved shortened URL information
          schema:
            $ref: '#/definitions/models.APIResponse-models_ShortenData'
        "201":
          description: Successfully created new shortened URL
          schema:
            $ref: '#/definitions/models.APIResponse-models_ShortenData'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "404":
          description: Original URL not found and createIfNotExists is false
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Check if a URL is already shortened
      tags:
      - shorten
  /users/{id}:
    delete:
      description: Deletes a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content - User successfully deleted
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Delete a user account
      tags:
      - users
    get:
      description: Retrieves a user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/models.APIResponse-models_UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
  /users/{id}/activate:
    post:
      description: Activates a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully activated user account
          schema:
            $ref: '#/definitions/models.APIResponse-models_UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Activate a user account
      tags:
      - users
  /users/{id}/deactivate:
    post:
      description: Deactivates a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deactivated user account
          schema:
            $ref: '#/definitions/models.APIResponse-models_UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Deactivate a user account
      tags:
      - users
  /users/{id}/role:
    put:
      consumes:
      - application/json
      description: Changes a user's role (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New role information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangeRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully changed user role
          schema:
            $ref: '#/definitions/models.APIResponse-models_UserResponse'
        "400":
          description: Invalid user ID format or invalid role
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Change user role
      tags:
      - users
  /users/password:
    put:
      consumes:
      - application/json
      description: Changes the password for the currently authenticated user
      parameters:
      - description: Password change information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully changed password
          schema:
            $ref: '#/definitions/models.APIResponse-string'
        "400":
          description: Invalid request format or incorrect current password
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /users/profile:
    get:
      description: Retrieves the profile information for the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/models.APIResponse-models_UserResponse'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get the current user's profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the profile information for the currently authenticated
        user
      parameters:
      - description: Updated profile information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user profile
          schema:
            $ref: '#/definitions/models.APIResponse-models_UserResponse'
        "400":
          description: Invalid request format or email/username already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided information
      parameters:
      - description: User registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/models.APIResponse-models_UserResponse'
        "400":
          description: Invalid request format or email/username already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse-error'
      summary: Register a new user
      tags:
      - users
schemes:
- http
swagger: "2.0"
x-bruno-variable:
  apiKey: '{{your_api_key}}'
