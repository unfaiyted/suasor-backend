basePath: /api/v1
definitions:
  errors.ErrorType:
    enum:
    - FAILED_CHECK
    - UNAUTHORIZED
    - NOT_FOUND
    - BAD_REQUEST
    - INTERNAL_ERROR
    - FORBIDDEN
    - CONFLICT
    - VALIDATION_ERROR
    - RATE_LIMITED
    - TIMEOUT
    - SERVICE_UNAVAILABLE
    - UNPROCESSABLE_ENTITY
    type: string
    x-enum-varnames:
    - ErrorTypeFailedCheck
    - ErrorTypeUnauthorized
    - ErrorTypeNotFound
    - ErrorTypeBadRequest
    - ErrorTypeInternalError
    - ErrorTypeForbidden
    - ErrorTypeConflict
    - ErrorTypeValidation
    - ErrorTypeRateLimited
    - ErrorTypeTimeout
    - ErrorTypeServiceUnavailable
    - ErrorTypeUnprocessableEntity
  map_string_array_models.MediaItem-any:
    additionalProperties:
      items:
        $ref: '#/definitions/models.MediaItem-any'
      type: array
    type: object
  models.AIModelPreferences:
    properties:
      defaultMaxTokens:
        example: 4000
        maximum: 100000
        minimum: 100
        type: integer
      defaultModelForChat:
        example: claude-3-opus-20240229
        type: string
      defaultModelForRecommendations:
        example: claude-3-opus-20240229
        type: string
      defaultTemperature:
        example: 0.7
        maximum: 1
        minimum: 0
        type: number
    type: object
  models.Award:
    properties:
      category:
        type: string
      isWinner:
        type: boolean
      name:
        type: string
      production:
        description: Movie/show the award was for
        type: string
      year:
        type: integer
    type: object
  models.Client-types_ClientConfig:
    properties:
      category:
        $ref: '#/definitions/types.ClientCategory'
      config:
        $ref: '#/definitions/models.ClientConfigWrapper-types_ClientConfig'
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        description: Internal ID
        type: integer
      isEnabled:
        type: boolean
      name:
        type: string
      type:
        $ref: '#/definitions/types.ClientType'
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
  models.ClientConfigWrapper-types_ClientConfig:
    properties:
      data: {}
    type: object
  models.Credit:
    properties:
      character:
        description: For actors
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      department:
        description: e.g., "Directing", "Writing", "Sound"
        type: string
      episodeCount:
        description: Number of episodes for TV series
        type: integer
      id:
        description: Internal ID
        type: integer
      isArtist:
        type: boolean
      isCast:
        description: Credit type flags
        type: boolean
      isCreator:
        type: boolean
      isCrew:
        type: boolean
      isGuest:
        type: boolean
      job:
        description: Specific job title
        type: string
      mediaItemId:
        type: integer
      metadata:
        allOf:
        - $ref: '#/definitions/models.CreditMetadata'
        description: Credit metadata (awards, notes, etc.)
      name:
        description: Name as it appears in the credits
        type: string
      order:
        description: Display order in credits
        type: integer
      person:
        $ref: '#/definitions/models.Person'
      personId:
        type: integer
      role:
        description: e.g., "Director", "Actor"
        type: string
      seasonNumber:
        description: For TV series credits
        type: integer
      updatedAt:
        type: string
    type: object
  models.CreditAward:
    properties:
      category:
        type: string
      isNominee:
        type: boolean
      isWinner:
        type: boolean
      name:
        type: string
      year:
        type: integer
    type: object
  models.CreditMetadata:
    properties:
      additionalInfo:
        additionalProperties: {}
        type: object
      awards:
        items:
          $ref: '#/definitions/models.CreditAward'
        type: array
      notes:
        type: string
      specialPerformance:
        type: boolean
      uncredited:
        type: boolean
      voiceOnly:
        type: boolean
    type: object
  models.DefaultClients:
    properties:
      aiClientId:
        example: 1
        type: integer
      bookAutomationId:
        example: 1
        type: integer
      bookClientId:
        description: 'TODO: Add support for books. Should it be books vs audiobooks?
          How would I want to handle that?'
        example: 1
        type: integer
      movieAutomationId:
        example: 1
        type: integer
      musicAutomationId:
        example: 1
        type: integer
      musicClientId:
        example: 1
        type: integer
      seriesAutomationId:
        example: 1
        type: integer
      videoClientId:
        example: 1
        type: integer
    type: object
  models.ExternalID:
    properties:
      id:
        description: The actual ID
        type: string
      source:
        description: e.g., "tmdb", "imdb", "trakt", "tvdb"
        type: string
    type: object
  models.ExternalIDMap:
    additionalProperties:
      type: string
    type: object
  models.ExternalLink:
    properties:
      name:
        type: string
      url:
        type: string
    type: object
  models.Genres:
    properties:
      anime:
        example:
        - action
        - comedy
        - drama
        items:
          type: string
        type: array
      books:
        example:
        - fantasy
        - horror
        - mystery
        items:
          type: string
        type: array
      games:
        example:
        - action
        - comedy
        - drama
        items:
          type: string
        type: array
      movies:
        example:
        - action
        - comedy
        - drama
        items:
          type: string
        type: array
      music:
        example:
        - electronic
        - pop
        - rock
        items:
          type: string
        type: array
      series:
        example:
        - action
        - comedy
        - drama
        items:
          type: string
        type: array
    type: object
  models.JobRun:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      endTime:
        description: When the job finished running
        type: string
      errorMessage:
        description: Any error message from the job run
        type: string
      id:
        description: Internal ID
        type: integer
      jobName:
        description: The name of the job
        type: string
      jobType:
        allOf:
        - $ref: '#/definitions/models.JobType'
        description: Type of job (recommendation, sync, etc.)
      metadata:
        description: Metadata related to the job (stored as JSON)
        type: string
      processedItems:
        description: Items processed so far
        type: integer
      progress:
        description: Progress percentage (0-100)
        type: integer
      startTime:
        description: When the job started running
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.JobStatus'
        description: Status of the job run
      statusMessage:
        description: Current status message
        type: string
      totalItems:
        description: Total items to process
        type: integer
      updatedAt:
        type: string
      userId:
        description: User ID associated with the job, if applicable
        type: integer
    type: object
  models.JobSchedule:
    properties:
      config:
        description: Any configuration for the job (stored as JSON)
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      enabled:
        description: Whether the job is enabled
        type: boolean
      frequency:
        description: How often the job should run
        type: string
      id:
        description: Internal ID
        type: integer
      jobName:
        description: Unique name of the job
        type: string
      jobType:
        allOf:
        - $ref: '#/definitions/models.JobType'
        description: Type of job (recommendation, sync, etc.)
      lastRunTime:
        description: When the job last ran
        type: string
      updatedAt:
        type: string
      userId:
        description: User ID associated with the job, if applicable (for user-specific
          jobs)
        type: integer
    type: object
  models.JobStatus:
    enum:
    - pending
    - running
    - completed
    - failed
    type: string
    x-enum-varnames:
    - JobStatusPending
    - JobStatusRunning
    - JobStatusCompleted
    - JobStatusFailed
  models.JobType:
    enum:
    - recommendation
    - sync
    - system
    - notification
    - analysis
    type: string
    x-enum-varnames:
    - JobTypeRecommendation
    - JobTypeSync
    - JobTypeSystem
    - JobTypeNotification
    - JobTypeAnalysis
  models.ListItem:
    properties:
      itemUuid:
        type: string
      lastChanged:
        type: string
      position:
        type: integer
    type: object
  models.MaxRecommendations:
    properties:
      anime:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      books:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      games:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      movies:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      music:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      series:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
    type: object
  models.MediaItem-any:
    properties:
      createdAt:
        type: string
      data:
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItem-suasor_clients_media_types_Movie:
    properties:
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/suasor_clients_media_types.Movie'
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItem-types_Album:
    properties:
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Album'
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItem-types_Artist:
    properties:
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Artist'
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItem-types_Episode:
    properties:
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Episode'
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItem-types_ListData:
    properties:
      createdAt:
        type: string
      data:
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItem-types_MediaData:
    properties:
      createdAt:
        type: string
      data:
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItem-types_Playlist:
    properties:
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Playlist'
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItem-types_Series:
    properties:
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Series'
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItem-types_Track:
    properties:
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Track'
        description: Type-specific media data
      deletedAt:
        type: string
      downloadUrl:
        type: string
      externalIds:
        description: External IDs for this item (TMDB, IMDB, etc.)
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      id:
        description: Internal ID
        type: integer
      ownerId:
        description: ID of the user that owns this item, 0 for system owned items
        type: integer
      releaseDate:
        type: string
      releaseYear:
        type: integer
      streamUrl:
        type: string
      syncClients:
        description: Client IDs for this item (mapping client to their IDs)
        items:
          $ref: '#/definitions/models.SyncClient'
        type: array
      title:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
      uuid:
        description: Stable UUID for syncing
        type: string
    type: object
  models.MediaItemList:
    properties:
      details:
        $ref: '#/definitions/models.MediaItem-types_ListData'
      listOriginID:
        description: 0 for internal db, otherwise external client/ProviderID
        type: integer
      listType:
        $ref: '#/definitions/types.ListType'
      order:
        items:
          $ref: '#/definitions/models.ListItem'
        type: array
      ownerID:
        type: integer
    type: object
  models.MediaSyncJob:
    properties:
      clientId:
        description: ID of the client to sync from
        type: integer
      clientType:
        description: Type of the client
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      enabled:
        description: Whether sync is enabled
        type: boolean
      filters:
        description: Sync filter criteria (stored as JSON)
        type: string
      frequency:
        description: Sync frequency
        type: string
      id:
        description: Internal ID
        type: integer
      lastSyncTime:
        description: Last sync time
        type: string
      mediaType:
        description: Type of media to sync (movies, series, music, etc.)
        type: string
      updatedAt:
        type: string
      userId:
        description: ID of the user
        type: integer
    type: object
  models.Person:
    properties:
      biography:
        type: string
      birthplace:
        type: string
      createdAt:
        type: string
      dateOfBirth:
        type: string
      dateOfDeath:
        type: string
      deletedAt:
        type: string
      externalIds:
        description: ClientIDs   ClientIDs   `json:"clientIds" gorm:"type:jsonb"`
        items:
          $ref: '#/definitions/models.ExternalID'
        type: array
      gender:
        type: string
      id:
        description: Internal ID
        type: integer
      knownFor:
        description: Professional information
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/models.PersonMetadata'
        description: Additional metadata
      name:
        type: string
      photo:
        description: Biographical information
        type: string
      popularity:
        type: number
      updatedAt:
        type: string
    type: object
  models.PersonMetadata:
    properties:
      alternateNames:
        items:
          type: string
        type: array
      awards:
        items:
          $ref: '#/definitions/models.Award'
        type: array
      externalLinks:
        items:
          $ref: '#/definitions/models.ExternalLink'
        type: array
      socialMedia:
        $ref: '#/definitions/models.SocialMedia'
      tags:
        items:
          type: string
        type: array
    type: object
  models.PrivacySettings:
    properties:
      publicProfile:
        example: true
        type: boolean
      shareRecommendations:
        example: true
        type: boolean
      showRecommendationList:
        example: true
        type: boolean
      showWatchHistory:
        example: true
        type: boolean
    type: object
  models.Recommendation:
    description: Media recommendation stored in the database
    properties:
      active:
        description: Whether this is an active recommendation
        type: boolean
      aiModel:
        description: AI model used if recommendedBy="AI"
        type: string
      confidence:
        description: Confidence score (0.0 to 1.0) if available
        type: number
      createdAt:
        type: string
      deletedAt:
        type: string
      dismissed:
        description: Whether this item has been dismissed by the user
        type: boolean
      expiresAt:
        description: When this recommendation expires
        type: string
      externalIds:
        $ref: '#/definitions/models.ExternalIDMap'
      genres:
        items:
          type: string
        type: array
      id:
        description: Internal ID
        type: integer
      inLibrary:
        description: Whether this item is present in the user's library
        type: boolean
      isViewed:
        description: Whether user has viewed this item
        type: boolean
      jobRunId:
        description: Job run that created this recommendation
        type: integer
      matchesActors:
        items:
          type: string
        type: array
      matchesDirectors:
        items:
          type: string
        type: array
      matchesGenres:
        items:
          type: string
        type: array
      mediaItemId:
        type: integer
      mediaType:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: '"movie", "series", "music"'
      metadata:
        description: Additional metadata (stored as JSON)
        type: string
      reasoning:
        type: string
      recommendedBy:
        description: '"AI", "popular", "similar_users"'
        type: string
      similarItems:
        items:
          type: string
        type: array
      source:
        allOf:
        - $ref: '#/definitions/models.RecommendationSource'
        description: Source of the recommendation (AI, system, manual)
      sourceClientId:
        description: ID of the client that generated this recommendation, if applicable
        type: integer
      sourceClientType:
        description: Type of the client that generated this recommendation
        type: string
      title:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
      userRating:
        description: If user has rated this recommendation
        type: number
      year:
        type: integer
    type: object
  models.RecommendationSource:
    enum:
    - ai
    - system
    - manual
    type: string
    x-enum-varnames:
    - RecommendationSourceAI
    - RecommendationSourceSystem
    - RecommendationSourceManual
  models.SocialLinks:
    properties:
      lastfm:
        example: https://last.fm/user/faiyt
        type: string
      letterboxd:
        example: https://letterboxd.com/faiyt
        type: string
      trakt:
        example: https://trakt.tv/users/faiyt
        type: string
    type: object
  models.SocialMedia:
    properties:
      facebook:
        type: string
      instagram:
        type: string
      twitter:
        type: string
      website:
        type: string
    type: object
  models.SyncClient:
    properties:
      clientId:
        description: ID of the client that this external ID belongs to (optional for
          service IDs like TMDB)
        type: integer
      clientType:
        allOf:
        - $ref: '#/definitions/types.ClientType'
        description: Type of client this ID belongs to (optional for service IDs)
      itemId:
        description: The actual ID value in the external system
        type: string
    type: object
  models.UserConfig:
    description: User-specific configuration stored in the database
    properties:
      activityAnalysisEnabled:
        description: Activity Analysis Settings
        example: true
        type: boolean
      aiChatPersonality:
        description: AI Algorithm Settings
        enum:
        - friendly
        - serious
        - enthusiastic
        - analytical
        - custom
        example: serious
        type: string
      aiModelPreferences:
        allOf:
        - $ref: '#/definitions/models.AIModelPreferences'
        description: AI Model Preferences
      bio:
        description: Profile settings
        example: I'm a developer
        type: string
      contentAvailabilityEnabled:
        description: Content Availability Settings
        example: true
        type: boolean
      contentTypes:
        description: What sidebar options to show based on the enabled content types.
        example: movie,series,tv
        type: string
      createdAt:
        type: string
      defaultClients:
        $ref: '#/definitions/models.DefaultClients'
      deletedAt:
        type: string
      digestFrequency:
        enum:
        - never
        - daily
        - weekly
        example: weekly
        type: string
      discoveryModeEnabled:
        description: Emphasize new content discovery
        example: true
        type: boolean
      discoveryModeRatio:
        example: 0.5
        maximum: 1
        minimum: 0
        type: number
      displayName:
        example: John Doe
        type: string
      emailNotifications:
        example: true
        type: boolean
      enableAnimations:
        example: true
        type: boolean
      excludedGenres:
        $ref: '#/definitions/models.Genres'
      excludedKeywords:
        example: war,violence,politics
        type: string
      id:
        description: Internal ID
        type: integer
      includeUnratedContent:
        example: false
        type: boolean
      itemsPerPage:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      language:
        example: en-US
        type: string
      maxContentRating:
        example: R
        type: string
      maxNotificationsPerDay:
        example: 10
        maximum: 100
        minimum: 1
        type: integer
      maxRecommendations:
        allOf:
        - $ref: '#/definitions/models.MaxRecommendations'
        description: how many movie recommendations to generate
      minContentRating:
        example: PG-13
        type: string
      newContentWeight:
        example: 0.7
        maximum: 1
        minimum: 0
        type: number
      newReleaseMediaTypes:
        example: movie,series,music
        type: string
      newReleaseNotificationsEnabled:
        description: New Release Notifications Settings
        example: true
        type: boolean
      notificationsEnabled:
        description: Notification Settings
        example: true
        type: boolean
      notifyMediaTypes:
        example: movie,series,music
        type: string
      notifyOnNewRecommendations:
        example: true
        type: boolean
      notifyOnSync:
        example: false
        type: boolean
      notifyRatingThreshold:
        example: 5
        maximum: 10
        minimum: 0
        type: number
      notifyRecentReleases:
        example: true
        type: boolean
      notifyUpcomingReleases:
        example: true
        type: boolean
      onboardingCompleted:
        description: Onboarding
        example: true
        type: boolean
      personalHistoryWeight:
        example: 0.8
        maximum: 1
        minimum: 0
        type: number
      playlistSyncDirection:
        example: bidirectional
        type: string
      playlistSyncEnabled:
        description: Playlist Sync Settings
        example: true
        type: boolean
      popularityWeight:
        example: 0.3
        maximum: 1
        minimum: 0
        type: number
      preferredAudioLanguages:
        example: en,ja
        type: string
      preferredContentLength:
        enum:
        - short
        - medium
        - long
        example: short
        type: string
      preferredGenres:
        $ref: '#/definitions/models.Genres'
      privacySettings:
        $ref: '#/definitions/models.PrivacySettings'
      recommendationContentTypes:
        description: What content types with be part of the auto sync recommendations
        example: movie,series,tv,book
        type: string
      recommendationIncludeSimilar:
        example: false
        type: boolean
      recommendationIncludeWatched:
        example: false
        type: boolean
      recommendationListPrefix:
        description: Prefux to add to teh beginning of the list name to identify that
          its part of the auto recommendations system
        example: AI Picks
        type: string
      recommendationMaxAge:
        description: In years, 0 = no limit
        example: 5
        maximum: 100
        minimum: 0
        type: integer
      recommendationMinRating:
        example: 6
        type: number
      recommendationStrategy:
        enum:
        - similar
        - recent
        - popular
        - balanced
        example: popular
        type: string
      recommendationSyncEnabled:
        description: |-
          Recommendation Preferences
          Automatically download and organized recommended media into a collection/playlist
        example: true
        type: boolean
      recommendationSyncFrequency:
        description: How often to sync new recommendations
        enum:
        - manual
        - daily
        - weekly
        - monthly
        example: daily
        type: string
      recommendationSyncListType:
        description: What type of list to create for the synced recommendations
        enum:
        - playlist
        - collection
        example: playlist
        type: string
      showAdultContent:
        example: false
        type: boolean
      smartCollectionsEnabled:
        description: Smart Collections Settings
        example: true
        type: boolean
      socialLinks:
        $ref: '#/definitions/models.SocialLinks'
      theme:
        description: UI Preferences
        enum:
        - light
        - dark
        - system
        example: dark
        type: string
      updatedAt:
        type: string
      userId:
        description: UserID links this config to a specific user
        type: integer
    type: object
  models.UserMediaItemData-suasor_clients_media_types_Movie:
    properties:
      completed:
        type: boolean
      createdAt:
        type: string
      durationSeconds:
        type: integer
      id:
        type: integer
      isDisliked:
        type: boolean
      isFavorite:
        type: boolean
      item:
        allOf:
        - $ref: '#/definitions/models.MediaItem-suasor_clients_media_types_Movie'
        description: Not stored in DB, loaded via relationship
      lastPlayedAt:
        type: string
      mediaItemId:
        description: Foreign key to MediaItem
        type: integer
      playCount:
        type: integer
      playedAt:
        type: string
      playedPercentage:
        type: number
      positionSeconds:
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: '"movie", "episode", "show", "season"'
      updatedAt:
        type: string
      userId:
        description: Foreign key to User
        type: integer
      userRating:
        type: number
      uuid:
        description: Stable UUID for syncing
        type: string
      watchlist:
        type: boolean
    type: object
  models.UserMediaItemData-types_Series:
    properties:
      completed:
        type: boolean
      createdAt:
        type: string
      durationSeconds:
        type: integer
      id:
        type: integer
      isDisliked:
        type: boolean
      isFavorite:
        type: boolean
      item:
        allOf:
        - $ref: '#/definitions/models.MediaItem-types_Series'
        description: Not stored in DB, loaded via relationship
      lastPlayedAt:
        type: string
      mediaItemId:
        description: Foreign key to MediaItem
        type: integer
      playCount:
        type: integer
      playedAt:
        type: string
      playedPercentage:
        type: number
      positionSeconds:
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: '"movie", "episode", "show", "season"'
      updatedAt:
        type: string
      userId:
        description: Foreign key to User
        type: integer
      userRating:
        type: number
      uuid:
        description: Stable UUID for syncing
        type: string
      watchlist:
        type: boolean
    type: object
  requests.AddMediaRequest:
    properties:
      metadataProfileID:
        description: For Lidarr
        type: integer
      monitored:
        type: boolean
      musicBrainzID:
        description: For Lidarr (music)
        type: string
      path:
        type: string
      qualityProfileID:
        type: integer
      searchForMedia:
        description: Whether to search for the media after adding
        type: boolean
      tags:
        items:
          type: integer
        type: array
      title:
        type: string
      tmdbid:
        description: For Radarr (movies)
        type: integer
      tvdbid:
        description: For Sonarr (TV shows)
        type: integer
      year:
        type: integer
    type: object
  requests.AiContentAnalysisRequest:
    description: Request for AI-powered content analysis
    properties:
      clientId:
        description: Client ID to use for the conversation
        type: integer
      clientType:
        description: |-
          Specific AI client type to use (claude, openai, ollama)
          example: claude
        type: string
      content:
        description: |-
          The content to analyze
          required: true
          example: This is a sample text that needs analysis for sentiment and themes.
        type: string
      contentType:
        description: |-
          Type of content being analyzed (text, movie, etc)
          required: true
          example: text
        type: string
      options:
        additionalProperties: {}
        description: |-
          Optional analysis options
          example: {"includeThemes": true, "includeSentiment": true}
        type: object
    required:
    - content
    - contentType
    type: object
  requests.AiRecommendationRequest:
    description: Request for AI-powered content recommendations
    properties:
      clientId:
        description: Client ID to use for the conversation
        type: integer
      clientType:
        description: |-
          Specific AI client type to use (claude, openai, ollama)
          example: claude
        type: string
      contentType:
        description: |-
          Type of content to recommend (movie, tv, music, etc)
          required: true
          example: movie
        type: string
      count:
        description: |-
          Number of recommendations to return
          example: 5
        type: integer
      filters:
        additionalProperties: {}
        description: |-
          Optional filters to apply to recommendations
          example: {"genre": "sci-fi", "year": "2020-2023"}
        type: object
    required:
    - contentType
    type: object
  requests.AvatarUploadResponse:
    description: Response data after avatar upload
    properties:
      filePath:
        description: |-
          FilePath is the path to the uploaded avatar file
          @Description Path to the uploaded avatar file
          @Example "/uploads/avatars/user_1.jpg"
        example: /uploads/avatars/user_1.jpg
        type: string
    type: object
  requests.ChangePasswordRequest:
    description: Request payload for changing user password
    properties:
      currentPassword:
        description: |-
          CurrentPassword is the user's existing password for verification
          @Description User's current password for verification
          @Example "oldpassword123"
        example: oldpassword123
        type: string
      newPassword:
        description: |-
          NewPassword is the password to change to
          @Description New password to set for the user
          @Example "newpassword456"
        example: newpassword456
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  requests.ChangeRoleRequest:
    description: Request payload for changing user role
    properties:
      role:
        description: |-
          Role is the new role to assign to the user
          @Description New role to assign to the user
          @Enum "user" "admin"
          @Example "admin"
        enum:
        - user
        - admin
        example: admin
        type: string
    required:
    - role
    type: object
  requests.ClientRequest-types_ClientConfig:
    properties:
      client: {}
      clientID:
        type: integer
      clientType:
        $ref: '#/definitions/types.ClientType'
      isEnabled:
        type: boolean
      name:
        type: string
    required:
    - clientType
    - name
    type: object
  requests.ClientTestRequest-types_ClientConfig:
    properties:
      client: {}
      clientType:
        allOf:
        - $ref: '#/definitions/types.ClientType'
        enum:
        - radarr
        - sonarr
        - lidarr
        - emby
        - jellyfin
        - subsonic
        - plex
        - claude
        - openai
        - ollama
    required:
    - clientType
    type: object
  requests.ConversationMessageRequest:
    description: Request to send a message in an existing AI conversation
    properties:
      clientId:
        description: Client ID to use for the conversation
        type: integer
      context:
        additionalProperties: {}
        description: |-
          Optional context information for this message
          example: {"includeRecommendations": true, "maxResults": 3}
        type: object
      conversationId:
        description: |-
          The conversation ID from a previous StartConversation call
          required: true
          example: conv-123-abcdef
        type: string
      message:
        description: |-
          The user's message to the AI
          required: true
          example: I'm looking for sci-fi movies similar to Interstellar
        type: string
    required:
    - conversationId
    - message
    type: object
  requests.CreateCreditRequest:
    description: Request payload for creating a new credit
    properties:
      character:
        description: |-
          Character is the character's name (for acting roles)
          @Description Character's name (for acting roles)
          @Example "Forrest Gump"
        example: Forrest Gump
        type: string
      department:
        description: |-
          Department is the department the person worked in
          @Description Department the person worked in
          @Example "Acting"
        example: Acting
        type: string
      isArtist:
        description: |-
          IsArtist indicates if this is an artist credit
          @Description Indicates if this is an artist credit
          @Example false
        example: false
        type: boolean
      isCast:
        description: |-
          IsCast indicates if this is a cast credit
          @Description Indicates if this is a cast credit
          @Example true
        example: true
        type: boolean
      isCreator:
        description: |-
          IsCreator indicates if this is a creator credit
          @Description Indicates if this is a creator credit
          @Example false
        example: false
        type: boolean
      isCrew:
        description: |-
          IsCrew indicates if this is a crew credit
          @Description Indicates if this is a crew credit
          @Example false
        example: false
        type: boolean
      isGuest:
        description: |-
          IsGuest indicates if this is a guest credit
          @Description Indicates if this is a guest credit
          @Example false
        example: false
        type: boolean
      job:
        description: |-
          Job is the specific job the person had
          @Description Specific job the person had
          @Example "Lead Actor"
        example: Lead Actor
        type: string
      mediaItemId:
        description: |-
          MediaItemID is the ID of the media item
          @Description ID of the media item
          @Example 2
        example: 2
        type: integer
      name:
        description: |-
          Name is the person's name for this credit
          @Description Person's name for this credit
          @Example "Tom Hanks"
        example: Tom Hanks
        type: string
      order:
        description: |-
          Order is the order of importance (lower means more important)
          @Description Order of importance (lower means more important)
          @Example 1
        example: 1
        type: integer
      personId:
        description: |-
          PersonID is the ID of the person
          @Description ID of the person
          @Example 1
        example: 1
        type: integer
      role:
        description: |-
          Role is the person's role
          @Description Person's role
          @Example "Actor"
        example: Actor
        type: string
    required:
    - mediaItemId
    - name
    - personId
    type: object
  requests.CreateCreditsRequest:
    description: Request payload for creating multiple credits for a media item
    properties:
      credits:
        description: |-
          Credits is the list of credits to create
          @Description List of credits to create
        items:
          $ref: '#/definitions/requests.CreateCreditRequest'
        type: array
    required:
    - credits
    type: object
  requests.CreatePersonRequest:
    description: Request payload for creating a new person
    properties:
      biography:
        description: |-
          Biography is the person's biography
          @Description Person's biography
          @Example "Thomas Jeffrey Hanks is an American actor and filmmaker..."
        example: Thomas Jeffrey Hanks is an American actor and filmmaker...
        type: string
      birthplace:
        description: |-
          Birthplace is the person's birthplace
          @Description Person's birthplace
          @Example "Concord, California, USA"
        example: Concord, California, USA
        type: string
      dateOfBirth:
        description: |-
          DateOfBirth is the person's date of birth
          @Description Person's date of birth in RFC3339 format
          @Example "1956-07-09T00:00:00Z"
        example: "1956-07-09T00:00:00Z"
        type: string
      dateOfDeath:
        description: |-
          DateOfDeath is the person's date of death (if applicable)
          @Description Person's date of death in RFC3339 format (if applicable)
          @Example "2056-07-09T00:00:00Z"
        example: "2056-07-09T00:00:00Z"
        type: string
      externalIds:
        description: |-
          ExternalIDs contains IDs from external services
          @Description IDs from external services
        items:
          $ref: '#/definitions/requests.ExternalIDRequest'
        type: array
      gender:
        description: |-
          Gender is the person's gender
          @Description Person's gender
          @Example "Male"
        example: Male
        type: string
      knownFor:
        description: |-
          KnownFor is what the person is primarily known for
          @Description What the person is primarily known for
          @Example "Actor"
        example: Actor
        type: string
      name:
        description: |-
          Name is the person's name
          @Description Person's name
          @Example "Tom Hanks"
        example: Tom Hanks
        type: string
      photo:
        description: |-
          Photo is the URL or path to the person's photo
          @Description URL or path to the person's photo
          @Example "https://example.com/photos/tom-hanks.jpg"
        example: https://example.com/photos/tom-hanks.jpg
        type: string
    required:
    - name
    type: object
  requests.CreateTagRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  requests.ExecuteCommandRequest:
    properties:
      command:
        type: string
      parameters:
        additionalProperties: true
        type: object
    required:
    - command
    type: object
  requests.ExternalIDRequest:
    description: External ID for a person
    properties:
      id:
        description: |-
          ID is the identifier in the external service
          @Description Identifier in the external service
          @Example "31"
        example: "31"
        type: string
      source:
        description: |-
          Source is the name of the external service
          @Description Name of the external service
          @Example "TMDB"
        example: TMDB
        type: string
    required:
    - id
    - source
    type: object
  requests.ImportPersonRequest:
    description: Request payload for importing a person from an external source
    properties:
      externalId:
        description: |-
          ExternalID is the identifier in the external service
          @Description Identifier in the external service
          @Example "31"
        example: "31"
        type: string
      personData:
        allOf:
        - $ref: '#/definitions/requests.CreatePersonRequest'
        description: |-
          PersonData contains the person data to import
          @Description Person data to import
      source:
        description: |-
          Source is the name of the external service
          @Description Name of the external service
          @Example "TMDB"
        example: TMDB
        type: string
    required:
    - externalId
    - personData
    - source
    type: object
  requests.ListAddTrackRequest:
    properties:
      trackId:
        type: integer
    type: object
  requests.ListCreateRequest:
    properties:
      description:
        type: string
      duration:
        type: integer
      genre:
        type: string
      isPublic:
        type: boolean
      isSmart:
        type: boolean
      name:
        type: string
      rating:
        type: number
      type:
        $ref: '#/definitions/requests.ListType'
      year:
        type: integer
    type: object
  requests.ListReorderRequest:
    properties:
      itemIds:
        items:
          type: integer
        type: array
    type: object
  requests.ListType:
    enum:
    - playlist
    - collection
    type: string
    x-enum-varnames:
    - ListTypePlaylist
    - ListTypeCollection
  requests.ListUpdateRequest:
    properties:
      description:
        type: string
      isPublic:
        type: boolean
      name:
        type: string
    type: object
  requests.LoginRequest:
    description: Request payload for user login
    properties:
      email:
        description: |-
          Email is the user's email address
          @Description User's email address
          @Example "user@example.com"
        example: user@example.com
        type: string
      password:
        description: |-
          Password is the user's chosen password
          @Description User's password (plain text in request)
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  requests.LogoutRequest:
    description: Request payload for user logout
    properties:
      refreshToken:
        description: |-
          RefreshToken identifies the session to terminate
          @Description JWT refresh token to invalidate
        type: string
    required:
    - refreshToken
    type: object
  requests.MarkRecommendationAsViewedRequest:
    properties:
      recommendationId:
        example: 123
        type: integer
    required:
    - recommendationId
    type: object
  requests.MediaItemCreateRequest:
    properties:
      data:
        $ref: '#/definitions/requests.MediaItemData'
      type:
        type: string
    required:
    - data
    - type
    type: object
  requests.MediaItemData:
    properties:
      albumTitle:
        description: Album data
        type: string
      artistName:
        description: Artist data
        type: string
      collectionName:
        description: Collection data
        type: string
      episodeNumber:
        type: integer
      id:
        description: Base data
        type: integer
      releaseYear:
        type: integer
      seasonNumber:
        description: Episode data
        type: integer
      title:
        description: Movie data
        type: string
      titles:
        description: Series data
        items:
          type: string
        type: array
      trackNumber:
        description: Track data
        type: integer
    type: object
  requests.MediaItemUpdateRequest:
    properties:
      data:
        $ref: '#/definitions/requests.MediaItemData'
      type:
        type: string
    required:
    - data
    - type
    type: object
  requests.ProfileRequest:
    description: Request payload for updating user profile
    properties:
      avatar:
        description: |-
          Avatar is the path to the user's avatar image
          @Description Path to the user's avatar image
          @Example "/uploads/avatars/user_1.jpg"
        example: /uploads/avatars/user_1.jpg
        type: string
      email:
        description: |-
          Email is the new email address
          @Description Updated email address for the user
          @Example "newemail@example.com"
        example: newemail@example.com
        type: string
      username:
        description: |-
          Username is the new username
          @Description Updated username for the user
          @Example "newusername"
        example: newusername
        type: string
    type: object
  requests.RateRecommendationRequest:
    properties:
      rating:
        example: 4.5
        maximum: 5
        minimum: 0
        type: number
      recommendationId:
        example: 123
        type: integer
    required:
    - rating
    - recommendationId
    type: object
  requests.RefreshTokenRequest:
    description: Request payload for refreshing access tokens
    properties:
      refreshToken:
        description: |-
          RefreshToken is used to generate a new access token
          @Description JWT refresh token to use for generating new access token
        type: string
    required:
    - refreshToken
    type: object
  requests.RegisterRequest:
    description: Request payload for user registration
    properties:
      email:
        description: |-
          Email is the user's email address
          @Description User's email address
          @Example "user@example.com"
        example: user@example.com
        type: string
      password:
        description: |-
          Password is the user's chosen password
          @Description User's password (plain text in request)
        minLength: 8
        type: string
      username:
        description: |-
          Username is the user's desired username
          @Description User's chosen username
          @Example "johndoe"
        example: johndoe
        type: string
    required:
    - email
    - password
    - username
    type: object
  requests.RunMediaSyncJobRequest:
    properties:
      clientId:
        type: integer
      mediaType:
        type: string
    required:
    - clientId
    - mediaType
    type: object
  requests.SetupMediaSyncJobRequest:
    properties:
      clientId:
        type: integer
      clientType:
        type: string
      frequency:
        type: string
      mediaType:
        type: string
    required:
    - clientId
    - clientType
    - frequency
    - mediaType
    type: object
  requests.StartConversationRequest:
    description: Request to start a new AI-powered conversation for recommendations
    properties:
      clientId:
        description: Client ID to use for the conversation
        type: integer
      contentType:
        description: |-
          Type of content to discuss (movie, tv, music, etc)
          required: true
          example: movie
        type: string
      preferences:
        additionalProperties: {}
        description: |-
          Optional user preferences to initialize the conversation
          example: {"favoriteGenres": ["sci-fi", "thriller"], "recentlyWatched": ["Inception", "Tenet"]}
        type: object
      systemInstructions:
        description: |-
          Optional custom system instructions
          example: You are a helpful movie recommendation assistant
        type: string
    required:
    - contentType
    type: object
  requests.UpdateCreditRequest:
    description: Request payload for updating an existing credit
    properties:
      character:
        description: |-
          Character is the character's name (for acting roles)
          @Description Character's name (for acting roles)
          @Example "Forrest Gump"
        example: Forrest Gump
        type: string
      department:
        description: |-
          Department is the department the person worked in
          @Description Department the person worked in
          @Example "Acting"
        example: Acting
        type: string
      isArtist:
        description: |-
          IsArtist indicates if this is an artist credit
          @Description Indicates if this is an artist credit
          @Example false
        example: false
        type: boolean
      isCast:
        description: |-
          IsCast indicates if this is a cast credit
          @Description Indicates if this is a cast credit
          @Example true
        example: true
        type: boolean
      isCreator:
        description: |-
          IsCreator indicates if this is a creator credit
          @Description Indicates if this is a creator credit
          @Example false
        example: false
        type: boolean
      isCrew:
        description: |-
          IsCrew indicates if this is a crew credit
          @Description Indicates if this is a crew credit
          @Example false
        example: false
        type: boolean
      isGuest:
        description: |-
          IsGuest indicates if this is a guest credit
          @Description Indicates if this is a guest credit
          @Example false
        example: false
        type: boolean
      job:
        description: |-
          Job is the specific job the person had
          @Description Specific job the person had
          @Example "Lead Actor"
        example: Lead Actor
        type: string
      mediaItemId:
        description: |-
          MediaItemID is the ID of the media item
          @Description ID of the media item
          @Example 2
        example: 2
        type: integer
      name:
        description: |-
          Name is the person's name for this credit
          @Description Person's name for this credit
          @Example "Tom Hanks"
        example: Tom Hanks
        type: string
      order:
        description: |-
          Order is the order of importance (lower means more important)
          @Description Order of importance (lower means more important)
          @Example 1
        example: 1
        type: integer
      personId:
        description: |-
          PersonID is the ID of the person
          @Description ID of the person
          @Example 1
        example: 1
        type: integer
      role:
        description: |-
          Role is the person's role
          @Description Person's role
          @Example "Actor"
        example: Actor
        type: string
    type: object
  requests.UpdateJobScheduleRequest:
    properties:
      enabled:
        type: boolean
      frequency:
        type: string
      jobName:
        type: string
    required:
    - frequency
    - jobName
    type: object
  requests.UpdateMediaRequest:
    properties:
      metadataProfileID:
        description: For Lidarr
        type: integer
      monitored:
        type: boolean
      path:
        type: string
      qualityProfileID:
        type: integer
      tags:
        items:
          type: integer
        type: array
    type: object
  requests.UpdatePersonRequest:
    description: Request payload for updating an existing person
    properties:
      biography:
        description: |-
          Biography is the person's biography
          @Description Person's biography
          @Example "Thomas Jeffrey Hanks is an American actor and filmmaker..."
        example: Thomas Jeffrey Hanks is an American actor and filmmaker...
        type: string
      birthplace:
        description: |-
          Birthplace is the person's birthplace
          @Description Person's birthplace
          @Example "Concord, California, USA"
        example: Concord, California, USA
        type: string
      dateOfBirth:
        description: |-
          DateOfBirth is the person's date of birth
          @Description Person's date of birth in RFC3339 format
          @Example "1956-07-09T00:00:00Z"
        example: "1956-07-09T00:00:00Z"
        type: string
      dateOfDeath:
        description: |-
          DateOfDeath is the person's date of death (if applicable)
          @Description Person's date of death in RFC3339 format (if applicable)
          @Example "2056-07-09T00:00:00Z"
        example: "2056-07-09T00:00:00Z"
        type: string
      externalIds:
        description: |-
          ExternalIDs contains IDs from external services
          @Description IDs from external services
        items:
          $ref: '#/definitions/requests.ExternalIDRequest'
        type: array
      gender:
        description: |-
          Gender is the person's gender
          @Description Person's gender
          @Example "Male"
        example: Male
        type: string
      knownFor:
        description: |-
          KnownFor is what the person is primarily known for
          @Description What the person is primarily known for
          @Example "Actor"
        example: Actor
        type: string
      name:
        description: |-
          Name is the person's name
          @Description Person's name
          @Example "Tom Hanks"
        example: Tom Hanks
        type: string
      photo:
        description: |-
          Photo is the URL or path to the person's photo
          @Description URL or path to the person's photo
          @Example "https://example.com/photos/tom-hanks.jpg"
        example: https://example.com/photos/tom-hanks.jpg
        type: string
    type: object
  requests.UpdateRecommendationViewedRequest:
    properties:
      viewed:
        type: boolean
    type: object
  requests.UserMediaItemDataRequest:
    description: Request payload for recording a new play history entry
    properties:
      completed:
        type: boolean
      continued:
        description: If this is a continuation of a previous play
        type: boolean
      durationSeconds:
        type: integer
      isFavorite:
        type: boolean
      mediaItemId:
        type: integer
      playedPercentage:
        type: number
      positionSeconds:
        type: integer
      type:
        $ref: '#/definitions/types.MediaType'
      userId:
        type: integer
      userRating:
        type: number
    required:
    - mediaItemId
    - type
    - userId
    type: object
  requests.UserMediaItemDataSyncRequest:
    description: Request payload for synchronizing media item data
    properties:
      completed:
        type: boolean
      continued:
        description: If this is a continuation of a previous play
        type: boolean
      durationSeconds:
        type: integer
      isFavorite:
        type: boolean
      mediaItemId:
        type: integer
      playedPercentage:
        type: number
      positionSeconds:
        type: integer
      type:
        $ref: '#/definitions/types.MediaType'
      userId:
        type: integer
      userRating:
        type: number
    required:
    - mediaItemId
    - type
    - userId
    type: object
  requests.UserMediaItemDataUpdateRequest:
    properties:
      completed:
        type: boolean
      continued:
        description: If this is a continuation of a previous play
        type: boolean
      durationSeconds:
        type: integer
      isFavorite:
        type: boolean
      mediaItemId:
        type: integer
      playedPercentage:
        type: number
      positionSeconds:
        type: integer
      type:
        $ref: '#/definitions/types.MediaType'
      userId:
        type: integer
      userRating:
        type: number
    required:
    - mediaItemId
    - type
    - userId
    type: object
  responses.APIResponse-any:
    properties:
      data: {}
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_Client-types_ClientConfig:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Client-types_ClientConfig'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_JobRun:
    properties:
      data:
        items:
          $ref: '#/definitions/models.JobRun'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_JobSchedule:
    properties:
      data:
        items:
          $ref: '#/definitions/models.JobSchedule'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-any:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-any'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-suasor_clients_media_types_Movie'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Album:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Album'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Artist:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Artist'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Episode:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Episode'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Playlist:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Playlist'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Series:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Series'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Track:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Track'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaSyncJob:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaSyncJob'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_Recommendation:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Recommendation'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_UserMediaItemData-suasor_clients_media_types_Movie:
    properties:
      data:
        items:
          $ref: '#/definitions/models.UserMediaItemData-suasor_clients_media_types_Movie'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_responses_MediaItemResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/responses.MediaItemResponse'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_types_Episode:
    properties:
      data:
        items:
          $ref: '#/definitions/types.Episode'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_types_Season:
    properties:
      data:
        items:
          $ref: '#/definitions/types.Season'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_types_Series:
    properties:
      data:
        items:
          $ref: '#/definitions/types.Series'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_types_Track:
    properties:
      data:
        items:
          $ref: '#/definitions/types.Track'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-bool:
    properties:
      data:
        type: boolean
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-map_string_array_models_MediaItem-any:
    properties:
      data:
        $ref: '#/definitions/map_string_array_models.MediaItem-any'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_Client-types_ClientConfig:
    properties:
      data:
        $ref: '#/definitions/models.Client-types_ClientConfig'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_JobRun:
    properties:
      data:
        $ref: '#/definitions/models.JobRun'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_JobSchedule:
    properties:
      data:
        $ref: '#/definitions/models.JobSchedule'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-any:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-any'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-suasor_clients_media_types_Movie'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_Album:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_Album'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_Artist:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_Artist'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_MediaData:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_MediaData'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_Playlist:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_Playlist'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_Series:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_Series'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_Track:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_Track'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItemList:
    properties:
      data:
        $ref: '#/definitions/models.MediaItemList'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_UserConfig:
    properties:
      data:
        $ref: '#/definitions/models.UserConfig'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie:
    properties:
      data:
        $ref: '#/definitions/models.UserMediaItemData-suasor_clients_media_types_Movie'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-requests_AvatarUploadResponse:
    properties:
      data:
        $ref: '#/definitions/requests.AvatarUploadResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_AiContentAnalysisResponse:
    properties:
      data:
        $ref: '#/definitions/responses.AiContentAnalysisResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_AiRecommendationResponse:
    properties:
      data:
        $ref: '#/definitions/responses.AiRecommendationResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_AuthDataResponse:
    properties:
      data:
        $ref: '#/definitions/responses.AuthDataResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_ConversationMessageResponse:
    properties:
      data:
        $ref: '#/definitions/responses.ConversationMessageResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_ConversationResponse:
    properties:
      data:
        $ref: '#/definitions/responses.ConversationResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_EmptyResponse:
    properties:
      data:
        $ref: '#/definitions/responses.EmptyResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_MediaItemResponse:
    properties:
      data:
        $ref: '#/definitions/responses.MediaItemResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_RecommendationResponse:
    properties:
      data:
        $ref: '#/definitions/responses.RecommendationResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_RecommendationsListResponse:
    properties:
      data:
        $ref: '#/definitions/responses.RecommendationsListResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_TestConnectionResponse:
    properties:
      data:
        $ref: '#/definitions/responses.TestConnectionResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_UserResponse:
    properties:
      data:
        $ref: '#/definitions/responses.UserResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-string:
    properties:
      data:
        type: string
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-types_Configuration:
    properties:
      data:
        $ref: '#/definitions/types.Configuration'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.AiContentAnalysisResponse:
    description: Response containing AI-powered content analysis
    properties:
      analysis:
        additionalProperties: true
        description: Analysis results
        type: object
    type: object
  responses.AiRecommendationResponse:
    description: Response containing AI-powered content recommendations
    properties:
      items:
        description: List of recommended items
        items:
          additionalProperties: true
          type: object
        type: array
    type: object
  responses.AuthDataResponse:
    description: Authentication data returned to client after successful authentication
    properties:
      accessToken:
        description: |-
          AccessToken is the JWT token for API access
          @Description JWT access token for authenticated requests
          @Example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type: string
      expiresAt:
        description: |-
          ExpiresAt indicates when the access token expires
          @Description UNIX timestamp when the access token expires
          @Example 1674140400
        type: integer
      refreshToken:
        description: |-
          RefreshToken is used to get new access tokens
          @Description JWT refresh token for obtaining new access tokens
          @Example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type: string
      user:
        allOf:
        - $ref: '#/definitions/responses.UserResponse'
        description: |-
          User contains the user profile information
          @Description User profile data
    type: object
  responses.BasicErrorResponse:
    properties:
      details:
        $ref: '#/definitions/responses.ErrorDetails'
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      statusCode:
        example: 201
        type: integer
      timestamp:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/errors.ErrorType'
        example: FAILED_CHECK
    type: object
  responses.ClientResponse:
    properties:
      client:
        description: Can be any of the config types
      clientType:
        allOf:
        - $ref: '#/definitions/types.ClientType'
        example: plex
      createdAt:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      isEnabled:
        type: boolean
      name:
        example: My Plex Server
        type: string
      updatedAt:
        example: "2023-01-01T12:00:00Z"
        type: string
      userId:
        example: 123
        type: integer
    type: object
  responses.ClientsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/responses.ClientResponse'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.ConversationMessageResponse:
    description: Response to a message in an AI conversation
    properties:
      context:
        additionalProperties: true
        description: |-
          Additional message context
          example: {"sentiment": "positive", "topicShift": false}
        type: object
      message:
        description: |-
          The AI's response to the user message
          example: "Based on your interest in Interstellar, I'd recommend checking out these sci-fi movies with similar themes of space exploration and time: 1. Arrival (2016), 2. The Martian (2015), 3. Ad Astra (2019). Would you like more recommendations or details about any of these?"
        type: string
      recommendations:
        description: |-
          Recommendations included in the response, if any
          example: [{"title": "Arrival", "year": 2016, "genre": "Sci-Fi"}, {"title": "The Martian", "year": 2015, "genre": "Sci-Fi"}]
        items:
          additionalProperties: true
          type: object
        type: array
    type: object
  responses.ConversationResponse:
    description: Response containing conversation details
    properties:
      context:
        additionalProperties: true
        description: |-
          Additional information about the conversation context
          example: {"contentType": "movie", "session": "active"}
        type: object
      conversationId:
        description: |-
          Unique ID for the conversation
          example: conv-123-abcdef
        type: string
      welcome:
        description: |-
          Initial greeting or message from the AI
          example: "Hi there! I'm your movie recommendation assistant. What kind of movies do you enjoy watching?"
        type: string
    type: object
  responses.EmptyAPIResponse:
    properties:
      data: {}
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.EmptyResponse:
    properties:
      success:
        type: boolean
    type: object
  responses.ErrorDetails:
    properties:
      error:
        type: string
      metadata:
        additionalProperties: true
        type: object
      stackInfo:
        type: string
    type: object
  responses.ErrorResponse-any:
    properties:
      details: {}
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      statusCode:
        example: 201
        type: integer
      timestamp:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/errors.ErrorType'
        example: FAILED_CHECK
    type: object
  responses.ErrorResponse-error:
    properties:
      details: {}
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      statusCode:
        example: 201
        type: integer
      timestamp:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/errors.ErrorType'
        example: FAILED_CHECK
    type: object
  responses.ErrorResponse-responses_ErrorDetails:
    properties:
      details:
        $ref: '#/definitions/responses.ErrorDetails'
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      statusCode:
        example: 201
        type: integer
      timestamp:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/errors.ErrorType'
        example: FAILED_CHECK
    type: object
  responses.HealthResponse:
    properties:
      application:
        example: true
        type: boolean
      database:
        example: true
        type: boolean
      status:
        description: Overall status of the system
        enum:
        - up
        - down
        - degraded
        example: up
        type: string
    required:
    - application
    - database
    - status
    type: object
  responses.MediaItemResponse:
    properties:
      clientId:
        type: integer
      clientType:
        type: string
      createdAt:
        type: string
      data: {}
      externalId:
        type: string
      id:
        type: integer
      type:
        $ref: '#/definitions/types.MediaType'
      updatedAt:
        type: string
    type: object
  responses.RecentSearchHistoryItem:
    properties:
      id:
        type: integer
      query:
        type: string
      resultCount:
        type: integer
      searchedAt:
        type: string
    type: object
  responses.RecentSearchesResponse:
    properties:
      searches:
        items:
          $ref: '#/definitions/responses.RecentSearchHistoryItem'
        type: array
      success:
        type: boolean
    type: object
  responses.RecommendationResponse:
    properties:
      aiModel:
        type: string
      createdAt:
        type: string
      externalIds:
        additionalProperties:
          type: string
        type: object
      genres:
        items:
          type: string
        type: array
      id:
        type: integer
      isViewed:
        type: boolean
      matchesActors:
        items:
          type: string
        type: array
      matchesDirectors:
        items:
          type: string
        type: array
      matchesGenres:
        items:
          type: string
        type: array
      mediaType:
        $ref: '#/definitions/types.MediaType'
      reasoning:
        type: string
      recommendedBy:
        type: string
      score:
        type: number
      similarItems:
        items:
          type: string
        type: array
      title:
        type: string
      userRating:
        type: number
      year:
        type: integer
    type: object
  responses.RecommendationsListResponse:
    properties:
      limit:
        type: integer
      mediaType:
        type: string
      offset:
        type: integer
      recommendations:
        items:
          $ref: '#/definitions/responses.RecommendationResponse'
        type: array
      total:
        type: integer
    type: object
  responses.SearchResponse:
    properties:
      results:
        $ref: '#/definitions/responses.SearchResults'
      success:
        type: boolean
    type: object
  responses.SearchResults:
    properties:
      albums:
        items:
          properties:
            createdAt:
              type: string
            data:
              allOf:
              - $ref: '#/definitions/types.Album'
              description: Type-specific media data
            deletedAt:
              type: string
            downloadUrl:
              type: string
            externalIds:
              description: External IDs for this item (TMDB, IMDB, etc.)
              items:
                $ref: '#/definitions/models.ExternalID'
              type: array
            id:
              description: Internal ID
              type: integer
            ownerId:
              description: ID of the user that owns this item, 0 for system owned
                items
              type: integer
            releaseDate:
              type: string
            releaseYear:
              type: integer
            streamUrl:
              type: string
            syncClients:
              description: Client IDs for this item (mapping client to their IDs)
              items:
                $ref: '#/definitions/models.SyncClient'
              type: array
            title:
              type: string
            type:
              allOf:
              - $ref: '#/definitions/types.MediaType'
              description: Type of media (movie, show, episode, etc.)
            updatedAt:
              type: string
            uuid:
              description: Stable UUID for syncing
              type: string
          type: object
        type: array
      artists:
        items:
          properties:
            createdAt:
              type: string
            data:
              allOf:
              - $ref: '#/definitions/types.Artist'
              description: Type-specific media data
            deletedAt:
              type: string
            downloadUrl:
              type: string
            externalIds:
              description: External IDs for this item (TMDB, IMDB, etc.)
              items:
                $ref: '#/definitions/models.ExternalID'
              type: array
            id:
              description: Internal ID
              type: integer
            ownerId:
              description: ID of the user that owns this item, 0 for system owned
                items
              type: integer
            releaseDate:
              type: string
            releaseYear:
              type: integer
            streamUrl:
              type: string
            syncClients:
              description: Client IDs for this item (mapping client to their IDs)
              items:
                $ref: '#/definitions/models.SyncClient'
              type: array
            title:
              type: string
            type:
              allOf:
              - $ref: '#/definitions/types.MediaType'
              description: Type of media (movie, show, episode, etc.)
            updatedAt:
              type: string
            uuid:
              description: Stable UUID for syncing
              type: string
          type: object
        type: array
      collections:
        items:
          properties:
            createdAt:
              type: string
            data:
              allOf:
              - $ref: '#/definitions/suasor_clients_media_types.Collection'
              description: Type-specific media data
            deletedAt:
              type: string
            downloadUrl:
              type: string
            externalIds:
              description: External IDs for this item (TMDB, IMDB, etc.)
              items:
                $ref: '#/definitions/models.ExternalID'
              type: array
            id:
              description: Internal ID
              type: integer
            ownerId:
              description: ID of the user that owns this item, 0 for system owned
                items
              type: integer
            releaseDate:
              type: string
            releaseYear:
              type: integer
            streamUrl:
              type: string
            syncClients:
              description: Client IDs for this item (mapping client to their IDs)
              items:
                $ref: '#/definitions/models.SyncClient'
              type: array
            title:
              type: string
            type:
              allOf:
              - $ref: '#/definitions/types.MediaType'
              description: Type of media (movie, show, episode, etc.)
            updatedAt:
              type: string
            uuid:
              description: Stable UUID for syncing
              type: string
          type: object
        type: array
      episodes:
        items:
          properties:
            createdAt:
              type: string
            data:
              allOf:
              - $ref: '#/definitions/types.Episode'
              description: Type-specific media data
            deletedAt:
              type: string
            downloadUrl:
              type: string
            externalIds:
              description: External IDs for this item (TMDB, IMDB, etc.)
              items:
                $ref: '#/definitions/models.ExternalID'
              type: array
            id:
              description: Internal ID
              type: integer
            ownerId:
              description: ID of the user that owns this item, 0 for system owned
                items
              type: integer
            releaseDate:
              type: string
            releaseYear:
              type: integer
            streamUrl:
              type: string
            syncClients:
              description: Client IDs for this item (mapping client to their IDs)
              items:
                $ref: '#/definitions/models.SyncClient'
              type: array
            title:
              type: string
            type:
              allOf:
              - $ref: '#/definitions/types.MediaType'
              description: Type of media (movie, show, episode, etc.)
            updatedAt:
              type: string
            uuid:
              description: Stable UUID for syncing
              type: string
          type: object
        type: array
      movies:
        items:
          properties:
            createdAt:
              type: string
            data:
              allOf:
              - $ref: '#/definitions/suasor_clients_media_types.Movie'
              description: Type-specific media data
            deletedAt:
              type: string
            downloadUrl:
              type: string
            externalIds:
              description: External IDs for this item (TMDB, IMDB, etc.)
              items:
                $ref: '#/definitions/models.ExternalID'
              type: array
            id:
              description: Internal ID
              type: integer
            ownerId:
              description: ID of the user that owns this item, 0 for system owned
                items
              type: integer
            releaseDate:
              type: string
            releaseYear:
              type: integer
            streamUrl:
              type: string
            syncClients:
              description: Client IDs for this item (mapping client to their IDs)
              items:
                $ref: '#/definitions/models.SyncClient'
              type: array
            title:
              type: string
            type:
              allOf:
              - $ref: '#/definitions/types.MediaType'
              description: Type of media (movie, show, episode, etc.)
            updatedAt:
              type: string
            uuid:
              description: Stable UUID for syncing
              type: string
          type: object
        type: array
      people:
        items:
          $ref: '#/definitions/models.Person'
        type: array
      playlists:
        items:
          properties:
            createdAt:
              type: string
            data:
              allOf:
              - $ref: '#/definitions/types.Playlist'
              description: Type-specific media data
            deletedAt:
              type: string
            downloadUrl:
              type: string
            externalIds:
              description: External IDs for this item (TMDB, IMDB, etc.)
              items:
                $ref: '#/definitions/models.ExternalID'
              type: array
            id:
              description: Internal ID
              type: integer
            ownerId:
              description: ID of the user that owns this item, 0 for system owned
                items
              type: integer
            releaseDate:
              type: string
            releaseYear:
              type: integer
            streamUrl:
              type: string
            syncClients:
              description: Client IDs for this item (mapping client to their IDs)
              items:
                $ref: '#/definitions/models.SyncClient'
              type: array
            title:
              type: string
            type:
              allOf:
              - $ref: '#/definitions/types.MediaType'
              description: Type of media (movie, show, episode, etc.)
            updatedAt:
              type: string
            uuid:
              description: Stable UUID for syncing
              type: string
          type: object
        type: array
      series:
        items:
          properties:
            createdAt:
              type: string
            data:
              allOf:
              - $ref: '#/definitions/types.Series'
              description: Type-specific media data
            deletedAt:
              type: string
            downloadUrl:
              type: string
            externalIds:
              description: External IDs for this item (TMDB, IMDB, etc.)
              items:
                $ref: '#/definitions/models.ExternalID'
              type: array
            id:
              description: Internal ID
              type: integer
            ownerId:
              description: ID of the user that owns this item, 0 for system owned
                items
              type: integer
            releaseDate:
              type: string
            releaseYear:
              type: integer
            streamUrl:
              type: string
            syncClients:
              description: Client IDs for this item (mapping client to their IDs)
              items:
                $ref: '#/definitions/models.SyncClient'
              type: array
            title:
              type: string
            type:
              allOf:
              - $ref: '#/definitions/types.MediaType'
              description: Type of media (movie, show, episode, etc.)
            updatedAt:
              type: string
            uuid:
              description: Stable UUID for syncing
              type: string
          type: object
        type: array
      totalCount:
        type: integer
      tracks:
        items:
          properties:
            createdAt:
              type: string
            data:
              allOf:
              - $ref: '#/definitions/types.Track'
              description: Type-specific media data
            deletedAt:
              type: string
            downloadUrl:
              type: string
            externalIds:
              description: External IDs for this item (TMDB, IMDB, etc.)
              items:
                $ref: '#/definitions/models.ExternalID'
              type: array
            id:
              description: Internal ID
              type: integer
            ownerId:
              description: ID of the user that owns this item, 0 for system owned
                items
              type: integer
            releaseDate:
              type: string
            releaseYear:
              type: integer
            streamUrl:
              type: string
            syncClients:
              description: Client IDs for this item (mapping client to their IDs)
              items:
                $ref: '#/definitions/models.SyncClient'
              type: array
            title:
              type: string
            type:
              allOf:
              - $ref: '#/definitions/types.MediaType'
              description: Type of media (movie, show, episode, etc.)
            updatedAt:
              type: string
            uuid:
              description: Stable UUID for syncing
              type: string
          type: object
        type: array
    type: object
  responses.SearchSuggestionsResponse:
    properties:
      success:
        type: boolean
      suggestions:
        items:
          type: string
        type: array
    type: object
  responses.TestConnectionResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
      version:
        type: string
    type: object
  responses.TrendingSearchItem:
    properties:
      query:
        type: string
      searchCount:
        type: integer
    type: object
  responses.TrendingSearchesResponse:
    properties:
      searches:
        items:
          $ref: '#/definitions/responses.TrendingSearchItem'
        type: array
      success:
        type: boolean
    type: object
  responses.UserResponse:
    description: User information returned in API responses
    properties:
      avatar:
        description: |-
          Avatar is the path to the user's avatar image
          @Description Path to the user's avatar image
          @Example "/uploads/avatars/user_1.jpg"
        example: /uploads/avatars/user_1.jpg
        type: string
      email:
        description: |-
          Email is the unique email address of the user
          @Description User's email address
          @Example "user@example.com"
        type: string
      id:
        description: |-
          ID is the unique identifier for the user
          @Description User's unique identifier
          @Example 1
        type: integer
      role:
        description: |-
          Role defines the user's permission level
          @Description User's role in the system
          @Enum "user" "admin"
          @Example "user"
        type: string
      username:
        description: |-
          Username is the display name chosen by the user
          @Description User's chosen username
          @Example "johndoe"
        type: string
    type: object
  suasor_clients_media_types.Collection:
    properties:
      autoUpdateTime:
        type: string
      details:
        $ref: '#/definitions/types.MediaDetails'
      isPublic:
        type: boolean
      isSmart:
        description: Smart lists
        type: boolean
      itemCount:
        type: integer
      items:
        items:
          $ref: '#/definitions/types.ListItem'
        type: array
      lastModified:
        description: Track when and which client last modified this playlist
        type: string
      lastSynced:
        type: string
      modifiedBy:
        description: client ID
        type: integer
      owner:
        type: integer
      sharedWith:
        description: ListCollaboratorIDs
        items:
          type: integer
        type: array
      smartCriteria:
        additionalProperties: {}
        type: object
      syncClientStates:
        items:
          $ref: '#/definitions/types.SyncClientState'
        type: array
    type: object
  suasor_clients_media_types.ExternalID:
    properties:
      id:
        description: The actual ID
        type: string
      source:
        description: e.g., "tmdb", "imdb", "trakt", "tvdb"
        type: string
    type: object
  suasor_clients_media_types.Movie:
    properties:
      audioCodec:
        type: string
      credits:
        items:
          $ref: '#/definitions/suasor_clients_media_types.Person'
        type: array
      details:
        $ref: '#/definitions/types.MediaDetails'
      resolution:
        description: e.g., "4K", "1080p"
        type: string
      subtitleUrls:
        items:
          type: string
        type: array
      trailerUrl:
        type: string
      videoCodec:
        type: string
    type: object
  suasor_clients_media_types.Person:
    properties:
      character:
        description: For actors
        type: string
      isArtist:
        type: boolean
      isCast:
        type: boolean
      isCreator:
        type: boolean
      isCrew:
        type: boolean
      isGuest:
        type: boolean
      name:
        type: string
      photo:
        type: string
      role:
        description: e.g., "Director", "Actor"
        type: string
    type: object
  suasor_clients_media_types.Rating:
    properties:
      source:
        description: e.g., "tmdb", "imdb", "trakt", "tvdb"
        type: string
      value:
        description: The actual ID
        type: number
      votes:
        description: For sources that might have how many people voted on an item
        type: integer
    type: object
  types.AIClientType:
    enum:
    - claude
    - openai
    - ollama
    - unknown
    type: string
    x-enum-varnames:
    - AIClientTypeClaude
    - AIClientTypeOpenAI
    - AIClientTypeOllama
    - AIClientTypeUnknown
  types.Album:
    properties:
      artistID:
        type: integer
      artistName:
        type: string
      credits:
        items:
          $ref: '#/definitions/suasor_clients_media_types.Person'
        type: array
      details:
        $ref: '#/definitions/types.MediaDetails'
      syncArtist:
        items:
          $ref: '#/definitions/types.SyncClient'
        type: array
      trackCount:
        type: integer
      trackIDs:
        items:
          type: integer
        type: array
      tracks:
        items:
          $ref: '#/definitions/types.Track'
        type: array
    type: object
  types.Artist:
    properties:
      albumCount:
        type: integer
      albumIDs:
        items:
          type: integer
        type: array
      albums:
        items:
          $ref: '#/definitions/types.Album'
        type: array
      biography:
        type: string
      details:
        $ref: '#/definitions/types.MediaDetails'
      similarArtists:
        items:
          $ref: '#/definitions/types.ArtistReference'
        type: array
    type: object
  types.ArtistReference:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  types.Artwork:
    properties:
      background:
        type: string
      banner:
        type: string
      logo:
        type: string
      poster:
        type: string
      thumbnail:
        type: string
    type: object
  types.AutomationClientType:
    enum:
    - radarr
    - sonarr
    - lidarr
    - unknown
    type: string
    x-enum-varnames:
    - AutomationClientTypeRadarr
    - AutomationClientTypeSonarr
    - AutomationClientTypeLidarr
    - AutomationClientTypeUnknown
  types.ChangeRecord:
    properties:
      changeType:
        description: '"add", "remove", "update", "reorder", "sync"'
        type: string
      clientId:
        description: 0 = internal client
        type: integer
      itemId:
        type: string
      timestamp:
        type: string
    type: object
  types.ClaudeConfig:
    description: Claude media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AIClientType'
      enabled:
        example: true
        type: boolean
      maxContextTokens:
        example: 1000
        type: integer
      maxTokens:
        example: 100
        type: integer
      model:
        example: claude-2
        type: string
      name:
        example: My Client
        type: string
      temperature:
        example: 0.5
        type: number
      type:
        $ref: '#/definitions/types.ClientType'
      validateConn:
        example: true
        type: boolean
    type: object
  types.ClientCategory:
    enum:
    - automation
    - media
    - ai
    - metadata
    - unknown
    type: string
    x-enum-varnames:
    - ClientCategoryAutomation
    - ClientCategoryMedia
    - ClientCategoryAI
    - ClientCategoryMetadata
    - ClientCategoryUnknown
  types.ClientMediaType:
    enum:
    - plex
    - jellyfin
    - emby
    - subsonic
    - unknown
    type: string
    x-enum-varnames:
    - ClientMediaTypePlex
    - ClientMediaTypeJellyfin
    - ClientMediaTypeEmby
    - ClientMediaTypeSubsonic
    - ClientMediaTypeUnknown
  types.ClientType:
    enum:
    - emby
    - jellyfin
    - plex
    - subsonic
    - radarr
    - sonarr
    - lidarr
    - unknown
    - claude
    - openai
    - ollama
    - tmdb
    - trakt
    type: string
    x-enum-varnames:
    - ClientTypeEmby
    - ClientTypeJellyfin
    - ClientTypePlex
    - ClientTypeSubsonic
    - ClientTypeRadarr
    - ClientTypeSonarr
    - ClientTypeLidarr
    - ClientTypeUnknown
    - ClientTypeClaude
    - ClientTypeOpenAI
    - ClientTypeOllama
    - ClientTypeTMDB
    - ClientTypeTrakt
  types.Configuration:
    description: Complete application configuration settings
    properties:
      app:
        description: App contains core application settings
        properties:
          apiBaseURL:
            example: http://localhost:8080
            type: string
          appURL:
            example: http://localhost:3000
            type: string
          avatarPath:
            example: ./uploads/avatars
            type: string
          environment:
            enum:
            - development
            - staging
            - production
            example: development
            type: string
          logLevel:
            enum:
            - debug
            - info
            - warn
            - error
            example: info
            type: string
          maxAvatarSize:
            example: 5242880
            minimum: 1
            type: integer
          maxPageSize:
            example: 100
            maximum: 1000
            minimum: 1
            type: integer
          name:
            example: suasor
            type: string
        required:
        - apiBaseURL
        - appURL
        - avatarPath
        - environment
        - logLevel
        - maxAvatarSize
        - maxPageSize
        - name
        type: object
      auth:
        description: Auth contains authentication settings
        properties:
          accessExpiryMinutes:
            description: New fields to add
            example: 15
            minimum: 1
            type: integer
          allowedOrigins:
            example:
            - http://localhost:3000
            items:
              type: string
            type: array
          enable2FA:
            example: false
            type: boolean
          enableLocal:
            example: true
            type: boolean
          jwtSecret:
            example: your-secret-key
            type: string
          refreshExpiryDays:
            example: 7
            minimum: 1
            type: integer
          sessionTimeout:
            example: 60
            minimum: 1
            type: integer
          tokenAudience:
            example: suasor-client
            type: string
          tokenExpiration:
            example: 24
            minimum: 1
            type: integer
          tokenIssuer:
            example: suasor-api
            type: string
        required:
        - accessExpiryMinutes
        - jwtSecret
        - refreshExpiryDays
        - sessionTimeout
        - tokenAudience
        - tokenExpiration
        - tokenIssuer
        type: object
      db:
        description: Database contains database connection settings
        properties:
          host:
            example: localhost
            type: string
          maxConns:
            example: 20
            minimum: 1
            type: integer
          name:
            example: suasor
            type: string
          password:
            example: yourpassword
            type: string
          port:
            example: "5432"
            type: string
          timeout:
            example: 30
            minimum: 1
            type: integer
          user:
            example: postgres_user
            type: string
        required:
        - host
        - maxConns
        - name
        - password
        - port
        - timeout
        - user
        type: object
      http:
        description: HTTP contains HTTP server configuration
        properties:
          baseURL:
            example: http://localhost:8080
            type: string
          enableSSL:
            example: false
            type: boolean
          idleTimeout:
            example: 60
            minimum: 1
            type: integer
          port:
            example: "8080"
            type: string
          proxyEnabled:
            example: false
            type: boolean
          proxyURL:
            example: http://proxy:8080
            type: string
          rateLimitEnabled:
            example: true
            type: boolean
          readTimeout:
            example: 30
            minimum: 1
            type: integer
          requestsPerMin:
            example: 100
            minimum: 0
            type: integer
          sslCert:
            example: /path/to/cert.pem
            type: string
          sslKey:
            example: /path/to/key.pem
            type: string
          writeTimeout:
            example: 30
            minimum: 1
            type: integer
        required:
        - idleTimeout
        - port
        - readTimeout
        - writeTimeout
        type: object
    type: object
  types.EmbyConfig:
    description: Emby media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.ClientMediaType'
      enabled:
        example: true
        type: boolean
      name:
        example: My Client
        type: string
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
      userID:
        example: your-internal-user-id
        type: string
      username:
        example: admin
        type: string
      validateConn:
        example: true
        type: boolean
    type: object
  types.Episode:
    properties:
      credits:
        items:
          $ref: '#/definitions/suasor_clients_media_types.Person'
        type: array
      details:
        $ref: '#/definitions/types.MediaDetails'
      number:
        type: integer
      seasonID:
        type: integer
      seasonNumber:
        type: integer
      showID:
        type: integer
      showTitle:
        type: string
      syncSeason:
        items:
          $ref: '#/definitions/types.SyncClient'
        type: array
      syncSeries:
        items:
          $ref: '#/definitions/types.SyncClient'
        type: array
    type: object
  types.JellyfinConfig:
    description: Jellyfin media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.ClientMediaType'
      enabled:
        example: true
        type: boolean
      name:
        example: My Client
        type: string
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
      userID:
        example: your-internal-user-id
        type: string
      username:
        example: admin
        type: string
      validateConn:
        example: true
        type: boolean
    type: object
  types.LidarrConfig:
    description: Jellyfin media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AutomationClientType'
      enabled:
        example: true
        type: boolean
      name:
        example: My Client
        type: string
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
      validateConn:
        example: true
        type: boolean
    type: object
  types.ListItem:
    properties:
      changeHistory:
        items:
          $ref: '#/definitions/types.ChangeRecord'
        type: array
      itemId:
        type: integer
      lastChanged:
        type: string
      position:
        type: integer
      type:
        $ref: '#/definitions/types.MediaType'
    type: object
  types.ListType:
    enum:
    - playlist
    - collection
    type: string
    x-enum-varnames:
    - ListTypePlaylist
    - ListTypeCollection
  types.MediaDetails:
    properties:
      addedAt:
        type: string
      artwork:
        $ref: '#/definitions/types.Artwork'
      contentRating:
        type: string
      description:
        type: string
      durationSeconds:
        description: Changed from time.Duration to int64 for Swagger compatibility
        type: integer
      externalIDs:
        items:
          $ref: '#/definitions/suasor_clients_media_types.ExternalID'
        type: array
      genres:
        items:
          type: string
        type: array
      isFavorite:
        type: boolean
      language:
        type: string
      ratings:
        items:
          $ref: '#/definitions/suasor_clients_media_types.Rating'
        type: array
      releaseDate:
        type: string
      releaseYear:
        type: integer
      studios:
        items:
          type: string
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updatedAt:
        type: string
      userRating:
        type: number
    type: object
  types.MediaType:
    enum:
    - movie
    - series
    - season
    - episode
    - artist
    - album
    - track
    - playlist
    - collection
    - all
    - unknown
    type: string
    x-enum-varnames:
    - MediaTypeMovie
    - MediaTypeSeries
    - MediaTypeSeason
    - MediaTypeEpisode
    - MediaTypeArtist
    - MediaTypeAlbum
    - MediaTypeTrack
    - MediaTypePlaylist
    - MediaTypeCollection
    - MediaTypeAll
    - MediaTypeUnknown
  types.OllamaConfig:
    description: Claude media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AIClientType'
      enabled:
        example: true
        type: boolean
      maxContextTokens:
        example: 1000
        type: integer
      maxTokens:
        example: 100
        type: integer
      model:
        example: claude-2
        type: string
      name:
        example: My Client
        type: string
      temperature:
        example: 0.5
        type: number
      type:
        $ref: '#/definitions/types.ClientType'
      validateConn:
        example: true
        type: boolean
    type: object
  types.OpenAIConfig:
    description: Claude media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AIClientType'
      enabled:
        example: true
        type: boolean
      maxContextTokens:
        example: 1000
        type: integer
      maxTokens:
        example: 100
        type: integer
      model:
        example: claude-2
        type: string
      name:
        example: My Client
        type: string
      temperature:
        example: 0.5
        type: number
      type:
        $ref: '#/definitions/types.ClientType'
      validateConn:
        example: true
        type: boolean
    type: object
  types.Playlist:
    properties:
      autoUpdateTime:
        type: string
      details:
        $ref: '#/definitions/types.MediaDetails'
      isPublic:
        type: boolean
      isSmart:
        description: Smart lists
        type: boolean
      itemCount:
        type: integer
      items:
        items:
          $ref: '#/definitions/types.ListItem'
        type: array
      lastModified:
        description: Track when and which client last modified this playlist
        type: string
      lastSynced:
        type: string
      modifiedBy:
        description: client ID
        type: integer
      owner:
        type: integer
      sharedWith:
        description: ListCollaboratorIDs
        items:
          type: integer
        type: array
      smartCriteria:
        additionalProperties: {}
        type: object
      syncClientStates:
        items:
          $ref: '#/definitions/types.SyncClientState'
        type: array
    type: object
  types.PlexConfig:
    description: Plex media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.ClientMediaType'
      enabled:
        example: true
        type: boolean
      name:
        example: My Client
        type: string
      ssl:
        example: false
        type: boolean
      token:
        example: your-plex-token
        type: string
      type:
        $ref: '#/definitions/types.ClientType'
      validateConn:
        example: true
        type: boolean
    type: object
  types.RadarrConfig:
    description: Emby media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AutomationClientType'
      enabled:
        example: true
        type: boolean
      name:
        example: My Client
        type: string
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
      validateConn:
        example: true
        type: boolean
    type: object
  types.Season:
    properties:
      artwork:
        $ref: '#/definitions/types.Artwork'
      credits:
        items:
          $ref: '#/definitions/suasor_clients_media_types.Person'
        type: array
      details:
        $ref: '#/definitions/types.MediaDetails'
      episodeCount:
        type: integer
      episodeIDs:
        items:
          type: integer
        type: array
      episodes:
        items:
          $ref: '#/definitions/types.Episode'
        type: array
      overview:
        type: string
      releaseDate:
        type: string
      seasonNumber:
        type: integer
      seriesID:
        type: integer
      seriesName:
        type: string
      syncSeries:
        items:
          $ref: '#/definitions/types.SyncClient'
        type: array
      title:
        type: string
    type: object
  types.Series:
    properties:
      contentRating:
        type: string
      credits:
        items:
          $ref: '#/definitions/suasor_clients_media_types.Person'
        type: array
      details:
        $ref: '#/definitions/types.MediaDetails'
      episodeCount:
        type: integer
      genres:
        items:
          type: string
        type: array
      network:
        type: string
      rating:
        type: number
      releaseYear:
        type: integer
      seasonCount:
        type: integer
      seasons:
        items:
          $ref: '#/definitions/types.Season'
        type: array
      status:
        description: e.g., "Ended", "Continuing"
        type: string
    type: object
  types.SonarrConfig:
    description: Emby media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AutomationClientType'
      enabled:
        example: true
        type: boolean
      name:
        example: My Client
        type: string
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
      validateConn:
        example: true
        type: boolean
    type: object
  types.SubsonicConfig:
    description: Supersonic music server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.ClientMediaType'
      enabled:
        example: true
        type: boolean
      name:
        example: My Client
        type: string
      password:
        example: your-password
        type: string
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
      username:
        example: admin
        type: string
      validateConn:
        example: true
        type: boolean
    type: object
  types.SyncClient:
    properties:
      clientId:
        description: ID of the client that this external ID belongs to (optional for
          service IDs like TMDB)
        type: integer
      itemId:
        description: The actual ID value in the external system
        type: string
    type: object
  types.SyncClientState:
    properties:
      clientID:
        type: integer
      clientListID:
        type: string
      items:
        description: Integration Client's Internal IDs for the items
        items:
          $ref: '#/definitions/types.SyncListItem'
        type: array
      lastSynced:
        description: Time last synced to this client
        type: string
    type: object
  types.SyncListItem:
    properties:
      changeHistory:
        items:
          $ref: '#/definitions/types.ChangeRecord'
        type: array
      itemId:
        type: string
      lastChanged:
        type: string
      position:
        type: integer
    type: object
  types.Track:
    properties:
      albumID:
        type: integer
      albumName:
        type: string
      albumTitle:
        type: string
      artistID:
        type: integer
      artistName:
        type: string
      composer:
        type: string
      credits:
        items:
          $ref: '#/definitions/suasor_clients_media_types.Person'
        type: array
      details:
        $ref: '#/definitions/types.MediaDetails'
      discNumber:
        type: integer
      duration:
        type: integer
      lyrics:
        type: string
      syncAlbum:
        items:
          $ref: '#/definitions/types.SyncClient'
        type: array
      syncArtist:
        items:
          $ref: '#/definitions/types.SyncClient'
        type: array
      trackNumber:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: Dane Miller
    url: http://www.swagger.io/support
  description: API Server for Suasor
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Suasor API
  version: "1.0"
paths:
  /admin/client/:clientType/:clientId/test:
    get:
      consumes:
      - application/json
      description: Tests the connection to a client using the provided configuration
      parameters:
      - description: Client type
        in: path
        name: clientType
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Connection test result
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_TestConnectionResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Test client connection
      tags:
      - clients
  /admin/client/:clientType/test:
    get:
      consumes:
      - application/json
      description: Tests the connection to a client using the provided configuration
      parameters:
      - description: Updated client data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ClientTestRequest-types_ClientConfig'
      produces:
      - application/json
      responses:
        "200":
          description: Connection test result
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_TestConnectionResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Test client connection
      tags:
      - clients
  /ai/analyze:
    post:
      consumes:
      - application/json
      description: Use AI to analyze provided content
      parameters:
      - description: Content analysis request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AiContentAnalysisRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Analysis response
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AiContentAnalysisResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Analyze content with AI
      tags:
      - ai
  /ai/conversation/message:
    post:
      consumes:
      - application/json
      description: Continue a conversation with the AI by sending a new message
      parameters:
      - description: Message request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ConversationMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: AI response
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_ConversationMessageResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Conversation not owned by user
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Send a message in an existing AI conversation
      tags:
      - ai
  /ai/conversation/start:
    post:
      consumes:
      - application/json
      description: Initialize a new conversational session with the AI for personalized
        recommendations
      parameters:
      - description: Conversation initialization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.StartConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Conversation started
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_ConversationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Start a new AI conversation for recommendations
      tags:
      - ai
  /ai/recommendations:
    post:
      consumes:
      - application/json
      description: Get content recommendations from an AI service
      parameters:
      - description: Recommendation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AiRecommendationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Recommendation response
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AiRecommendationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get AI-powered content recommendations
      tags:
      - ai
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password
      parameters:
      - description: User login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated user
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AuthDataResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Invalid credentials or inactive account
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Log in a user
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates the refresh token, effectively logging the user out
      parameters:
      - description: Logout data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Log out a user
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed token
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AuthDataResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Refresh access token
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email, username, and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AuthDataResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "409":
          description: Email or username already in use
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Register a new user
      tags:
      - auth
  /api/v1/auth/validate:
    get:
      description: Validates the user's session token and returns current user profile
      produces:
      - application/json
      responses:
        "200":
          description: Valid session with user details
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "401":
          description: Invalid or expired session token
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Validate user session
      tags:
      - auth
  /api/v1/client/{clientID}/movies/actor/{actor}:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients featuring the specified
        actor
      parameters:
      - description: Actor name
        in: path
        name: actor
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by actor
      tags:
      - movies
  /api/v1/client/{clientID}/movies/director/{director}:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients directed by the specified
        director
      parameters:
      - description: Director name
        in: path
        name: director
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by director
      tags:
      - movies
  /api/v1/client/{clientID}/movies/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by genre
      tags:
      - movies
  /api/v1/client/{clientID}/movies/rating:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients with ratings in the
        specified range
      parameters:
      - description: Minimum rating (e.g. 7.5)
        in: query
        name: min
        required: true
        type: number
      - description: Maximum rating (e.g. 10.0)
        in: query
        name: max
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid rating format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by rating range
      tags:
      - movies
  /api/v1/client/{clientID}/movies/search:
    get:
      consumes:
      - application/json
      description: Searches for movies across all connected clients matching the query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Missing search query
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search for movies
      tags:
      - movies
  /api/v1/client/{clientID}/movies/year/{year}:
    get:
      responses:
        "400":
          description: Invalid year
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
  /api/v1/client/{clientID}/music/albums/year/{year}:
    get:
      consumes:
      - application/json
      description: Retrieves albums from all connected clients that were released
        in the specified year
      parameters:
      - description: Release year
        in: path
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid year
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get albums by release year
      tags:
      - music
  /api/v1/client/{clientID}/music/search:
    get:
      consumes:
      - application/json
      description: Search for music across all connected clients
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Music search results retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_MediaItemResponse'
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search music (artists, albums, tracks)
      tags:
      - music
  /api/v1/client/{clientId}/album/{clientItemId}/tracks:
    get:
      consumes:
      - application/json
      description: Retrieves all tracks for a specific album
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Album ID
        in: path
        name: albumID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get tracks by album
      tags:
      - music
  /api/v1/client/{clientId}/album/item/{clientItemId}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific music album from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Album ID
        in: path
        name: albumID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Album retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Album'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get album by ID
      tags:
      - music
  /api/v1/client/{clientId}/artist/item/{clientItemId}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific music artist from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Artist ID
        in: path
        name: artistID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Artist retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Artist'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get artist by ID
      tags:
      - music
  /api/v1/client/{clientId}/movie/actor/{actor}:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients featuring the specified
        actor
      parameters:
      - description: Actor name
        in: path
        name: actor
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by actor
      tags:
      - movies
  /api/v1/client/{clientId}/movie/director/{director}:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients directed by the specified
        director
      parameters:
      - description: Director name
        in: path
        name: director
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by director
      tags:
      - movies
  /api/v1/client/{clientId}/movie/external/{source}/{externalID}:
    get:
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
  /api/v1/client/{clientId}/movie/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by genre
      tags:
      - movies
  /api/v1/client/{clientId}/movie/item/{clientItemId}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific movie from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Movie ID
        in: path
        name: movieID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movie by ID
      tags:
      - movies
  /api/v1/client/{clientId}/movie/latest/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added movies from all connected clients
      parameters:
      - description: Number of movies to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid count format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get latest added movies
      tags:
      - movies
  /api/v1/client/{clientId}/movie/popular/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the most popular movies from all connected clients
      parameters:
      - description: Number of movies to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid count format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get popular movies
      tags:
      - movies
  /api/v1/client/{clientId}/movie/rating:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients with ratings in the
        specified range
      parameters:
      - description: Minimum rating (e.g. 7.5)
        in: query
        name: min
        required: true
        type: number
      - description: Maximum rating (e.g. 10.0)
        in: query
        name: max
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid rating format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by rating range
      tags:
      - movies
  /api/v1/client/{clientId}/movie/search:
    get:
      consumes:
      - application/json
      description: Searches for movies across all connected clients matching the query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Missing search query
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search for movies
      tags:
      - movies
  /api/v1/client/{clientId}/movie/top-rated/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the highest rated movies from all connected clients
      parameters:
      - description: Number of movies to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid count format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get top rated movies
      tags:
      - movies
  /api/v1/client/{clientId}/movie/year/{year}:
    get:
      responses:
        "400":
          description: Invalid year
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
  /api/v1/client/{clientId}/track/item/{clientItemId}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific music track from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Track ID
        in: path
        name: trackID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Track retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Track'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get track by ID from client
      tags:
      - music
  /api/v1/health:
    get:
      description: returns JSON object with health statuses.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: checks app and database health
      tags:
      - health
  /api/v1/media-data/{mediaType}/clear:
    delete:
      consumes:
      - application/json
      description: Delete all play history entries for a user
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: History cleared successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Clear a user's play history
      tags:
      - History
  /api/v1/media-data/{mediaType}/continue-watching:
    get:
      consumes:
      - application/json
      description: Get media items that a user has started but not completed
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Media type filter (movie, series, episode, track, etc.)
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved continue watching items
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get a user's continue watching list
      tags:
      - History
  /api/v1/media-data/{mediaType}/favorites:
    get:
      consumes:
      - application/json
      description: Get all media items marked as favorites by a user
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved favorites
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get a user's favorite media items
      tags:
      - History
  /api/v1/media-data/{mediaType}/history:
    get:
      consumes:
      - application/json
      description: Get a user's media play history with optional filtering
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Filter by completion status
        in: query
        name: completed
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved play history
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get a user's media play history
      tags:
      - History
  /api/v1/media-data/{mediaType}/media/{mediaItemId}/favorite:
    put:
      consumes:
      - application/json
      description: Mark or unmark a media item as a favorite
      parameters:
      - description: Media Item ID
        in: path
        name: mediaItemId
        required: true
        type: integer
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Favorite status
        in: query
        name: favorite
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Favorite status updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Toggle favorite status for a media item
      tags:
      - History
  /api/v1/media-data/{mediaType}/media/{mediaItemId}/rating:
    put:
      consumes:
      - application/json
      description: Set a user's rating for a media item
      parameters:
      - description: Media Item ID
        in: path
        name: mediaItemId
        required: true
        type: integer
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: User rating (0-10)
        in: query
        name: rating
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Rating updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Update user rating for a media item
      tags:
      - History
  /api/v1/media-data/{mediaType}/recent:
    get:
      consumes:
      - application/json
      description: Get a user's recent media history
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of days to look back (default 7)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved recent history
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get a user's recent media history
      tags:
      - History
  /api/v1/media-data/{mediaType}/record:
    post:
      consumes:
      - application/json
      description: Record a new play event for a media item
      parameters:
      - description: Media play information
        in: body
        name: mediaPlay
        required: true
        schema:
          $ref: '#/definitions/requests.UserMediaItemDataRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Play event recorded successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Record a media play event
      tags:
      - History
  /api/v1/movies/actor/{actor}:
    get:
      consumes:
      - application/json
      description: Retrieves movies featuring a specific actor
      parameters:
      - description: Actor name
        in: path
        name: actor
        required: true
        type: string
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get movies by actor
      tags:
      - movies
  /api/v1/movies/director/{director}:
    get:
      consumes:
      - application/json
      description: Retrieves movies directed by a specific director
      parameters:
      - description: Director name
        in: path
        name: director
        required: true
        type: string
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get movies by director
      tags:
      - movies
  /api/v1/movies/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves movies that match a specific genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get movies by genre
      tags:
      - movies
  /api/v1/movies/search:
    get:
      consumes:
      - application/json
      description: Searches for movies that match the query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Search movies
      tags:
      - movies
  /api/v1/movies/year/{year}:
    get:
      consumes:
      - application/json
      description: Retrieves movies released in a specific year
      parameters:
      - description: Release year
        in: path
        name: year
        required: true
        type: integer
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get movies by year
      tags:
      - movies
  /api/v1/music/albums/{id}/tracks:
    get:
      consumes:
      - application/json
      description: Retrieves all tracks for a specific album
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Album not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get tracks by album ID
      tags:
      - music
  /api/v1/music/artists/{id}/albums:
    get:
      consumes:
      - application/json
      description: Retrieves all albums for a specific artist
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Artist not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get albums for an artist
      tags:
      - music
  /api/v1/music/search:
    get:
      consumes:
      - application/json
      description: Search for music items (tracks, albums, artists) by query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Media type to search for (track, album, artist)
        in: query
        name: type
        type: string
      - description: Maximum number of items to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search results retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItemList'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Search music
      tags:
      - music
  /api/v1/recommendations:
    get:
      consumes:
      - application/json
      description: Retrieves a list of recommendations for the authenticated user
      parameters:
      - description: Filter by media type (movie, series, music)
        in: query
        name: mediaType
        type: string
      - description: 'Number of recommendations to return (default: 20)'
        in: query
        name: limit
        type: integer
      - description: 'Offset for pagination (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recommendations retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_RecommendationsListResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get recommendations for the current user
      tags:
      - recommendations
  /api/v1/recommendations/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific recommendation by its ID for the authenticated
        user
      parameters:
      - description: Recommendation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recommendation retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_RecommendationResponse'
        "400":
          description: Invalid recommendation ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Recommendation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get a specific recommendation by ID
      tags:
      - recommendations
  /api/v1/recommendations/rate:
    post:
      consumes:
      - application/json
      description: Sets a user rating for a specific recommendation
      parameters:
      - description: Recommendation ID and rating
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RateRecommendationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Recommendation rated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Recommendation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Rate a recommendation
      tags:
      - recommendations
  /api/v1/recommendations/recent:
    get:
      consumes:
      - application/json
      description: Retrieves a list of recently created recommendations for the authenticated
        user
      parameters:
      - description: 'Number of days to look back (default: 7)'
        in: query
        name: days
        type: integer
      - description: Filter by media type (movie, series, music)
        in: query
        name: mediaType
        type: string
      - description: 'Number of recommendations to return (default: 20)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recent recommendations retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_RecommendationsListResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get recent recommendations for the current user
      tags:
      - recommendations
  /api/v1/recommendations/top:
    get:
      consumes:
      - application/json
      description: Retrieves a list of top-scored recommendations for the authenticated
        user
      parameters:
      - description: 'Minimum score (0-1) for recommendations (default: 0.7)'
        in: query
        name: minScore
        type: string
      - description: Filter by media type (movie, series, music)
        in: query
        name: mediaType
        type: string
      - description: 'Number of recommendations to return (default: 20)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Top recommendations retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_RecommendationsListResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get top-scored recommendations for the current user
      tags:
      - recommendations
  /api/v1/recommendations/view:
    post:
      consumes:
      - application/json
      description: Marks a specific recommendation as viewed for the authenticated
        user
      parameters:
      - description: Recommendation ID to mark as viewed
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.MarkRecommendationAsViewedRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Recommendation marked as viewed successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Recommendation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Mark a recommendation as viewed
      tags:
      - recommendations
  /api/v1/series/{id}/seasons/{seasonNumber}/episodes:
    get:
      consumes:
      - application/json
      description: Retrieves all episodes for a specific season of a series
      parameters:
      - description: Series ID
        in: path
        name: id
        required: true
        type: integer
      - description: Season number
        in: path
        name: seasonNumber
        required: true
        type: integer
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Episodes retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_types_Episode'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Series or season not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get episodes for a season
      tags:
      - series
  /api/v1/user/{id}:
    delete:
      description: Deletes a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content - User successfully deleted
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Delete a user account
      tags:
      - users
    get:
      description: Retrieves a user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
  /api/v1/user/{id}/activate:
    post:
      description: Activates a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully activated user account
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Activate a user account
      tags:
      - users
  /api/v1/user/{id}/deactivate:
    post:
      description: Deactivates a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deactivated user account
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Deactivate a user account
      tags:
      - users
  /api/v1/user/{id}/role:
    put:
      consumes:
      - application/json
      description: Changes a user's role (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New role information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ChangeRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully changed user role
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid user ID format or invalid role
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Change user role
      tags:
      - users
  /api/v1/user/{userID}/content:
    get:
      consumes:
      - application/json
      description: Retrieves all types of content owned by a user (playlists, collections,
        etc.)
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User content retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get all user-owned content
      tags:
      - user-media
  /api/v1/user/{userID}/content/recent:
    get:
      consumes:
      - application/json
      description: Retrieves recently created or updated content owned by a user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recent user content retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get recently created or updated user content
      tags:
      - user-media
  /api/v1/user/{userID}/content/search:
    get:
      consumes:
      - application/json
      description: Searches for content owned by a user based on query parameters
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Media type filter
        in: query
        name: type
        type: string
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User content found successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Search user-owned content
      tags:
      - user-media
  /api/v1/user/{userID}/media:
    get:
      consumes:
      - application/json
      description: Retrieves media items owned by a specific user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get media items by user ID
      tags:
      - user-media
    post:
      consumes:
      - application/json
      description: Creates a new media item owned by a user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Media item to create
        in: body
        name: mediaItem
        required: true
        schema:
          $ref: '#/definitions/requests.MediaItemCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Media item created successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Create a new user-owned media item
      tags:
      - user-media
  /api/v1/user/{userID}/media/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a media item owned by a user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Media Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media item deleted successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Not authorized to delete this media item
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Delete a user-owned media item
      tags:
      - user-media
    put:
      consumes:
      - application/json
      description: Updates an existing media item owned by a user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Media Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated media item data
        in: body
        name: mediaItem
        required: true
        schema:
          $ref: '#/definitions/requests.MediaItemUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Media item updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_MediaData'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Not authorized to update this media item
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Update a user-owned media item
      tags:
      - user-media
  /api/v1/user/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a new avatar image for the currently authenticated user
      parameters:
      - description: Avatar image file (jpeg, png, gif only)
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully uploaded avatar
          schema:
            $ref: '#/definitions/responses.APIResponse-requests_AvatarUploadResponse'
        "400":
          description: Invalid file format or size
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Upload user avatar
      tags:
      - users
  /api/v1/user/password:
    put:
      consumes:
      - application/json
      description: Changes the password for the currently authenticated user
      parameters:
      - description: Password change information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully changed password
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request format or incorrect current password
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /api/v1/user/profile:
    get:
      description: Retrieves the profile information for the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get the current user's profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the profile information for the currently authenticated
        user
      parameters:
      - description: Updated profile information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user profile
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid request format or email/username already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /api/v1/user/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided information
      parameters:
      - description: User registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid request format or email/username already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Register a new user
      tags:
      - users
  /client/:clientType:
    get:
      consumes:
      - application/json
      description: Retrieves all client configurations for the user
      produces:
      - application/json
      responses:
        "200":
          description: Clients retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_Client-types_ClientConfig'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get all clients
      tags:
      - clients
    post:
      consumes:
      - application/json
      description: Creates a new client configuration
      parameters:
      - description: client data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ClientRequest-types_ClientConfig'
      produces:
      - application/json
      responses:
        "201":
          description: client created
          schema:
            $ref: '#/definitions/responses.APIResponse-models_Client-types_ClientConfig'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Create a new client
      tags:
      - clients
  /client/{clientID}/movies/actor/{actor}:
    get:
      consumes:
      - application/json
      description: Retrieves movies featuring a specific actor
      parameters:
      - description: Actor name
        in: path
        name: actor
        required: true
        type: string
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Movie not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get movies by actor
      tags:
      - movies
  /client/{clientID}/music/albums/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves albums from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get albums by genre
      tags:
      - music
  /client/{clientID}/music/tracks/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves tracks from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get tracks by genre
      tags:
      - music
  /client/{clientId}/media:
    get:
      consumes:
      - application/json
      description: Retrieves all media items for a specific client
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Media type filter
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-any'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media items by client
      tags:
      - client-media
  /client/{clientId}/media/item/{itemId}:
    get:
      consumes:
      - application/json
      description: Retrieves a media item using its client-specific ID
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Client-specific item ID
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media item retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media item by client-specific ID
      tags:
      - client-media
  /client/{clientType}:
    get:
      consumes:
      - application/json
      description: Retrieves all clients of a specific type for the user
      parameters:
      - description: Client type (e.g. 'plex', 'jellyfin', 'emby')
        in: path
        name: clientType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Clients retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_Client-types_ClientConfig'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get clients by type
      tags:
      - clients
  /client/media/multi:
    get:
      consumes:
      - application/json
      description: Retrieves media items associated with any of the specified clients
      parameters:
      - description: Comma-separated list of client IDs
        in: query
        name: clientIds
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media items from multiple clients
      tags:
      - client-media
  /client/media/search:
    get:
      consumes:
      - application/json
      description: Searches for media items across multiple clients based on query
        parameters
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Comma-separated list of client IDs
        in: query
        name: clientIds
        required: true
        type: string
      - description: Media type filter
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-map_string_array_models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Search for media items across multiple clients
      tags:
      - client-media
  /client/media/sync:
    post:
      consumes:
      - application/json
      description: Creates or updates a mapping between a media item and a target
        client
      parameters:
      - description: Sync request with source and target client info
        in: body
        name: syncRequest
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Item synced successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Sync a media item between clients
      tags:
      - client-media
  /clients:
    get:
      consumes:
      - application/json
      description: Retrieves all configured clients across different types for the
        user
      parameters:
      - description: Filter by client category (e.g. 'media')
        in: query
        name: type
        type: string
      - description: Filter by specific client type (e.g. 'jellyfin')
        in: query
        name: clientType
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: All user clients with various config types
          schema:
            $ref: '#/definitions/responses.ClientsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.BasicErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.BasicErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all clients
      tags:
      - clients
  /clients/:clientType/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a client configuration
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: client deleted
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_EmptyResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Client not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Delete client
      tags:
      - clients
  /clients/{clientType}/{clientID}/music/albums/top:
    get:
      consumes:
      - application/json
      description: Retrieves the most popular albums from a client
      parameters:
      - description: Client Type
        in: path
        name: clientType
        required: true
        type: string
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Number of albums to retrieve (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get top albums from a client
      tags:
      - music
  /clients/{clientType}/{clientID}/music/artists/favorites:
    get:
      consumes:
      - application/json
      description: Retrieves the user's favorite artists from a client
      parameters:
      - description: Client Type
        in: path
        name: clientType
        required: true
        type: string
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Number of artists to retrieve (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Artists retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get favorite artists from a client
      tags:
      - music
  /clients/{clientType}/{clientID}/music/artists/top:
    get:
      consumes:
      - application/json
      description: Retrieves the most popular artists from a client
      parameters:
      - description: Client Type
        in: path
        name: clientType
        required: true
        type: string
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Number of artists to retrieve (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Artists retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get top artists from a client
      tags:
      - music
  /clients/{clientType}/{clientID}/music/tracks/recently-added:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added tracks from a client
      parameters:
      - description: Client Type
        in: path
        name: clientType
        required: true
        type: string
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Number of tracks to retrieve (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get recently added tracks from a client
      tags:
      - music
  /clients/{clientType}/{clientID}/music/tracks/top:
    get:
      consumes:
      - application/json
      description: Retrieves the most popular tracks from a client
      parameters:
      - description: Client Type
        in: path
        name: clientType
        required: true
        type: string
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Number of tracks to retrieve (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get top tracks from a client
      tags:
      - music
  /clients/automation/{clientID}/calendar:
    get:
      consumes:
      - application/json
      description: Retrieves calendar events from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Calendar events retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID or dates
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get calendar from automation client
      tags:
      - automation
  /clients/automation/{clientID}/command:
    post:
      consumes:
      - application/json
      description: Executes a command on the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Command details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ExecuteCommandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Command executed
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Execute command on automation client
      tags:
      - automation
  /clients/automation/{clientID}/library:
    get:
      consumes:
      - application/json
      description: Retrieves all library items from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort by
        in: query
        name: sortBy
        type: string
      - description: Sort order
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Library items retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get library items from automation client
      tags:
      - automation
  /clients/automation/{clientID}/media:
    post:
      consumes:
      - application/json
      description: Adds a new media item to the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Media details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AddMediaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Media added
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Add media to automation client
      tags:
      - automation
  /clients/automation/{clientID}/media/{mediaID}:
    delete:
      consumes:
      - application/json
      description: Deletes a media item from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Media ID
        in: path
        name: mediaID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media deleted
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client or media ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Delete media from automation client
      tags:
      - automation
    get:
      consumes:
      - application/json
      description: Retrieves a specific media item from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Media ID
        in: path
        name: mediaID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client or media ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get media by ID from automation client
      tags:
      - automation
    put:
      consumes:
      - application/json
      description: Updates an existing media item in the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Media ID
        in: path
        name: mediaID
        required: true
        type: string
      - description: Media details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateMediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Media updated
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Update media in automation client
      tags:
      - automation
  /clients/automation/{clientID}/profiles/metadata:
    get:
      consumes:
      - application/json
      description: Retrieves all metadata profiles from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Metadata profiles retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get metadata profiles from automation client
      tags:
      - automation
  /clients/automation/{clientID}/profiles/quality:
    get:
      consumes:
      - application/json
      description: Retrieves all quality profiles from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Quality profiles retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get quality profiles from automation client
      tags:
      - automation
  /clients/automation/{clientID}/search:
    get:
      consumes:
      - application/json
      description: Searches for media items in the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID or query
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search media in automation client
      tags:
      - automation
  /clients/automation/{clientID}/status:
    get:
      consumes:
      - application/json
      description: Retrieves system status information from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: System status retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get automation client system status
      tags:
      - automation
  /clients/automation/{clientID}/tags:
    get:
      consumes:
      - application/json
      description: Retrieves all tags from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tags retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get tags from automation client
      tags:
      - automation
    post:
      consumes:
      - application/json
      description: Creates a new tag in the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Tag details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Tag created
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Create tag in automation client
      tags:
      - automation
  /clients/media/{clientID}/item/{itemID}:
    delete:
      consumes:
      - application/json
      description: Deletes a media item from a client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Item ID
        in: path
        name: itemID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item deleted
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Delete a media item from a client
      tags:
      - client-media
  /clients/media/{clientID}/movies/{movieID}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific movie from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Movie ID
        in: path
        name: movieID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movie by ID
      tags:
      - movies
  /clients/media/{clientID}/movies/{source}/{externalID}:
    get:
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
  /clients/media/{clientID}/music/albums/favorites:
    get:
      consumes:
      - application/json
      description: Retrieves the user's favorite albums from a client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Maximum number of albums to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Favorite albums retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get favorite albums
      tags:
      - music
  /clients/media/{clientID}/music/artists/{artistID}/albums:
    get:
      consumes:
      - application/json
      description: Retrieves all albums for a specific artist
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Artist ID
        in: path
        name: artistID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get albums by artist
      tags:
      - music
  /clients/media/{clientID}/music/artists/{artistID}/similar:
    get:
      consumes:
      - application/json
      description: Retrieves artists similar to a specific artist from a client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Artist ID
        in: path
        name: artistID
        required: true
        type: string
      - description: Maximum number of artists to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Similar artists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get similar artists
      tags:
      - music
  /clients/media/{clientID}/music/tracks/{trackID}/similar:
    get:
      consumes:
      - application/json
      description: Retrieves tracks similar to a specific track from a client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Track ID
        in: path
        name: trackID
        required: true
        type: string
      - description: Maximum number of tracks to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Similar tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get similar tracks
      tags:
      - music
  /clients/media/{clientID}/music/tracks/favorites:
    get:
      consumes:
      - application/json
      description: Retrieves the user's favorite tracks from a client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Maximum number of tracks to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Favorite tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get favorite tracks
      tags:
      - music
  /clients/media/{clientID}/music/tracks/recently-played:
    get:
      consumes:
      - application/json
      description: Retrieves the user's recently played tracks from a client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Maximum number of tracks to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recently played tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get recently played tracks
      tags:
      - music
  /clients/media/{clientID}/playlists:
    get:
      consumes:
      - application/json
      description: Retrieves all playlists from the client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Maximum number of playlists to return
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Lists retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get all playlists
      tags:
      - playlists
    post:
      consumes:
      - application/json
      description: Creates a new playlist on the specified client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: List creation data
        in: body
        name: playlist
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: List created
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Create a new playlist
      tags:
      - playlists
  /clients/media/{clientID}/playlists/{playlistID}:
    delete:
      consumes:
      - application/json
      description: Deletes a playlist from the specified client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: List ID
        in: path
        name: playlistID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List deleted
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Delete a playlist
      tags:
      - playlists
    get:
      consumes:
      - application/json
      description: Retrieves a specific playlist from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: List ID
        in: path
        name: playlistID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get playlist by ID
      tags:
      - playlists
    put:
      consumes:
      - application/json
      description: Updates an existing playlist on the specified client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: List ID
        in: path
        name: playlistID
        required: true
        type: string
      - description: List update data
        in: body
        name: playlist
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: List updated
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Update a playlist
      tags:
      - playlists
  /clients/media/{clientID}/playlists/{playlistID}/items:
    post:
      consumes:
      - application/json
      description: Adds a media item to an existing playlist
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: List ID
        in: path
        name: playlistID
        required: true
        type: string
      - description: Item to add
        in: body
        name: item
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Item added to playlist
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Add an item to a playlist
      tags:
      - playlists
  /clients/media/{clientID}/playlists/{playlistID}/items/{itemID}:
    delete:
      consumes:
      - application/json
      description: Removes a media item from an existing playlist
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: List ID
        in: path
        name: playlistID
        required: true
        type: string
      - description: Item ID to remove
        in: path
        name: itemID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item removed from playlist
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Remove an item from a playlist
      tags:
      - playlists
  /clients/media/{clientID}/series/{seriesID}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific TV series from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Series ID
        in: path
        name: seriesID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by ID
      tags:
      - series
  /clients/media/{clientID}/series/{seriesID}/seasons:
    get:
      consumes:
      - application/json
      description: Retrieves all seasons for a specific TV series
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Series ID
        in: path
        name: seriesID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Series'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get seasons for a series
      tags:
      - series
  /config:
    get:
      consumes:
      - application/json
      description: Returns the current system configuration
      produces:
      - application/json
      responses:
        "200":
          description: Configuration retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-types_Configuration'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get current configuration
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Updates the system-wide application configuration (admin only)
      parameters:
      - description: Configuration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.Configuration'
      produces:
      - application/json
      responses:
        "200":
          description: Configuration updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Update application configuration
      tags:
      - config
  /config/file:
    get:
      consumes:
      - application/json
      description: Returns the file-based system configuration (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: File configuration retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-types_Configuration'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get file-based configuration
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Saves the configuration to file only (admin only)
      parameters:
      - description: Configuration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.Configuration'
      produces:
      - application/json
      responses:
        "200":
          description: Configuration saved to file successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Save configuration to file
      tags:
      - config
  /config/reset:
    post:
      consumes:
      - application/json
      description: Resets the system configuration to default values (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Configuration reset successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Reset configuration to defaults
      tags:
      - config
  /config/user:
    get:
      consumes:
      - application/json
      description: Returns the configuration for the current user
      produces:
      - application/json
      responses:
        "200":
          description: User configuration retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserConfig'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get user configuration
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Updates the configuration for the current user
      parameters:
      - description: User configuration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserConfig'
      produces:
      - application/json
      responses:
        "200":
          description: User configuration updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Update user configuration
      tags:
      - config
  /credits:
    post:
      consumes:
      - application/json
      description: Creates a new credit associating a person with a media item
      parameters:
      - description: Credit information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCreditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Credit created successfully
          schema:
            $ref: '#/definitions/models.Credit'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Create a new credit
      tags:
      - credits
  /credits/{creditID}:
    delete:
      consumes:
      - application/json
      description: Deletes a credit record by ID
      parameters:
      - description: Credit ID
        in: path
        name: creditID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Credit deleted successfully
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Invalid credit ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Credit not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Delete a credit
      tags:
      - credits
    put:
      consumes:
      - application/json
      description: Updates a credit record with the provided information
      parameters:
      - description: Credit ID
        in: path
        name: creditID
        required: true
        type: integer
      - description: Updated credit information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateCreditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Credit updated successfully
          schema:
            $ref: '#/definitions/models.Credit'
        "400":
          description: Invalid credit ID or request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Credit not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Update an existing credit
      tags:
      - credits
  /credits/media/{mediaItemID}:
    get:
      consumes:
      - application/json
      description: Retrieves all credits (cast and crew) associated with a specific
        media item
      parameters:
      - description: Media Item ID
        in: path
        name: mediaItemID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Credits retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Credit'
            type: array
        "400":
          description: Invalid media item ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get all credits for a media item
      tags:
      - credits
    post:
      consumes:
      - application/json
      description: Creates multiple credits for a specific media item in a single
        operation
      parameters:
      - description: Media Item ID
        in: path
        name: mediaItemID
        required: true
        type: integer
      - description: Multiple credits information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCreditsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Credits created successfully
          schema:
            items:
              $ref: '#/definitions/models.Credit'
            type: array
        "400":
          description: Invalid media item ID or request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Create multiple credits for a media item
      tags:
      - credits
  /credits/media/{mediaItemID}/{type}:
    get:
      consumes:
      - application/json
      description: Retrieves credits for a media item filtered by type (cast, crew,
        directors)
      parameters:
      - description: Media Item ID
        in: path
        name: mediaItemID
        required: true
        type: integer
      - description: Credit type (cast, crew, directors)
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Credits retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Credit'
            type: array
        "400":
          description: Invalid media item ID or credit type
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get credits by type for a media item
      tags:
      - credits
  /credits/media/{mediaItemID}/cast:
    get:
      consumes:
      - application/json
      description: Retrieves all cast credits associated with a specific media item
      parameters:
      - description: Media Item ID
        in: path
        name: mediaItemID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Cast credits retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Credit'
            type: array
        "400":
          description: Invalid media item ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get cast for a media item
      tags:
      - credits
  /credits/media/{mediaItemID}/crew:
    get:
      consumes:
      - application/json
      description: Retrieves all crew credits associated with a specific media item,
        optionally filtered by department
      parameters:
      - description: Media Item ID
        in: path
        name: mediaItemID
        required: true
        type: integer
      - description: Filter by department (e.g., 'Directing', 'Writing')
        in: query
        name: department
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Crew credits retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Credit'
            type: array
        "400":
          description: Invalid media item ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get crew for a media item
      tags:
      - credits
  /credits/media/{mediaItemID}/directors:
    get:
      consumes:
      - application/json
      description: Retrieves all director credits associated with a specific media
        item
      parameters:
      - description: Media Item ID
        in: path
        name: mediaItemID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Director credits retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Credit'
            type: array
        "400":
          description: Invalid media item ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get directors for a media item
      tags:
      - credits
  /credits/person/{personID}:
    get:
      consumes:
      - application/json
      description: Retrieves all credits associated with a specific person
      parameters:
      - description: Person ID
        in: path
        name: personID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Credits retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Credit'
            type: array
        "400":
          description: Invalid person ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get all credits for a person
      tags:
      - credits
  /docs/client-types:
    get:
      consumes:
      - application/json
      description: This endpoint doesn't exist but serves as a reference for all client
        config types
      produces:
      - application/json
      responses:
        "200":
          description: Ollama client config
          schema:
            $ref: '#/definitions/types.OllamaConfig'
      summary: Reference for all client config types
      tags:
      - swagger-reference
  /item/media:
    post:
      consumes:
      - application/json
      description: Creates a new media item in the database with client association
      parameters:
      - description: Media item data with type, client info, and type-specific data
        in: body
        name: mediaItem
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Media item created successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Create a new media item associated with a client
      tags:
      - client-media
  /item/media/{id}:
    put:
      consumes:
      - application/json
      description: Updates a client media item in the database by ID
      parameters:
      - description: Media item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Media item data to update
        in: body
        name: mediaItem
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Media item updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Update an existing client media item
      tags:
      - client-media
  /jobs/{name}/run:
    post:
      consumes:
      - application/json
      description: Triggers a job to run immediately
      parameters:
      - description: Job name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Run job manually
      tags:
      - jobs
  /jobs/active:
    get:
      consumes:
      - application/json
      description: Returns a list of all currently running jobs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_JobRun'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Get all active job runs
      tags:
      - jobs
  /jobs/media-sync:
    get:
      consumes:
      - application/json
      description: Returns a list of job runs for the current user
      parameters:
      - description: Limit number of results (default 50)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaSyncJob'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Get job runs for current user
      tags:
      - jobs
    post:
      consumes:
      - application/json
      description: Creates or updates a media sync job for the current user
      parameters:
      - description: Media sync job setup
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.SetupMediaSyncJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Setup media sync job
      tags:
      - jobs
  /jobs/media-sync/run:
    post:
      consumes:
      - application/json
      description: Runs a media sync job manually for the current user
      parameters:
      - description: Media sync job run
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RunMediaSyncJobRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Run media sync job manually
      tags:
      - jobs
  /jobs/recommendations:
    get:
      consumes:
      - application/json
      description: Returns a list of recommendations for the current user
      parameters:
      - description: Only return active recommendations (default true)
        in: query
        name: active
        type: boolean
      - description: Limit number of results (default 50)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_Recommendation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Get recommendations for current user
      tags:
      - jobs
  /jobs/recommendations/{id}/dismiss:
    post:
      consumes:
      - application/json
      description: Marks a recommendation as dismissed
      parameters:
      - description: Recommendation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Dismiss recommendation
      tags:
      - jobs
  /jobs/recommendations/{id}/viewed:
    put:
      consumes:
      - application/json
      description: Updates whether a recommendation has been viewed
      parameters:
      - description: Recommendation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Viewed status update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateRecommendationViewedRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Update recommendation viewed status
      tags:
      - jobs
  /jobs/runs:
    get:
      consumes:
      - application/json
      description: Returns a list of recent job runs
      parameters:
      - description: Limit number of results (default 50)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_JobRun'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Get recent job runs
      tags:
      - jobs
  /jobs/runs/{id}/progress:
    get:
      consumes:
      - application/json
      description: Returns progress information for a specific job run
      parameters:
      - description: Job Run ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-models_JobRun'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Get job run progress
      tags:
      - jobs
  /jobs/schedules:
    get:
      consumes:
      - application/json
      description: Returns a list of all job schedules
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_JobSchedule'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Get all job schedules
      tags:
      - jobs
    post:
      consumes:
      - application/json
      description: Creates a new job schedule
      parameters:
      - description: Job schedule to create
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.JobSchedule'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.APIResponse-models_JobSchedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Create a new job schedule
      tags:
      - jobs
    put:
      consumes:
      - application/json
      description: Updates an existing job schedule
      parameters:
      - description: Job schedule update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateJobScheduleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-models_JobSchedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Update job schedule
      tags:
      - jobs
  /jobs/schedules/{name}:
    get:
      consumes:
      - application/json
      description: Returns a specific job schedule by its name
      parameters:
      - description: Job name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.APIResponse-models_JobSchedule'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      summary: Get job schedule by name
      tags:
      - jobs
  /lists/search:
    get:
      consumes:
      - application/json
      description: Searches for playlists matching the given query
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lists found
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search playlists
      tags:
      - playlists
  /media:
    get:
      consumes:
      - application/json
      description: Retrieves all media items of a specific type from the database
      parameters:
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get all media items
      tags:
      - media
  /media/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific media item by ID
      parameters:
      - description: Media Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media item retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media item by ID
      tags:
      - media
  /media/client/{clientId}:
    get:
      consumes:
      - application/json
      description: Retrieves media items associated with a specific client
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media items by client
      tags:
      - media
  /media/client/{clientId}/item/{clientItemId}:
    get:
      consumes:
      - application/json
      description: Retrieves a media item using its client-specific ID
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Client Item ID
        in: path
        name: clientItemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media item retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media item by client-specific ID
      tags:
      - media
  /media/external/{source}/{externalId}:
    get:
      consumes:
      - application/json
      description: Retrieves a media item using its external source ID (e.g., TMDB
        ID)
      parameters:
      - description: External source name (e.g., tmdb, imdb)
        in: path
        name: source
        required: true
        type: string
      - description: External ID from the source
        in: path
        name: externalId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media item retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media item by external source ID
      tags:
      - media
  /media/external/{source}/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific media item by its external ID from a source
      parameters:
      - description: Source of the external ID (e.g., tmdb, imdb)
        in: path
        name: source
        required: true
        type: string
      - description: External ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media item retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media item by external ID
      tags:
      - media
  /media/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves media items that match a specific genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media items by genre
      tags:
      - media
  /media/latest:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added media items
      parameters:
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get latest added media items
      tags:
      - media
  /media/most-played:
    get:
      consumes:
      - application/json
      description: Retrieves the most played media items
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get most played media items
      tags:
      - media
  /media/person/{personId}:
    get:
      consumes:
      - application/json
      description: Retrieves media items associated with a specific person (actor,
        director, etc.)
      parameters:
      - description: Person ID
        in: path
        name: personId
        required: true
        type: integer
      - description: Role filter (actor, director, etc.)
        in: query
        name: role
        type: string
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media items by person
      tags:
      - media
  /media/popular:
    get:
      consumes:
      - application/json
      description: Retrieves popular media items based on views or ratings
      parameters:
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get popular media items
      tags:
      - media
  /media/rating/{rating}:
    get:
      consumes:
      - application/json
      description: Retrieves media items that match a specific rating
      parameters:
      - description: Rating
        in: path
        name: rating
        required: true
        type: number
      - description: Maximum number of media items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media items by rating
      tags:
      - media
  /media/recently-added:
    get:
      consumes:
      - application/json
      description: Retrieves recently added media items of a specific type
      parameters:
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Number of days to look back (default 30)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get recently added media items
      tags:
      - media
  /media/search:
    get:
      consumes:
      - application/json
      description: Searches for media items based on query parameters
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Media type filter
        in: query
        name: type
        type: string
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Search media items
      tags:
      - media
  /media/top-rated:
    get:
      consumes:
      - application/json
      description: Retrieves the highest rated media items
      parameters:
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get top rated media items
      tags:
      - media
  /media/type/{type}:
    get:
      consumes:
      - application/json
      description: Retrieves media items of a specific type
      parameters:
      - description: Media type
        in: path
        name: type
        required: true
        type: string
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media items by type
      tags:
      - media
  /media/year/{year}:
    get:
      consumes:
      - application/json
      description: Retrieves media items released in a specific year
      parameters:
      - description: Release year
        in: path
        name: year
        required: true
        type: integer
      - description: Maximum number of items to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Media items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get media items by release year
      tags:
      - media
  /movies:
    get:
      consumes:
      - application/json
      description: Retrieves all movies in the database
      parameters:
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get all movies
      tags:
      - movies
  /movies/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movie retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Movie not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get movie by ID
      tags:
      - movies
  /movies/client/{clientId}/item/{clientItemId}:
    get:
      consumes:
      - application/json
      description: Retrieves movies associated with a specific client
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Client Item ID
        in: path
        name: clientItemId
        required: true
        type: string
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Movie not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get movies by client-specific ID
      tags:
      - movies
  /movies/latest:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added movies
      parameters:
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Number of days to look back (default 30)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get latest added movies
      tags:
      - movies
  /movies/latest/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added movies from all connected clients
      parameters:
      - description: Number of movies to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid count format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get latest added movies
      tags:
      - movies
  /movies/popular:
    get:
      consumes:
      - application/json
      description: Retrieves the most popular movies
      parameters:
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get popular movies
      tags:
      - movies
  /movies/popular/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the most popular movies from all connected clients
      parameters:
      - description: Number of movies to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid count format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get popular movies
      tags:
      - movies
  /movies/rating/{rating}:
    get:
      consumes:
      - application/json
      description: Retrieves movies that match a specific rating
      parameters:
      - description: Rating
        in: path
        name: rating
        required: true
        type: number
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get movies by rating
      tags:
      - movies
  /movies/recently-added:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added movies
      parameters:
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Number of days to look back (default 30)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get recently added movies
      tags:
      - movies
  /movies/top-rated:
    get:
      consumes:
      - application/json
      description: Retrieves the highest rated movies
      parameters:
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get top rated movies
      tags:
      - movies
  /movies/top-rated/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the highest rated movies from all connected clients
      parameters:
      - description: Number of movies to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid count format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get top rated movies
      tags:
      - movies
  /music/albums/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves an album by its ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Album retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Album'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Album not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get album by ID
      tags:
      - music
  /music/albums/latest:
    get:
      consumes:
      - application/json
      description: Retrieves the latest albums added to the library
      parameters:
      - description: Maximum number of albums to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of days to look back (default 30)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get latest albums by added date
      tags:
      - music
  /music/albums/latest/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added albums
      parameters:
      - description: Number of albums to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get latest albums by added date
      tags:
      - music
  /music/albums/popular:
    get:
      consumes:
      - application/json
      description: Retrieves the most popular albums based on play count, ratings,
        etc.
      parameters:
      - description: Maximum number of albums to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get popular albums
      tags:
      - music
  /music/albums/popular/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves most popular albums
      parameters:
      - description: Number of albums to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get popular albums
      tags:
      - music
  /music/albums/top:
    get:
      consumes:
      - application/json
      description: Retrieves the top albums based on play count, ratings, etc.
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of albums to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get top albums
      tags:
      - music
  /music/albums/year/{year}:
    get:
      consumes:
      - application/json
      description: Retrieves albums released in a specific year
      parameters:
      - description: Release year
        in: path
        name: year
        required: true
        type: integer
      - description: Maximum number of albums to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get albums by release year
      tags:
      - music
  /music/artists/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves an artist by their ID
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Artist retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Artist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Artist not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get artist by ID
      tags:
      - music
  /music/artists/{id}/albums:
    get:
      consumes:
      - application/json
      description: Retrieves all albums for a specific artist
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Artist not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get albums by artist ID
      tags:
      - music
  /music/artists/{id}/similar:
    get:
      consumes:
      - application/json
      description: Retrieves the similar artists to a specific artist
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Similar artists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Artist not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get similar artists
      tags:
      - music
  /music/artists/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves artists from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Artists retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get artists by genre
      tags:
      - music
  /music/artists/popular:
    get:
      consumes:
      - application/json
      description: Retrieves the most popular artists based on play count, ratings,
        etc.
      parameters:
      - description: Maximum number of artists to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Artists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get popular artists
      tags:
      - music
  /music/artists/popular/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves most popular artists
      parameters:
      - description: Number of artists to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Artists retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get popular artists
      tags:
      - music
  /music/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Get music recommendations based on a genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Music items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get genre recommendations
      tags:
      - music
  /music/genres/{genre}/albums:
    get:
      consumes:
      - application/json
      description: Retrieves albums by genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      - description: Maximum number of albums to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get albums by genre
      tags:
      - music
  /music/genres/{genre}/artists:
    get:
      consumes:
      - application/json
      description: Retrieves artists by genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      - description: Maximum number of artists to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Artists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get artists by genre
      tags:
      - music
  /music/genres/{genre}/tracks:
    get:
      consumes:
      - application/json
      description: Retrieves tracks by genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      - description: Maximum number of tracks to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get tracks by genre
      tags:
      - music
  /music/recently-added:
    get:
      consumes:
      - application/json
      description: Retrieves recently added music
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of music items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of days to look back (default 30)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Music items retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get recently added music
      tags:
      - music
  /music/tracks/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a track by its ID
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Track retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Track not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get track by ID
      tags:
      - music
  /music/tracks/{id}/similar:
    get:
      consumes:
      - application/json
      description: Retrieves tracks similar to a specific track
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      - description: Maximum number of tracks to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Similar tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Track not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get similar tracks
      tags:
      - music
  /music/tracks/recently-added:
    get:
      consumes:
      - application/json
      description: Retrieves tracks that were recently added to the library
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of tracks to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of days to look back (default 30)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get recently added tracks
      tags:
      - music
  /music/tracks/top:
    get:
      consumes:
      - application/json
      description: Retrieves the top tracks based on play count, ratings, etc.
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of tracks to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get top tracks
      tags:
      - music
  /people:
    get:
      consumes:
      - application/json
      description: Searches for people whose names match the provided query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 20
        description: Maximum number of results to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: People retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Person'
            type: array
        "400":
          description: Missing search query or invalid limit
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search for people by name
      tags:
      - people
    post:
      consumes:
      - application/json
      description: Creates a new person record with the provided information
      parameters:
      - description: Person information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreatePersonRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Person created successfully
          schema:
            $ref: '#/definitions/models.Person'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Create a new person
      tags:
      - people
  /people/{personID}:
    delete:
      consumes:
      - application/json
      description: Deletes a person record by ID
      parameters:
      - description: Person ID
        in: path
        name: personID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Person deleted successfully
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Invalid person ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Person not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Delete a person
      tags:
      - people
    get:
      consumes:
      - application/json
      description: Retrieves a specific person by their ID
      parameters:
      - description: Person ID
        in: path
        name: personID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Person retrieved successfully
          schema:
            $ref: '#/definitions/models.Person'
        "400":
          description: Invalid person ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Person not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get person by ID
      tags:
      - people
    put:
      consumes:
      - application/json
      description: Updates a person record with the provided information
      parameters:
      - description: Person ID
        in: path
        name: personID
        required: true
        type: integer
      - description: Updated person information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdatePersonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Person updated successfully
          schema:
            $ref: '#/definitions/models.Person'
        "400":
          description: Invalid person ID or request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Person not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Update an existing person
      tags:
      - people
  /people/{personID}/credits:
    get:
      consumes:
      - application/json
      description: Retrieves a specific person along with all their credits
      parameters:
      - description: Person ID
        in: path
        name: personID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Person and their credits retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid person ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Person not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get person with their credits
      tags:
      - people
  /people/{personID}/credits/grouped:
    get:
      consumes:
      - application/json
      description: Retrieves a person's credits organized by department and role
      parameters:
      - description: Person ID
        in: path
        name: personID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Credits grouped by department and role
          schema:
            additionalProperties:
              additionalProperties:
                items:
                  $ref: '#/definitions/models.Credit'
                type: array
              type: object
            type: object
        "400":
          description: Invalid person ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get a person's credits grouped by type
      tags:
      - people
  /people/{personID}/external-ids:
    post:
      consumes:
      - application/json
      description: Adds or updates an external ID reference for a person
      parameters:
      - description: Person ID
        in: path
        name: personID
        required: true
        type: integer
      - description: External ID information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ExternalIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: External ID added successfully
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Invalid person ID or request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Add external ID to person
      tags:
      - people
  /people/import:
    post:
      consumes:
      - application/json
      description: Imports a person from an external source with the provided details
      parameters:
      - description: Person import information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ImportPersonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Person imported successfully
          schema:
            $ref: '#/definitions/models.Person'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Import a person from an external source
      tags:
      - people
  /people/popular:
    get:
      consumes:
      - application/json
      description: Retrieves a list of popular people, sorted by popularity
      parameters:
      - default: 20
        description: Maximum number of results to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Popular people retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Person'
            type: array
        "400":
          description: Invalid limit
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get popular people
      tags:
      - people
  /people/roles/{role}:
    get:
      consumes:
      - application/json
      description: Retrieves people filtered by their professional role (Actor, Director,
        etc.)
      parameters:
      - description: Role to filter by (e.g., 'Actor', 'Director')
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: People retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Person'
            type: array
        "400":
          description: Missing role parameter
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get people by role
      tags:
      - people
  /playlists:
    get:
      consumes:
      - application/json
      description: Retrieves all playlists in the database
      parameters:
      - description: Maximum number of playlists to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Lists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get all playlists
      tags:
      - playlists
  /playlists/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific playlist by ID
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: List not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get playlist by ID
      tags:
      - playlists
  /playlists/{id}/items/{itemID}:
    post:
      consumes:
      - application/json
      description: Adds a media item to an existing playlist
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item ID to add
        in: path
        name: itemID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item added to playlist
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: List not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Add an item to a playlist
      tags:
      - playlists
  /playlists/{id}/tracks:
    get:
      consumes:
      - application/json
      description: Retrieves all tracks in a specific playlist
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: List not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get tracks in a playlist
      tags:
      - playlists
  /playlists/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves playlists that match a specific genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get playlists by genre
      tags:
      - playlists
  /playlists/search:
    get:
      consumes:
      - application/json
      description: Searches for playlists that match the query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Search playlists
      tags:
      - playlists
  /search:
    get:
      consumes:
      - application/json
      description: Searches for content in the database, media clients, and metadata
        sources
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - description: Limit search to specific media type (movie, series, music, person)
        in: query
        name: mediaType
        type: string
      - default: 20
        description: Maximum number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Search for content across all sources
      tags:
      - search
  /search/recent:
    get:
      consumes:
      - application/json
      description: Returns a list of the user's recent searches
      parameters:
      - default: 10
        description: Maximum number of results
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RecentSearchesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get recent searches for the current user
      tags:
      - search
  /search/suggestions:
    get:
      consumes:
      - application/json
      description: Returns suggestions based on partial search input
      parameters:
      - description: Partial search query
        in: query
        name: q
        required: true
        type: string
      - default: 5
        description: Maximum number of suggestions
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SearchSuggestionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get search suggestions
      tags:
      - search
  /search/trending:
    get:
      consumes:
      - application/json
      description: Returns a list of popular searches across the platform
      parameters:
      - default: 10
        description: Maximum number of results
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TrendingSearchesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get trending searches across all users
      tags:
      - search
  /series/{id}/episodes:
    get:
      consumes:
      - application/json
      description: Retrieves all episodes across all seasons for a specific series
      parameters:
      - description: Series ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Episodes retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_types_Episode'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Series not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get all episodes for a series
      tags:
      - series
  /series/{id}/seasons:
    get:
      consumes:
      - application/json
      description: Retrieves all seasons for a specific series
      parameters:
      - description: Series ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Seasons retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_types_Season'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Series not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get seasons for a series
      tags:
      - series
  /series/actor/{actor}:
    get:
      consumes:
      - application/json
      description: Retrieves TV series featuring a specific actor
      parameters:
      - description: Actor name
        in: path
        name: actor
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by actor
      tags:
      - series
  /series/continue-watching:
    get:
      consumes:
      - application/json
      description: Retrieves series that are currently in progress (partially watched)
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of series to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_types_Series'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get series in progress
      tags:
      - series
  /series/creator/{creator}:
    get:
      consumes:
      - application/json
      description: Retrieves TV series by a specific creator/director
      parameters:
      - description: Creator name
        in: path
        name: creator
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by creator
      tags:
      - series
  /series/creator/{creatorId}:
    get:
      consumes:
      - application/json
      description: Retrieves series created by a specific creator
      parameters:
      - description: Creator ID
        in: path
        name: creatorId
        required: true
        type: integer
      - description: Maximum number of series to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_types_Series'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get series by creator
      tags:
      - series
  /series/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves TV series from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by genre
      tags:
      - series
  /series/latest/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added TV series
      parameters:
      - description: Number of series to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get latest series by added date
      tags:
      - series
  /series/network/{network}:
    get:
      consumes:
      - application/json
      description: Retrieves series from a specific TV network
      parameters:
      - description: Network name
        in: path
        name: network
        required: true
        type: string
      - description: Maximum number of series to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_types_Series'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get series by network
      tags:
      - series
  /series/next-up:
    get:
      consumes:
      - application/json
      description: Retrieves the next unwatched episodes for series in progress
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of episodes to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Episodes retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_types_Episode'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get next episodes to watch
      tags:
      - series
  /series/popular/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves most popular TV series
      parameters:
      - description: Number of series to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get popular series
      tags:
      - series
  /series/rating:
    get:
      consumes:
      - application/json
      description: Retrieves TV series with ratings within the specified range
      parameters:
      - description: Minimum rating
        in: query
        name: min
        required: true
        type: number
      - description: Maximum rating
        in: query
        name: max
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "400":
          description: Invalid rating parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by rating range
      tags:
      - series
  /series/recently-aired:
    get:
      consumes:
      - application/json
      description: Retrieves episodes that have recently aired based on their air
        date
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of episodes to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of days to look back (default 7)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Episodes retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_types_Episode'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      summary: Get recently aired episodes
      tags:
      - series
  /series/search:
    get:
      consumes:
      - application/json
      description: Search for TV series across all connected clients
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search series
      tags:
      - series
  /series/top-rated/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the highest rated TV series
      parameters:
      - description: Number of series to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get top rated series
      tags:
      - series
  /series/year/{year}:
    get:
      consumes:
      - application/json
      description: Retrieves TV series from all connected clients that were released
        in the specified year
      parameters:
      - description: Release year
        in: path
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "400":
          description: Invalid year
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by release year
      tags:
      - series
  /user-media:
    post:
      consumes:
      - application/json
      description: Creates a new media item owned by a user
      parameters:
      - description: Media item data with type, client info, and type-specific data
        in: body
        name: mediaItem
        required: true
        schema:
          $ref: '#/definitions/requests.MediaItemCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Media item created successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Create a new user-owned media item
      tags:
      - UserMediaItem
  /user-media-data/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific user media item data entry by its ID
      parameters:
      - description: User Media Item Data ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted user media item data
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Delete a specific user media item data entry
      tags:
      - UserMediaItemData
    get:
      consumes:
      - application/json
      description: Retrieves a specific user media item data entry by its ID
      parameters:
      - description: User Media Item Data ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user media item data
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get a specific user media item data entry by ID
      tags:
      - UserMediaItemData
  /user-media-data/check:
    get:
      consumes:
      - application/json
      description: Checks if a user has data for a specific media item
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Media Item ID
        in: query
        name: mediaItemId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully checked user media item data
          schema:
            $ref: '#/definitions/responses.APIResponse-bool'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Check if a user has data for a specific media item
      tags:
      - UserMediaItemData
  /user-media-data/client/{clientId}:
    get:
      consumes:
      - application/json
      description: Retrieves user media item data for synchronization with a client
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Since date (default 24 hours ago)
        in: query
        name: since
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved client media item data
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get user media item data for a client
      tags:
      - History
  /user-media-data/client/{clientId}/item/{clientItemId}:
    get:
      consumes:
      - application/json
      description: Retrieves user media item data for a specific user and client item
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Client Item ID
        in: path
        name: clientItemId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user media item data
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get user media item data by client ID
      tags:
      - History
  /user-media-data/client/{clientId}/item/{clientItemId}/play:
    post:
      consumes:
      - application/json
      description: Records a play event from a client
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Client Item ID
        in: path
        name: clientItemId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Media play information
        in: body
        name: mediaPlay
        required: true
        schema:
          $ref: '#/definitions/requests.UserMediaItemDataRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Play event recorded successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Record a client play event
      tags:
      - History
  /user-media-data/client/{clientId}/item/{clientItemId}/state:
    get:
      consumes:
      - application/json
      description: Retrieves the current playback state for a client item
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Client Item ID
        in: path
        name: clientItemId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved playback state
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get playback state for a client item
      tags:
      - History
    put:
      consumes:
      - application/json
      description: Updates the playback state for a client item
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Client Item ID
        in: path
        name: clientItemId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Playback state information
        in: body
        name: state
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Playback state updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Update playback state for a client item
      tags:
      - History
  /user-media-data/client/{clientId}/sync:
    post:
      consumes:
      - application/json
      description: Synchronizes user media item data from an external client
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Media item data to synchronize
        in: body
        name: items
        required: true
        schema:
          $ref: '#/definitions/requests.UserMediaItemDataSyncRequest'
      produces:
      - application/json
      responses:
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Synchronize user media item data from a client
      tags:
      - History
  /user-media-data/user-media:
    get:
      consumes:
      - application/json
      description: Retrieves user media item data for a specific user and media item
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Media Item ID
        in: query
        name: mediaItemId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user media item data
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserMediaItemData-suasor_clients_media_types_Movie'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get user media item data for a specific user and media item
      tags:
      - UserMediaItemData
  /user-media/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user-owned media item by its ID
      parameters:
      - description: User Media Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted user media item
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Delete a user-owned media item
      tags:
      - UserMediaItem
    put:
      consumes:
      - application/json
      description: Updates an existing media item owned by a user
      parameters:
      - description: Media Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated media item data
        in: body
        name: mediaItem
        required: true
        schema:
          $ref: '#/definitions/requests.MediaItemUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Media item updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Not authorized to update this media item
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Media item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Update an existing user-owned media item
      tags:
      - UserMediaItem
  /user/favorites:
    get:
      consumes:
      - application/json
      description: Retrieves the favorites for the authenticated user
      parameters:
      - description: Maximum number of lists to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Lists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Get favorites
      tags:
      - lists
  /user/lists:
    get:
      consumes:
      - application/json
      description: Retrieves all lists owned by the authenticated user
      parameters:
      - description: Maximum number of lists to return (default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Lists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Get user's lists
      tags:
      - lists
    post:
      consumes:
      - application/json
      description: Creates a new list for the authenticated user
      parameters:
      - description: List details
        in: body
        name: list
        required: true
        schema:
          $ref: '#/definitions/requests.ListCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: List created successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Create a new list
      tags:
      - lists
  /user/lists/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a list owned by the authenticated user
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List deleted successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: List not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Delete a list
      tags:
      - lists
    put:
      consumes:
      - application/json
      description: Updates an existing list owned by the authenticated user
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated list details
        in: body
        name: list
        required: true
        schema:
          $ref: '#/definitions/requests.ListUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: List updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: List not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Update a list
      tags:
      - lists
  /user/lists/{id}/reorder:
    post:
      consumes:
      - application/json
      description: Reorders the items in a list
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: Reorder request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ListReorderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: List reordered successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: List not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Reorder list items
      tags:
      - lists
  /user/lists/{id}/tracks:
    post:
      consumes:
      - application/json
      description: Adds a track to a list owned by the authenticated user
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: Track details
        in: body
        name: track
        required: true
        schema:
          $ref: '#/definitions/requests.ListAddTrackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Track added successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: List not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Add a track to a list
      tags:
      - lists
  /user/lists/{id}/tracks/{trackId}:
    delete:
      consumes:
      - application/json
      description: Removes a track from a list owned by the authenticated user
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: Track ID
        in: path
        name: trackId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Track removed successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: List not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Remove a track from a list
      tags:
      - lists
  /user/movies/{id}:
    patch:
      consumes:
      - application/json
      description: Updates user-specific data for a movie (favorite, watched status,
        rating, etc.)
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.UserMediaItemDataUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Movie updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Movie not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Update user data for a movie
      tags:
      - movies
  /user/movies/favorites:
    get:
      consumes:
      - application/json
      description: Retrieves movies that a user has marked as favorites
      parameters:
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get user favorite movies
      tags:
      - movies
  /user/movies/recommended:
    get:
      consumes:
      - application/json
      description: Retrieves movies recommended for the user based on their preferences
        and watch history
      parameters:
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Get recommended movies for user
      tags:
      - movies
  /user/movies/watched:
    get:
      consumes:
      - application/json
      description: Retrieves movies that a user has watched
      parameters:
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Get user watched movies
      tags:
      - movies
  /user/movies/watchlist:
    get:
      consumes:
      - application/json
      description: Retrieves movies that a user has added to their watchlist
      parameters:
      - description: Maximum number of movies to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Get movies in user watchlist
      tags:
      - movies
  /user/music/albums/favorites:
    get:
      consumes:
      - application/json
      description: Retrieves albums that a user has marked as favorites
      parameters:
      - description: Maximum number of albums to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Get user favorite albums
      tags:
      - music
  /user/music/artists/favorites:
    get:
      consumes:
      - application/json
      description: Retrieves artists that a user has marked as favorites
      parameters:
      - description: Maximum number of artists to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Artists retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Get user favorite artists
      tags:
      - music
  /user/music/tracks/{id}:
    patch:
      consumes:
      - application/json
      description: Updates user-specific data for a track (favorite, rating, etc.)
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.UserMediaItemDataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Track updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Track'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "404":
          description: Track not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Update user data for a track
      tags:
      - music
  /user/music/tracks/favorites:
    get:
      consumes:
      - application/json
      description: Retrieves tracks that a user has marked as favorites
      parameters:
      - description: Maximum number of tracks to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Get user favorite tracks
      tags:
      - music
  /user/music/tracks/recently-played:
    get:
      consumes:
      - application/json
      description: Retrieves tracks that a user has recently played
      parameters:
      - description: Maximum number of tracks to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-any'
      security:
      - BearerAuth: []
      summary: Get recently played tracks
      tags:
      - music
  /user/series/{id}:
    patch:
      consumes:
      - application/json
      description: Updates user-specific data for a series (favorite, watched status,
        rating, etc.)
      parameters:
      - description: Series ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserMediaItemData-types_Series'
      produces:
      - application/json
      responses:
        "200":
          description: Series updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Series'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Series not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Update user data for a series
      tags:
      - series
  /user/series/continue-watching:
    get:
      consumes:
      - application/json
      description: Retrieves series that are currently in progress (partially watched)
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of series to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series in progress
      tags:
      - series
  /user/series/favorites:
    get:
      parameters:
      - description: Maximum number of series to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: Series retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
  /user/series/next-up:
    get:
      consumes:
      - application/json
      description: Retrieves the next unwatched episodes for series in progress
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Maximum number of episodes to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Episodes retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Episode'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get next episodes to watch
      tags:
      - series
  /user/series/recently-watched:
    get:
      consumes:
      - application/json
      description: Retrieves the user's recently watched episodes
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Number of days to look back (default 7)
        in: query
        name: days
        type: integer
      - description: Maximum number of episodes to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Episodes retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Episode'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get recently watched episodes
      tags:
      - series
  /user/series/watched:
    get:
      consumes:
      - application/json
      description: Retrieves series that a user has watched
      parameters:
      - description: Maximum number of series to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get user watched series
      tags:
      - series
  /user/series/watchlist:
    get:
      consumes:
      - application/json
      description: Retrieves series that a user has added to their watchlist
      parameters:
      - description: Maximum number of series to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Series'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series in user watchlist
      tags:
      - series
schemes:
- http
swagger: "2.0"
