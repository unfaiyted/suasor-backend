basePath: /api/v1
definitions:
  errors.ErrorType:
    enum:
    - FAILED_CHECK
    - UNAUTHORIZED
    - NOT_FOUND
    - BAD_REQUEST
    - INTERNAL_ERROR
    - FORBIDDEN
    - CONFLICT
    - VALIDATION_ERROR
    - RATE_LIMITED
    - TIMEOUT
    - SERVICE_UNAVAILABLE
    - UNPROCESSABLE_ENTITY
    type: string
    x-enum-varnames:
    - ErrorTypeFailedCheck
    - ErrorTypeUnauthorized
    - ErrorTypeNotFound
    - ErrorTypeBadRequest
    - ErrorTypeInternalError
    - ErrorTypeForbidden
    - ErrorTypeConflict
    - ErrorTypeValidation
    - ErrorTypeRateLimited
    - ErrorTypeTimeout
    - ErrorTypeServiceUnavailable
    - ErrorTypeUnprocessableEntity
  models.Client-types_ClientConfig:
    properties:
      category:
        $ref: '#/definitions/types.ClientCategory'
      config:
        $ref: '#/definitions/models.ClientConfigWrapper-types_ClientConfig'
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      isEnabled:
        type: boolean
      name:
        type: string
      type:
        $ref: '#/definitions/types.ClientType'
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
  models.ClientConfigWrapper-types_ClientConfig:
    properties:
      data: {}
    type: object
  models.MediaItem-types_Album:
    properties:
      clientId:
        description: Reference to the media client
        type: integer
      clientType:
        allOf:
        - $ref: '#/definitions/types.MediaClientType'
        description: Type of client (plex, jellyfin, etc.)
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Album'
        description: Type-specific media data
      downloadUrl:
        type: string
      externalId:
        description: ID from external media client
        type: string
      id:
        description: Internal ID
        type: integer
      streamUrl:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
    type: object
  models.MediaItem-types_Artist:
    properties:
      clientId:
        description: Reference to the media client
        type: integer
      clientType:
        allOf:
        - $ref: '#/definitions/types.MediaClientType'
        description: Type of client (plex, jellyfin, etc.)
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Artist'
        description: Type-specific media data
      downloadUrl:
        type: string
      externalId:
        description: ID from external media client
        type: string
      id:
        description: Internal ID
        type: integer
      streamUrl:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
    type: object
  models.MediaItem-types_Playlist:
    properties:
      clientId:
        description: Reference to the media client
        type: integer
      clientType:
        allOf:
        - $ref: '#/definitions/types.MediaClientType'
        description: Type of client (plex, jellyfin, etc.)
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Playlist'
        description: Type-specific media data
      downloadUrl:
        type: string
      externalId:
        description: ID from external media client
        type: string
      id:
        description: Internal ID
        type: integer
      streamUrl:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
    type: object
  models.MediaItem-types_Track:
    properties:
      clientId:
        description: Reference to the media client
        type: integer
      clientType:
        allOf:
        - $ref: '#/definitions/types.MediaClientType'
        description: Type of client (plex, jellyfin, etc.)
      createdAt:
        type: string
      data:
        allOf:
        - $ref: '#/definitions/types.Track'
        description: Type-specific media data
      downloadUrl:
        type: string
      externalId:
        description: ID from external media client
        type: string
      id:
        description: Internal ID
        type: integer
      streamUrl:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MediaType'
        description: Type of media (movie, show, episode, etc.)
      updatedAt:
        type: string
    type: object
  models.UserConfig:
    description: User-specific configuration stored in the database
    properties:
      autoSyncRecommendations:
        example: true
        type: boolean
      contentLanguages:
        example: en,es,fr
        type: string
      createServerPlaylists:
        example: true
        type: boolean
      createdAt:
        type: string
      defaultCollection:
        example: AI Picks
        type: string
      defaultMediaServer:
        description: Sync Preferences
        enum:
        - emby
        - jellyfin
        - plex
        example: plex
        type: string
      deletedAt:
        type: string
      digestFrequency:
        enum:
        - never
        - daily
        - weekly
        example: weekly
        type: string
      emailNotifications:
        example: true
        type: boolean
      enableAnimations:
        example: true
        type: boolean
      enableExperimentalAI:
        example: false
        type: boolean
      excludedGenres:
        example: horror,war
        type: string
      id:
        type: integer
      includeUnratedContent:
        example: false
        type: boolean
      itemsPerPage:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      language:
        example: en-US
        type: string
      maxContentRating:
        example: R
        type: string
      maxRecommendations:
        example: 20
        maximum: 100
        minimum: 5
        type: integer
      minContentRating:
        example: PG-13
        type: string
      newContentWeight:
        example: 0.7
        maximum: 1
        minimum: 0
        type: number
      notificationsEnabled:
        description: Notification Settings
        example: true
        type: boolean
      notifyOnNewRecommendations:
        example: true
        type: boolean
      notifyOnSync:
        example: false
        type: boolean
      personalHistoryWeight:
        example: 0.8
        maximum: 1
        minimum: 0
        type: number
      popularityWeight:
        example: 0.3
        maximum: 1
        minimum: 0
        type: number
      preferredGenres:
        example: action,comedy,drama
        type: string
      recommendationFrequency:
        description: Recommendation Preferences
        enum:
        - daily
        - weekly
        - monthly
        example: daily
        type: string
      recommendationStrategy:
        description: AI Algorithm Settings
        enum:
        - similar
        - diverse
        - balanced
        example: diverse
        type: string
      syncFrequency:
        enum:
        - manual
        - daily
        - weekly
        example: daily
        type: string
      theme:
        description: UI Preferences
        enum:
        - light
        - dark
        - system
        example: dark
        type: string
      updatedAt:
        type: string
      userId:
        description: UserID links this config to a specific user
        type: integer
    required:
    - language
    type: object
  requests.AddMediaRequest:
    properties:
      metadataProfileID:
        description: For Lidarr
        type: integer
      monitored:
        type: boolean
      musicBrainzID:
        description: For Lidarr (music)
        type: string
      path:
        type: string
      qualityProfileID:
        type: integer
      searchForMedia:
        description: Whether to search for the media after adding
        type: boolean
      tags:
        items:
          type: integer
        type: array
      title:
        type: string
      tmdbid:
        description: For Radarr (movies)
        type: integer
      tvdbid:
        description: For Sonarr (TV shows)
        type: integer
      year:
        type: integer
    type: object
  requests.AiContentAnalysisRequest:
    description: Request for AI-powered content analysis
    properties:
      clientId:
        description: Client ID to use for the conversation
        type: integer
      clientType:
        description: |-
          Specific AI client type to use (claude, openai, ollama)
          example: claude
        type: string
      content:
        description: |-
          The content to analyze
          required: true
          example: This is a sample text that needs analysis for sentiment and themes.
        type: string
      contentType:
        description: |-
          Type of content being analyzed (text, movie, etc)
          required: true
          example: text
        type: string
      options:
        additionalProperties: {}
        description: |-
          Optional analysis options
          example: {"includeThemes": true, "includeSentiment": true}
        type: object
    required:
    - content
    - contentType
    type: object
  requests.AiRecommendationRequest:
    description: Request for AI-powered content recommendations
    properties:
      clientId:
        description: Client ID to use for the conversation
        type: integer
      clientType:
        description: |-
          Specific AI client type to use (claude, openai, ollama)
          example: claude
        type: string
      contentType:
        description: |-
          Type of content to recommend (movie, tv, music, etc)
          required: true
          example: movie
        type: string
      count:
        description: |-
          Number of recommendations to return
          example: 5
        type: integer
      filters:
        additionalProperties: {}
        description: |-
          Optional filters to apply to recommendations
          example: {"genre": "sci-fi", "year": "2020-2023"}
        type: object
    required:
    - contentType
    type: object
  requests.ChangePasswordRequest:
    description: Request payload for changing user password
    properties:
      currentPassword:
        description: |-
          CurrentPassword is the user's existing password for verification
          @Description User's current password for verification
          @Example "oldpassword123"
        example: oldpassword123
        type: string
      newPassword:
        description: |-
          NewPassword is the password to change to
          @Description New password to set for the user
          @Example "newpassword456"
        example: newpassword456
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  requests.ChangeRoleRequest:
    description: Request payload for changing user role
    properties:
      role:
        description: |-
          Role is the new role to assign to the user
          @Description New role to assign to the user
          @Enum "user" "admin"
          @Example "admin"
        enum:
        - user
        - admin
        example: admin
        type: string
    required:
    - role
    type: object
  requests.ConversationMessageRequest:
    description: Request to send a message in an existing AI conversation
    properties:
      clientId:
        description: Client ID to use for the conversation
        type: integer
      context:
        additionalProperties: {}
        description: |-
          Optional context information for this message
          example: {"includeRecommendations": true, "maxResults": 3}
        type: object
      conversationId:
        description: |-
          The conversation ID from a previous StartConversation call
          required: true
          example: conv-123-abcdef
        type: string
      message:
        description: |-
          The user's message to the AI
          required: true
          example: I'm looking for sci-fi movies similar to Interstellar
        type: string
    required:
    - conversationId
    - message
    type: object
  requests.CreateTagRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  requests.ExecuteCommandRequest:
    properties:
      command:
        type: string
      parameters:
        additionalProperties: true
        type: object
    required:
    - command
    type: object
  requests.LoginRequest:
    description: Request payload for user login
    properties:
      email:
        description: |-
          Email is the user's email address
          @Description User's email address
          @Example "user@example.com"
        example: user@example.com
        type: string
      password:
        description: |-
          Password is the user's chosen password
          @Description User's password (plain text in request)
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  requests.LogoutRequest:
    description: Request payload for user logout
    properties:
      refreshToken:
        description: |-
          RefreshToken identifies the session to terminate
          @Description JWT refresh token to invalidate
        type: string
    required:
    - refreshToken
    type: object
  requests.ProfileRequest:
    description: Request payload for updating user profile
    properties:
      email:
        description: |-
          Email is the new email address
          @Description Updated email address for the user
          @Example "newemail@example.com"
        example: newemail@example.com
        type: string
      username:
        description: |-
          Username is the new username
          @Description Updated username for the user
          @Example "newusername"
        example: newusername
        type: string
    type: object
  requests.RefreshTokenRequest:
    description: Request payload for refreshing access tokens
    properties:
      refreshToken:
        description: |-
          RefreshToken is used to generate a new access token
          @Description JWT refresh token to use for generating new access token
        type: string
    required:
    - refreshToken
    type: object
  requests.RegisterRequest:
    description: Request payload for user registration
    properties:
      email:
        description: |-
          Email is the user's email address
          @Description User's email address
          @Example "user@example.com"
        example: user@example.com
        type: string
      password:
        description: |-
          Password is the user's chosen password
          @Description User's password (plain text in request)
        minLength: 8
        type: string
      username:
        description: |-
          Username is the user's desired username
          @Description User's chosen username
          @Example "johndoe"
        example: johndoe
        type: string
    required:
    - email
    - password
    - username
    type: object
  requests.StartConversationRequest:
    description: Request to start a new AI-powered conversation for recommendations
    properties:
      clientId:
        description: Client ID to use for the conversation
        type: integer
      contentType:
        description: |-
          Type of content to discuss (movie, tv, music, etc)
          required: true
          example: movie
        type: string
      preferences:
        additionalProperties: {}
        description: |-
          Optional user preferences to initialize the conversation
          example: {"favoriteGenres": ["sci-fi", "thriller"], "recentlyWatched": ["Inception", "Tenet"]}
        type: object
      systemInstructions:
        description: |-
          Optional custom system instructions
          example: You are a helpful movie recommendation assistant
        type: string
    required:
    - contentType
    type: object
  requests.SwaggerClientRequest:
    properties:
      client: {}
      clientID:
        type: integer
      clientType:
        $ref: '#/definitions/types.ClientType'
      isEnabled:
        type: boolean
      name:
        type: string
    required:
    - clientType
    - name
    type: object
  requests.UpdateMediaRequest:
    properties:
      metadataProfileID:
        description: For Lidarr
        type: integer
      monitored:
        type: boolean
      path:
        type: string
      qualityProfileID:
        type: integer
      tags:
        items:
          type: integer
        type: array
    type: object
  responses.APIResponse-any:
    properties:
      data: {}
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_Client-types_ClientConfig:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Client-types_ClientConfig'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Album:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Album'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Artist:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Artist'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Playlist:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Playlist'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_models_MediaItem-types_Track:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaItem-types_Track'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-array_responses_MediaItemResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/responses.MediaItemResponse'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_Client-types_ClientConfig:
    properties:
      data:
        $ref: '#/definitions/models.Client-types_ClientConfig'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_Album:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_Album'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_Artist:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_Artist'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_Playlist:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_Playlist'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_MediaItem-types_Track:
    properties:
      data:
        $ref: '#/definitions/models.MediaItem-types_Track'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-models_UserConfig:
    properties:
      data:
        $ref: '#/definitions/models.UserConfig'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_AiContentAnalysisResponse:
    properties:
      data:
        $ref: '#/definitions/responses.AiContentAnalysisResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_AiRecommendationResponse:
    properties:
      data:
        $ref: '#/definitions/responses.AiRecommendationResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_AuthDataResponse:
    properties:
      data:
        $ref: '#/definitions/responses.AuthDataResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_ConversationMessageResponse:
    properties:
      data:
        $ref: '#/definitions/responses.ConversationMessageResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_ConversationResponse:
    properties:
      data:
        $ref: '#/definitions/responses.ConversationResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_EmptyResponse:
    properties:
      data:
        $ref: '#/definitions/responses.EmptyResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_MediaItemResponse:
    properties:
      data:
        $ref: '#/definitions/responses.MediaItemResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_TestConnectionResponse:
    properties:
      data:
        $ref: '#/definitions/responses.TestConnectionResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-responses_UserResponse:
    properties:
      data:
        $ref: '#/definitions/responses.UserResponse'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-string:
    properties:
      data:
        type: string
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.APIResponse-types_Configuration:
    properties:
      data:
        $ref: '#/definitions/types.Configuration'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.AiContentAnalysisResponse:
    description: Response containing AI-powered content analysis
    properties:
      analysis:
        additionalProperties: true
        description: Analysis results
        type: object
    type: object
  responses.AiRecommendationResponse:
    description: Response containing AI-powered content recommendations
    properties:
      items:
        description: List of recommended items
        items:
          additionalProperties: true
          type: object
        type: array
    type: object
  responses.AuthDataResponse:
    description: Authentication data returned to client after successful authentication
    properties:
      accessToken:
        description: |-
          AccessToken is the JWT token for API access
          @Description JWT access token for authenticated requests
          @Example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type: string
      expiresAt:
        description: |-
          ExpiresAt indicates when the access token expires
          @Description UNIX timestamp when the access token expires
          @Example 1674140400
        type: integer
      refreshToken:
        description: |-
          RefreshToken is used to get new access tokens
          @Description JWT refresh token for obtaining new access tokens
          @Example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type: string
      user:
        allOf:
        - $ref: '#/definitions/responses.UserResponse'
        description: |-
          User contains the user profile information
          @Description User profile data
    type: object
  responses.BasicErrorResponse:
    properties:
      details:
        $ref: '#/definitions/responses.ErrorDetails'
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      statusCode:
        example: 201
        type: integer
      timestamp:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/errors.ErrorType'
        example: FAILED_CHECK
    type: object
  responses.ClientResponse:
    properties:
      client:
        description: Can be any of the config types
      clientType:
        allOf:
        - $ref: '#/definitions/types.MediaClientType'
        example: plex
      createdAt:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: My Plex Server
        type: string
      updatedAt:
        example: "2023-01-01T12:00:00Z"
        type: string
      userId:
        example: 123
        type: integer
    type: object
  responses.ClientsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/responses.ClientResponse'
        type: array
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.ConversationMessageResponse:
    description: Response to a message in an AI conversation
    properties:
      context:
        additionalProperties: true
        description: |-
          Additional message context
          example: {"sentiment": "positive", "topicShift": false}
        type: object
      message:
        description: |-
          The AI's response to the user message
          example: "Based on your interest in Interstellar, I'd recommend checking out these sci-fi movies with similar themes of space exploration and time: 1. Arrival (2016), 2. The Martian (2015), 3. Ad Astra (2019). Would you like more recommendations or details about any of these?"
        type: string
      recommendations:
        description: |-
          Recommendations included in the response, if any
          example: [{"title": "Arrival", "year": 2016, "genre": "Sci-Fi"}, {"title": "The Martian", "year": 2015, "genre": "Sci-Fi"}]
        items:
          additionalProperties: true
          type: object
        type: array
    type: object
  responses.ConversationResponse:
    description: Response containing conversation details
    properties:
      context:
        additionalProperties: true
        description: |-
          Additional information about the conversation context
          example: {"contentType": "movie", "session": "active"}
        type: object
      conversationId:
        description: |-
          Unique ID for the conversation
          example: conv-123-abcdef
        type: string
      welcome:
        description: |-
          Initial greeting or message from the AI
          example: "Hi there! I'm your movie recommendation assistant. What kind of movies do you enjoy watching?"
        type: string
    type: object
  responses.EmptyAPIResponse:
    properties:
      data: {}
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  responses.EmptyResponse:
    properties:
      success:
        type: boolean
    type: object
  responses.ErrorDetails:
    properties:
      error:
        type: string
      metadata:
        additionalProperties: true
        type: object
      stackInfo:
        type: string
    type: object
  responses.ErrorResponse-error:
    properties:
      details: {}
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      statusCode:
        example: 201
        type: integer
      timestamp:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/errors.ErrorType'
        example: FAILED_CHECK
    type: object
  responses.ErrorResponse-responses_ErrorDetails:
    properties:
      details:
        $ref: '#/definitions/responses.ErrorDetails'
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      statusCode:
        example: 201
        type: integer
      timestamp:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/errors.ErrorType'
        example: FAILED_CHECK
    type: object
  responses.HealthResponse:
    properties:
      application:
        example: true
        type: boolean
      database:
        example: true
        type: boolean
      status:
        description: Overall status of the system
        enum:
        - up
        - down
        - degraded
        example: up
        type: string
    required:
    - application
    - database
    - status
    type: object
  responses.MediaItemResponse:
    properties:
      clientId:
        type: integer
      clientType:
        type: string
      createdAt:
        type: string
      data: {}
      externalId:
        type: string
      id:
        type: integer
      type:
        $ref: '#/definitions/types.MediaType'
      updatedAt:
        type: string
    type: object
  responses.TestConnectionResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
      version:
        type: string
    type: object
  responses.UserResponse:
    description: User information returned in API responses
    properties:
      email:
        description: |-
          Email is the unique email address of the user
          @Description User's email address
          @Example "user@example.com"
        type: string
      id:
        description: |-
          ID is the unique identifier for the user
          @Description User's unique identifier
          @Example 1
        type: integer
      role:
        description: |-
          Role defines the user's permission level
          @Description User's role in the system
          @Enum "user" "admin"
          @Example "user"
        type: string
      username:
        description: |-
          Username is the display name chosen by the user
          @Description User's chosen username
          @Example "johndoe"
        type: string
    type: object
  suasor_client_media_types.ExternalID:
    properties:
      id:
        description: The actual ID
        type: string
      source:
        description: e.g., "tmdb", "imdb", "trakt", "tvdb"
        type: string
    type: object
  suasor_client_media_types.Rating:
    properties:
      source:
        description: e.g., "tmdb", "imdb", "trakt", "tvdb"
        type: string
      value:
        description: The actual ID
        type: number
      votes:
        description: For sources that might have how many people voted on an item
        type: integer
    type: object
  types.AIClientType:
    enum:
    - claude
    - openai
    - ollama
    - unknown
    type: string
    x-enum-varnames:
    - AIClientTypeClaude
    - AIClientTypeOpenAI
    - AIClientTypeOllama
    - AIClientTypeUnknown
  types.Album:
    properties:
      artistID:
        type: string
      artistName:
        type: string
      details:
        $ref: '#/definitions/types.MediaDetails'
      trackCount:
        type: integer
    type: object
  types.Artist:
    properties:
      albumCount:
        type: integer
      albumIDs:
        items:
          type: string
        type: array
      biography:
        type: string
      details:
        $ref: '#/definitions/types.MediaDetails'
      similarArtists:
        items:
          type: string
        type: array
    type: object
  types.Artwork:
    properties:
      background:
        type: string
      banner:
        type: string
      logo:
        type: string
      poster:
        type: string
      thumbnail:
        type: string
    type: object
  types.AutomationClientType:
    enum:
    - radarr
    - sonarr
    - lidarr
    - unknown
    type: string
    x-enum-varnames:
    - AutomationClientTypeRadarr
    - AutomationClientTypeSonarr
    - AutomationClientTypeLidarr
    - AutomationClientTypeUnknown
  types.ClaudeConfig:
    description: Claude media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AIClientType'
      maxContextTokens:
        example: 1000
        type: integer
      maxTokens:
        example: 100
        type: integer
      model:
        example: claude-2
        type: string
      temperature:
        example: 0.5
        type: number
      type:
        $ref: '#/definitions/types.ClientType'
    type: object
  types.ClientCategory:
    enum:
    - automation
    - media
    - ai
    - unknown
    type: string
    x-enum-varnames:
    - ClientCategoryAutomation
    - ClientCategoryMedia
    - ClientCategoryAI
    - ClientCategoryUnknown
  types.ClientType:
    enum:
    - emby
    - jellyfin
    - plex
    - subsonic
    - radarr
    - sonarr
    - lidarr
    - unknown
    - claude
    - openai
    - ollama
    type: string
    x-enum-varnames:
    - ClientTypeEmby
    - ClientTypeJellyfin
    - ClientTypePlex
    - ClientTypeSubsonic
    - ClientTypeRadarr
    - ClientTypeSonarr
    - ClientTypeLidarr
    - ClientTypeUnknown
    - ClientTypeClaude
    - ClientTypeOpenAI
    - ClientTypeOllama
  types.Configuration:
    description: Complete application configuration settings
    properties:
      app:
        description: App contains core application settings
        properties:
          apiBaseURL:
            example: http://localhost:8080
            type: string
          appURL:
            example: http://localhost:3000
            type: string
          environment:
            enum:
            - development
            - staging
            - production
            example: development
            type: string
          logLevel:
            enum:
            - debug
            - info
            - warn
            - error
            example: info
            type: string
          maxPageSize:
            example: 100
            maximum: 1000
            minimum: 1
            type: integer
          name:
            example: suasor
            type: string
        required:
        - apiBaseURL
        - appURL
        - environment
        - logLevel
        - maxPageSize
        - name
        type: object
      auth:
        description: Auth contains authentication settings
        properties:
          accessExpiryMinutes:
            description: New fields to add
            example: 15
            minimum: 1
            type: integer
          allowedOrigins:
            example:
            - http://localhost:3000
            items:
              type: string
            type: array
          enable2FA:
            example: false
            type: boolean
          enableLocal:
            example: true
            type: boolean
          jwtSecret:
            example: your-secret-key
            type: string
          refreshExpiryDays:
            example: 7
            minimum: 1
            type: integer
          sessionTimeout:
            example: 60
            minimum: 1
            type: integer
          tokenAudience:
            example: suasor-client
            type: string
          tokenExpiration:
            example: 24
            minimum: 1
            type: integer
          tokenIssuer:
            example: suasor-api
            type: string
        required:
        - accessExpiryMinutes
        - jwtSecret
        - refreshExpiryDays
        - sessionTimeout
        - tokenAudience
        - tokenExpiration
        - tokenIssuer
        type: object
      db:
        description: Database contains database connection settings
        properties:
          host:
            example: localhost
            type: string
          maxConns:
            example: 20
            minimum: 1
            type: integer
          name:
            example: suasor
            type: string
          password:
            example: yourpassword
            type: string
          port:
            example: "5432"
            type: string
          timeout:
            example: 30
            minimum: 1
            type: integer
          user:
            example: postgres_user
            type: string
        required:
        - host
        - maxConns
        - name
        - password
        - port
        - timeout
        - user
        type: object
      http:
        description: HTTP contains HTTP server configuration
        properties:
          enableSSL:
            example: false
            type: boolean
          idleTimeout:
            example: 60
            minimum: 1
            type: integer
          port:
            example: "8080"
            type: string
          proxyEnabled:
            example: false
            type: boolean
          proxyURL:
            example: http://proxy:8080
            type: string
          rateLimitEnabled:
            example: true
            type: boolean
          readTimeout:
            example: 30
            minimum: 1
            type: integer
          requestsPerMin:
            example: 100
            minimum: 0
            type: integer
          sslCert:
            example: /path/to/cert.pem
            type: string
          sslKey:
            example: /path/to/key.pem
            type: string
          writeTimeout:
            example: 30
            minimum: 1
            type: integer
        required:
        - idleTimeout
        - port
        - readTimeout
        - writeTimeout
        type: object
    type: object
  types.EmbyConfig:
    description: Emby media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.MediaClientType'
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
      userID:
        example: your-internal-user-id
        type: string
      username:
        example: admin
        type: string
    type: object
  types.JellyfinConfig:
    description: Jellyfin media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.MediaClientType'
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
      userID:
        example: your-internal-user-id
        type: string
      username:
        example: admin
        type: string
    type: object
  types.LidarrConfig:
    description: Jellyfin media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AutomationClientType'
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
    type: object
  types.MediaClientType:
    enum:
    - plex
    - jellyfin
    - emby
    - subsonic
    - unknown
    type: string
    x-enum-varnames:
    - MediaClientTypePlex
    - MediaClientTypeJellyfin
    - MediaClientTypeEmby
    - MediaClientTypeSubsonic
    - MediaClientTypeUnknown
  types.MediaDetails:
    properties:
      addedAt:
        type: string
      artwork:
        $ref: '#/definitions/types.Artwork'
      contentRating:
        type: string
      description:
        type: string
      durationSeconds:
        description: Changed from time.Duration to int64 for Swagger compatibility
        type: integer
      externalIDs:
        items:
          $ref: '#/definitions/suasor_client_media_types.ExternalID'
        type: array
      genres:
        items:
          type: string
        type: array
      isFavorite:
        type: boolean
      ratings:
        items:
          $ref: '#/definitions/suasor_client_media_types.Rating'
        type: array
      releaseDate:
        type: string
      releaseYear:
        type: integer
      studios:
        items:
          type: string
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updatedAt:
        type: string
      userRating:
        type: number
    type: object
  types.MediaType:
    enum:
    - movie
    - series
    - season
    - episode
    - artist
    - album
    - track
    - playlist
    - collection
    type: string
    x-enum-varnames:
    - MediaTypeMovie
    - MediaTypeSeries
    - MediaTypeSeason
    - MediaTypeEpisode
    - MediaTypeArtist
    - MediaTypeAlbum
    - MediaTypeTrack
    - MediaTypePlaylist
    - MediaTypeCollection
  types.OllamaConfig:
    description: Claude media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AIClientType'
      maxContextTokens:
        example: 1000
        type: integer
      maxTokens:
        example: 100
        type: integer
      model:
        example: claude-2
        type: string
      temperature:
        example: 0.5
        type: number
      type:
        $ref: '#/definitions/types.ClientType'
    type: object
  types.OpenAIConfig:
    description: Claude media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AIClientType'
      maxContextTokens:
        example: 1000
        type: integer
      maxTokens:
        example: 100
        type: integer
      model:
        example: claude-2
        type: string
      temperature:
        example: 0.5
        type: number
      type:
        $ref: '#/definitions/types.ClientType'
    type: object
  types.Playlist:
    properties:
      details:
        $ref: '#/definitions/types.MediaDetails'
      isPublic:
        type: boolean
      itemCount:
        type: integer
      itemIDs:
        items:
          type: string
        type: array
      owner:
        type: string
    type: object
  types.PlexConfig:
    description: Plex media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.MediaClientType'
      ssl:
        example: false
        type: boolean
      token:
        example: your-plex-token
        type: string
      type:
        $ref: '#/definitions/types.ClientType'
    type: object
  types.RadarrConfig:
    description: Emby media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AutomationClientType'
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
    type: object
  types.SonarrConfig:
    description: Emby media server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.AutomationClientType'
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
    type: object
  types.SubsonicConfig:
    description: Supersonic music server configuration
    properties:
      apiKey:
        example: your-api-key
        type: string
      baseURL:
        example: http://localhost:8096
        type: string
      category:
        $ref: '#/definitions/types.ClientCategory'
      clientType:
        $ref: '#/definitions/types.MediaClientType'
      password:
        example: your-password
        type: string
      ssl:
        example: false
        type: boolean
      type:
        $ref: '#/definitions/types.ClientType'
      username:
        example: admin
        type: string
    type: object
  types.Track:
    properties:
      albumID:
        type: string
      albumName:
        type: string
      albumTitle:
        type: string
      artistID:
        type: string
      artistName:
        type: string
      composer:
        type: string
      details:
        $ref: '#/definitions/types.MediaDetails'
      discNumber:
        type: integer
      lyrics:
        type: string
      trackNumber:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: Dane Miller
    url: http://www.swagger.io/support
  description: API Server for Suasor
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Suasor API
  version: "1.0"
paths:
  /admin/client/:clientType/:clientId/test:
    get:
      consumes:
      - application/json
      description: Tests the connection to a client using the provided configuration
      parameters:
      - description: Client type
        in: path
        name: clientType
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Connection test result
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_TestConnectionResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Test client connection
      tags:
      - clients
  /ai/analyze:
    post:
      consumes:
      - application/json
      description: Use AI to analyze provided content
      parameters:
      - description: Content analysis request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AiContentAnalysisRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Analysis response
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AiContentAnalysisResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Analyze content with AI
      tags:
      - ai
  /ai/conversation/message:
    post:
      consumes:
      - application/json
      description: Continue a conversation with the AI by sending a new message
      parameters:
      - description: Message request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ConversationMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: AI response
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_ConversationMessageResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Conversation not owned by user
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Send a message in an existing AI conversation
      tags:
      - ai
  /ai/conversation/start:
    post:
      consumes:
      - application/json
      description: Initialize a new conversational session with the AI for personalized
        recommendations
      parameters:
      - description: Conversation initialization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.StartConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Conversation started
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_ConversationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Start a new AI conversation for recommendations
      tags:
      - ai
  /ai/recommendations:
    post:
      consumes:
      - application/json
      description: Get content recommendations from an AI service
      parameters:
      - description: Recommendation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AiRecommendationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Recommendation response
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AiRecommendationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get AI-powered content recommendations
      tags:
      - ai
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password
      parameters:
      - description: User login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated user
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AuthDataResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Invalid credentials or inactive account
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Log in a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates the refresh token, effectively logging the user out
      parameters:
      - description: Logout data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Log out a user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed token
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AuthDataResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email, username, and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_AuthDataResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "409":
          description: Email or username already in use
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Register a new user
      tags:
      - auth
  /auth/validate:
    get:
      description: Validates the user's session token and returns current user profile
      produces:
      - application/json
      responses:
        "200":
          description: Valid session with user details
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "401":
          description: Invalid or expired session token
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Validate user session
      tags:
      - auth
  /client/:clientType:
    get:
      consumes:
      - application/json
      description: Retrieves all client configurations for the user
      produces:
      - application/json
      responses:
        "200":
          description: Clients retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_Client-types_ClientConfig'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get all clients
      tags:
      - clients
    post:
      consumes:
      - application/json
      description: Creates a new client configuration
      parameters:
      - description: client data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.SwaggerClientRequest'
      produces:
      - application/json
      responses:
        "201":
          description: client created
          schema:
            $ref: '#/definitions/responses.APIResponse-models_Client-types_ClientConfig'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Create a new client
      tags:
      - clients
  /clients:
    get:
      consumes:
      - application/json
      description: Retrieves all configured clients across different types for the
        user
      produces:
      - application/json
      responses:
        "200":
          description: All user clients with various config types
          schema:
            $ref: '#/definitions/responses.ClientsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.BasicErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.BasicErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all clients
      tags:
      - clients
  /clients/:clientType/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a client configuration
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: client deleted
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_EmptyResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: Client not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Delete client
      tags:
      - clients
  /clients/automation/{clientID}/calendar:
    get:
      consumes:
      - application/json
      description: Retrieves calendar events from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Calendar events retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID or dates
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get calendar from automation client
      tags:
      - automation
  /clients/automation/{clientID}/command:
    post:
      consumes:
      - application/json
      description: Executes a command on the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Command details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ExecuteCommandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Command executed
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Execute command on automation client
      tags:
      - automation
  /clients/automation/{clientID}/library:
    get:
      consumes:
      - application/json
      description: Retrieves all library items from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort by
        in: query
        name: sortBy
        type: string
      - description: Sort order
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Library items retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get library items from automation client
      tags:
      - automation
  /clients/automation/{clientID}/media:
    post:
      consumes:
      - application/json
      description: Adds a new media item to the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Media details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AddMediaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Media added
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Add media to automation client
      tags:
      - automation
  /clients/automation/{clientID}/media/{mediaID}:
    delete:
      consumes:
      - application/json
      description: Deletes a media item from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Media ID
        in: path
        name: mediaID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media deleted
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client or media ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Delete media from automation client
      tags:
      - automation
    get:
      consumes:
      - application/json
      description: Retrieves a specific media item from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Media ID
        in: path
        name: mediaID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client or media ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get media by ID from automation client
      tags:
      - automation
    put:
      consumes:
      - application/json
      description: Updates an existing media item in the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Media ID
        in: path
        name: mediaID
        required: true
        type: string
      - description: Media details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateMediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Media updated
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Update media in automation client
      tags:
      - automation
  /clients/automation/{clientID}/profiles/metadata:
    get:
      consumes:
      - application/json
      description: Retrieves all metadata profiles from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Metadata profiles retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get metadata profiles from automation client
      tags:
      - automation
  /clients/automation/{clientID}/profiles/quality:
    get:
      consumes:
      - application/json
      description: Retrieves all quality profiles from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Quality profiles retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get quality profiles from automation client
      tags:
      - automation
  /clients/automation/{clientID}/search:
    get:
      consumes:
      - application/json
      description: Searches for media items in the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID or query
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search media in automation client
      tags:
      - automation
  /clients/automation/{clientID}/status:
    get:
      consumes:
      - application/json
      description: Retrieves system status information from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: System status retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get automation client system status
      tags:
      - automation
  /clients/automation/{clientID}/tags:
    get:
      consumes:
      - application/json
      description: Retrieves all tags from the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tags retrieved
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get tags from automation client
      tags:
      - automation
    post:
      consumes:
      - application/json
      description: Creates a new tag in the automation client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Tag details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Tag created
          schema:
            $ref: '#/definitions/responses.EmptyAPIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Create tag in automation client
      tags:
      - automation
  /clients/media/{clientID}/collections:
    get:
      consumes:
      - application/json
      description: Retrieves all collections from the client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Maximum number of collections to return
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Collections retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get all collections
      tags:
      - collections
  /clients/media/{clientID}/collections/{collectionID}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific collection from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Collection ID
        in: path
        name: collectionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Collection retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_MediaItemResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get collection by ID
      tags:
      - collections
  /clients/media/{clientID}/movies/{movieID}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific movie from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Movie ID
        in: path
        name: movieID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movie retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_MediaItemResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movie by ID
      tags:
      - movies
  /clients/media/{clientID}/music/albums/{albumID}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific music album from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Album ID
        in: path
        name: albumID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Album retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Album'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get album by ID
      tags:
      - music
  /clients/media/{clientID}/music/albums/{albumID}/tracks:
    get:
      consumes:
      - application/json
      description: Retrieves all tracks for a specific album
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Album ID
        in: path
        name: albumID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get tracks by album
      tags:
      - music
  /clients/media/{clientID}/music/artists/{artistID}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific music artist from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Artist ID
        in: path
        name: artistID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Artist retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Artist'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get artist by ID
      tags:
      - music
  /clients/media/{clientID}/music/artists/{artistID}/albums:
    get:
      consumes:
      - application/json
      description: Retrieves all albums for a specific artist
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Artist ID
        in: path
        name: artistID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get albums by artist
      tags:
      - music
  /clients/media/{clientID}/music/tracks/{trackID}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific music track from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Track ID
        in: path
        name: trackID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Track retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Track'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get track by ID
      tags:
      - music
  /clients/media/{clientID}/playlists:
    get:
      consumes:
      - application/json
      description: Retrieves all playlists from the client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Maximum number of playlists to return
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Playlists retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get all playlists
      tags:
      - playlists
    post:
      consumes:
      - application/json
      description: Creates a new playlist on the specified client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Playlist creation data
        in: body
        name: playlist
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Playlist created
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Create a new playlist
      tags:
      - playlists
  /clients/media/{clientID}/playlists/{playlistID}:
    delete:
      consumes:
      - application/json
      description: Deletes a playlist from the specified client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Playlist ID
        in: path
        name: playlistID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Playlist deleted
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Delete a playlist
      tags:
      - playlists
    get:
      consumes:
      - application/json
      description: Retrieves a specific playlist from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Playlist ID
        in: path
        name: playlistID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Playlist retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get playlist by ID
      tags:
      - playlists
    put:
      consumes:
      - application/json
      description: Updates an existing playlist on the specified client
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Playlist ID
        in: path
        name: playlistID
        required: true
        type: string
      - description: Playlist update data
        in: body
        name: playlist
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Playlist updated
          schema:
            $ref: '#/definitions/responses.APIResponse-models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Update a playlist
      tags:
      - playlists
  /clients/media/{clientID}/playlists/{playlistID}/items:
    post:
      consumes:
      - application/json
      description: Adds a media item to an existing playlist
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Playlist ID
        in: path
        name: playlistID
        required: true
        type: string
      - description: Item to add
        in: body
        name: item
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Item added to playlist
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Add an item to a playlist
      tags:
      - playlists
  /clients/media/{clientID}/playlists/{playlistID}/items/{itemID}:
    delete:
      consumes:
      - application/json
      description: Removes a media item from an existing playlist
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Playlist ID
        in: path
        name: playlistID
        required: true
        type: string
      - description: Item ID to remove
        in: path
        name: itemID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item removed from playlist
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Remove an item from a playlist
      tags:
      - playlists
  /clients/media/{clientID}/series/{seriesID}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific TV series from the client by ID
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Series ID
        in: path
        name: seriesID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_MediaItemResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by ID
      tags:
      - series
  /clients/media/{clientID}/series/{seriesID}/seasons:
    get:
      consumes:
      - application/json
      description: Retrieves all seasons for a specific TV series
      parameters:
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Series ID
        in: path
        name: seriesID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Seasons retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "400":
          description: Invalid client ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get seasons for a series
      tags:
      - series
  /config:
    get:
      consumes:
      - application/json
      description: Returns the current system configuration
      produces:
      - application/json
      responses:
        "200":
          description: Configuration retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-types_Configuration'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get current configuration
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Updates the system-wide application configuration (admin only)
      parameters:
      - description: Configuration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.Configuration'
      produces:
      - application/json
      responses:
        "200":
          description: Configuration updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Update application configuration
      tags:
      - config
  /config/file:
    get:
      consumes:
      - application/json
      description: Returns the file-based system configuration (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: File configuration retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-types_Configuration'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get file-based configuration
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Saves the configuration to file only (admin only)
      parameters:
      - description: Configuration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.Configuration'
      produces:
      - application/json
      responses:
        "200":
          description: Configuration saved to file successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Save configuration to file
      tags:
      - config
  /config/reset:
    post:
      consumes:
      - application/json
      description: Resets the system configuration to default values (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Configuration reset successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - admin access required
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Reset configuration to defaults
      tags:
      - config
  /config/user:
    get:
      consumes:
      - application/json
      description: Returns the configuration for the current user
      produces:
      - application/json
      responses:
        "200":
          description: User configuration retrieved successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-models_UserConfig'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Get user configuration
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Updates the configuration for the current user
      parameters:
      - description: User configuration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserConfig'
      produces:
      - application/json
      responses:
        "200":
          description: User configuration updated successfully
          schema:
            $ref: '#/definitions/responses.APIResponse-any'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Update user configuration
      tags:
      - config
  /docs/client-types:
    get:
      consumes:
      - application/json
      description: This endpoint doesn't exist but serves as a reference for all client
        config types
      produces:
      - application/json
      responses:
        "200":
          description: Ollama client config
          schema:
            $ref: '#/definitions/types.OllamaConfig'
      summary: Reference for all client config types
      tags:
      - swagger-reference
  /health:
    get:
      description: returns JSON object with health statuses.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: checks app and database health
      tags:
      - health
  /movies/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by genre
      tags:
      - movies
  /movies/year/{year}:
    get:
      consumes:
      - application/json
      description: Retrieves movies from all connected clients that were released
        in the specified year
      parameters:
      - description: Release year
        in: path
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "400":
          description: Invalid year
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get movies by release year
      tags:
      - movies
  /music/albums/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves albums from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get albums by genre
      tags:
      - music
  /music/albums/latest/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added albums
      parameters:
      - description: Number of albums to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get latest albums by added date
      tags:
      - music
  /music/albums/popular/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves most popular albums
      parameters:
      - description: Number of albums to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get popular albums
      tags:
      - music
  /music/albums/year/{year}:
    get:
      consumes:
      - application/json
      description: Retrieves albums from all connected clients that were released
        in the specified year
      parameters:
      - description: Release year
        in: path
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Album'
        "400":
          description: Invalid year
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get albums by release year
      tags:
      - music
  /music/artists/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves artists from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Artists retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get artists by genre
      tags:
      - music
  /music/artists/popular/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves most popular artists
      parameters:
      - description: Number of artists to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Artists retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get popular artists
      tags:
      - music
  /music/search:
    get:
      consumes:
      - application/json
      description: Search for music across all connected clients
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Music search results retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_MediaItemResponse'
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search music (artists, albums, tracks)
      tags:
      - music
  /music/tracks/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves tracks from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tracks retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Track'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Get tracks by genre
      tags:
      - music
  /playlists/search:
    get:
      consumes:
      - application/json
      description: Searches for playlists matching the given query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Playlists found
          schema:
            $ref: '#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-error'
      security:
      - BearerAuth: []
      summary: Search playlists
      tags:
      - playlists
  /series/actor/{actor}:
    get:
      consumes:
      - application/json
      description: Retrieves TV series featuring a specific actor
      parameters:
      - description: Actor name
        in: path
        name: actor
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by actor
      tags:
      - series
  /series/creator/{creator}:
    get:
      consumes:
      - application/json
      description: Retrieves TV series by a specific creator/director
      parameters:
      - description: Creator name
        in: path
        name: creator
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by creator
      tags:
      - series
  /series/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Retrieves TV series from all connected clients that match the specified
        genre
      parameters:
      - description: Genre name
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by genre
      tags:
      - series
  /series/latest/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the most recently added TV series
      parameters:
      - description: Number of series to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get latest series by added date
      tags:
      - series
  /series/popular/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves most popular TV series
      parameters:
      - description: Number of series to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get popular series
      tags:
      - series
  /series/rating:
    get:
      consumes:
      - application/json
      description: Retrieves TV series with ratings within the specified range
      parameters:
      - description: Minimum rating
        in: query
        name: min
        required: true
        type: number
      - description: Maximum rating
        in: query
        name: max
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "400":
          description: Invalid rating parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by rating range
      tags:
      - series
  /series/search:
    get:
      consumes:
      - application/json
      description: Search for TV series across all connected clients
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Search series
      tags:
      - series
  /series/top-rated/{count}:
    get:
      consumes:
      - application/json
      description: Retrieves the highest rated TV series
      parameters:
      - description: Number of series to retrieve
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "400":
          description: Invalid count
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get top rated series
      tags:
      - series
  /series/year/{year}:
    get:
      consumes:
      - application/json
      description: Retrieves TV series from all connected clients that were released
        in the specified year
      parameters:
      - description: Release year
        in: path
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Series retrieved
          schema:
            $ref: '#/definitions/responses.APIResponse-array_responses_MediaItemResponse'
        "400":
          description: Invalid year
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get series by release year
      tags:
      - series
  /users/{id}:
    delete:
      description: Deletes a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content - User successfully deleted
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Delete a user account
      tags:
      - users
    get:
      description: Retrieves a user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
  /users/{id}/activate:
    post:
      description: Activates a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully activated user account
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Activate a user account
      tags:
      - users
  /users/{id}/deactivate:
    post:
      description: Deactivates a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deactivated user account
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Deactivate a user account
      tags:
      - users
  /users/{id}/role:
    put:
      consumes:
      - application/json
      description: Changes a user's role (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New role information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ChangeRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully changed user role
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid user ID format or invalid role
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "403":
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Change user role
      tags:
      - users
  /users/password:
    put:
      consumes:
      - application/json
      description: Changes the password for the currently authenticated user
      parameters:
      - description: Password change information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully changed password
          schema:
            $ref: '#/definitions/responses.APIResponse-string'
        "400":
          description: Invalid request format or incorrect current password
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /users/profile:
    get:
      description: Retrieves the profile information for the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Get the current user's profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the profile information for the currently authenticated
        user
      parameters:
      - description: Updated profile information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user profile
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid request format or email/username already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "401":
          description: Unauthorized - Not logged in
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided information
      parameters:
      - description: User registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/responses.APIResponse-responses_UserResponse'
        "400":
          description: Invalid request format or email/username already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse-responses_ErrorDetails'
      summary: Register a new user
      tags:
      - users
schemes:
- http
swagger: "2.0"
