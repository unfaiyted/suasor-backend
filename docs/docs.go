// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Dane Miller",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/client/:clientType/:clientId/test": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Tests the connection to a client using the provided configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Test client connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client type",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection test result",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_TestConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/admin/client/:clientType/test": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Tests the connection to a client using the provided configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Test client connection",
                "parameters": [
                    {
                        "description": "Updated client data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ClientTestRequest-types_ClientConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection test result",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_TestConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/ai/analyze": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Use AI to analyze provided content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Analyze content with AI",
                "parameters": [
                    {
                        "description": "Content analysis request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AiContentAnalysisRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Analysis response",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AiContentAnalysisResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/ai/conversation/message": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Continue a conversation with the AI by sending a new message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Send a message in an existing AI conversation",
                "parameters": [
                    {
                        "description": "Message request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ConversationMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AI response",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_ConversationMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Conversation not owned by user",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Conversation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/ai/conversation/start": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initialize a new conversational session with the AI for personalized recommendations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Start a new AI conversation for recommendations",
                "parameters": [
                    {
                        "description": "Conversation initialization request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.StartConversationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation started",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_ConversationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/ai/recommendations": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get content recommendations from an AI service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Get AI-powered content recommendations",
                "parameters": [
                    {
                        "description": "Recommendation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AiRecommendationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recommendation response",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AiRecommendationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "User login data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated user",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AuthDataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or inactive account",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Invalidates the refresh token, effectively logging the user out",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log out a user",
                "parameters": [
                    {
                        "description": "Logout data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Get a new access token using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully refreshed token",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AuthDataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user with email, username, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered user",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AuthDataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Email or username already in use",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/validate": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates the user's session token and returns current user profile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Validate user session",
                "responses": {
                    "200": {
                        "description": "Valid session with user details",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/:clientType": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all client configurations for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Get all clients",
                "responses": {
                    "200": {
                        "description": "Clients retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_Client-types_ClientConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new client configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Create a new client",
                "parameters": [
                    {
                        "description": "client data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ClientRequest-types_ClientConfig"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "client created",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_Client-types_ClientConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientType}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all clients of a specific type for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Get clients by type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client type (e.g. 'plex', 'jellyfin', 'emby')",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Clients retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_Client-types_ClientConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all configured clients across different types for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Get all clients",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by client category (e.g. 'media')",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by specific client type (e.g. 'jellyfin')",
                        "name": "clientType",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All user clients with various config types",
                        "schema": {
                            "$ref": "#/definitions/responses.ClientsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.BasicErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.BasicErrorResponse"
                        }
                    }
                }
            }
        },
        "/clients/:clientType/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a client configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Delete client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "client deleted",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Client not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/calendar": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves calendar events from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Get calendar from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Calendar events retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID or dates",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/command": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executes a command on the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Execute command on automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Command details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ExecuteCommandRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Command executed",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/library": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all library items from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Get library items from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Library items retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/media": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new media item to the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Add media to automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Media details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AddMediaRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Media added",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/media/{mediaID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific media item from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Get media by ID from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "mediaID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client or media ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing media item in the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Update media in automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "mediaID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Media details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateMediaRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media updated",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a media item from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Delete media from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "mediaID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media deleted",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client or media ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/profiles/metadata": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all metadata profiles from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Get metadata profiles from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metadata profiles retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/profiles/quality": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all quality profiles from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Get quality profiles from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quality profiles retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Searches for media items in the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Search media in automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID or query",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves system status information from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Get automation client system status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "System status retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/automation/{clientID}/tags": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all tags from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Get tags from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tags retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new tag in the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation"
                ],
                "summary": "Create tag in automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tag details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateTagRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tag created",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/collections": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all collections from the client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get all collections",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of collections to return",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collections retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_responses_MediaItemResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/collections/{collectionID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific collection from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get collection by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Collection ID",
                        "name": "collectionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collection retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_MediaItemResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/movies/{movieID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific movie from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movie by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Movie ID",
                        "name": "movieID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-suasor_client_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/music/albums/{albumID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific music album from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get album by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Album ID",
                        "name": "albumID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Album retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/music/albums/{albumID}/tracks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all tracks for a specific album",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get tracks by album",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Album ID",
                        "name": "albumID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/music/artists/{artistID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific music artist from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get artist by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artist ID",
                        "name": "artistID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/music/artists/{artistID}/albums": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all albums for a specific artist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get albums by artist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artist ID",
                        "name": "artistID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/music/tracks/{trackID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific music track from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get track by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Track ID",
                        "name": "trackID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/playlists": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all playlists from the client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playlists"
                ],
                "summary": "Get all playlists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of playlists to return",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Playlists retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new playlist on the specified client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playlists"
                ],
                "summary": "Create a new playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Playlist creation data",
                        "name": "playlist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Playlist created",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Playlist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/playlists/{playlistID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific playlist from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playlists"
                ],
                "summary": "Get playlist by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Playlist ID",
                        "name": "playlistID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Playlist retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Playlist"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing playlist on the specified client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playlists"
                ],
                "summary": "Update a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Playlist ID",
                        "name": "playlistID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Playlist update data",
                        "name": "playlist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Playlist updated",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Playlist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a playlist from the specified client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playlists"
                ],
                "summary": "Delete a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Playlist ID",
                        "name": "playlistID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Playlist deleted",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/playlists/{playlistID}/items": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a media item to an existing playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playlists"
                ],
                "summary": "Add an item to a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Playlist ID",
                        "name": "playlistID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Item to add",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item added to playlist",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/playlists/{playlistID}/items/{itemID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a media item from an existing playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playlists"
                ],
                "summary": "Remove an item from a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Playlist ID",
                        "name": "playlistID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID to remove",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item removed from playlist",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/series/{seriesID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific TV series from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get series by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Series ID",
                        "name": "seriesID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/clients/media/{clientID}/series/{seriesID}/seasons": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all seasons for a specific TV series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get seasons for a series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Series ID",
                        "name": "seriesID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/config": {
            "get": {
                "description": "Returns the current system configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get current configuration",
                "responses": {
                    "200": {
                        "description": "Configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-types_Configuration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the system-wide application configuration (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Update application configuration",
                "parameters": [
                    {
                        "description": "Configuration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Configuration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/config/file": {
            "get": {
                "description": "Returns the file-based system configuration (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get file-based configuration",
                "responses": {
                    "200": {
                        "description": "File configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-types_Configuration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "description": "Saves the configuration to file only (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Save configuration to file",
                "parameters": [
                    {
                        "description": "Configuration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Configuration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration saved to file successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/config/reset": {
            "post": {
                "description": "Resets the system configuration to default values (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Reset configuration to defaults",
                "responses": {
                    "200": {
                        "description": "Configuration reset successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/config/user": {
            "get": {
                "description": "Returns the configuration for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get user configuration",
                "responses": {
                    "200": {
                        "description": "User configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the configuration for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Update user configuration",
                "parameters": [
                    {
                        "description": "User configuration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User configuration updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/docs/client-types": {
            "get": {
                "description": "This endpoint doesn't exist but serves as a reference for all client config types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "swagger-reference"
                ],
                "summary": "Reference for all client config types",
                "responses": {
                    "200": {
                        "description": "Ollama client config",
                        "schema": {
                            "$ref": "#/definitions/types.OllamaConfig"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "returns JSON object with health statuses.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "checks app and database health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.HealthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/jobs/active": {
            "get": {
                "description": "Returns a list of all currently running jobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get all active job runs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_JobRun"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/media-sync": {
            "get": {
                "description": "Returns a list of job runs for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get job runs for current user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of results (default 50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaSyncJob"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates or updates a media sync job for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Setup media sync job",
                "parameters": [
                    {
                        "description": "Media sync job setup",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.SetupMediaSyncJobRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/media-sync/run": {
            "post": {
                "description": "Runs a media sync job manually for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Run media sync job manually",
                "parameters": [
                    {
                        "description": "Media sync job run",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RunMediaSyncJobRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/recommendations": {
            "get": {
                "description": "Returns a list of recommendations for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get recommendations for current user",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Only return active recommendations (default true)",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit number of results (default 50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_Recommendation"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/recommendations/{id}/dismiss": {
            "post": {
                "description": "Marks a recommendation as dismissed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Dismiss recommendation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Recommendation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/recommendations/{id}/viewed": {
            "put": {
                "description": "Updates whether a recommendation has been viewed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Update recommendation viewed status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Recommendation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Viewed status update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateRecommendationViewedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/runs": {
            "get": {
                "description": "Returns a list of recent job runs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get recent job runs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of results (default 50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_JobRun"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/runs/{id}/progress": {
            "get": {
                "description": "Returns progress information for a specific job run",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get job run progress",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job Run ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_JobRun"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/schedules": {
            "get": {
                "description": "Returns a list of all job schedules",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get all job schedules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_JobSchedule"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing job schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Update job schedule",
                "parameters": [
                    {
                        "description": "Job schedule update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateJobScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_JobSchedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new job schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Create a new job schedule",
                "parameters": [
                    {
                        "description": "Job schedule to create",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.JobSchedule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_JobSchedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/schedules/{name}": {
            "get": {
                "description": "Returns a specific job schedule by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get job schedule by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_JobSchedule"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/{name}/run": {
            "post": {
                "description": "Triggers a job to run immediately",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Run job manually",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/movies/actor/{actor}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies from all connected clients featuring the specified actor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movies by actor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actor name",
                        "name": "actor",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_client_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/movies/director/{director}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies from all connected clients directed by the specified director",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movies by director",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Director name",
                        "name": "director",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_client_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/movies/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movies by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_client_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/movies/latest/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most recently added movies from all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get latest added movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of movies to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_client_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid count format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/movies/popular/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most popular movies from all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get popular movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of movies to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_client_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid count format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/movies/rating": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies from all connected clients with ratings in the specified range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movies by rating range",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Minimum rating (e.g. 7.5)",
                        "name": "min",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum rating (e.g. 10.0)",
                        "name": "max",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_client_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid rating format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/movies/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Searches for movies across all connected clients matching the query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Search for movies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_client_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Missing search query",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/movies/top-rated/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the highest rated movies from all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get top rated movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of movies to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_client_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid count format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/movies/year/{year}": {
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid year",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/music/albums/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves albums from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get albums by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/music/albums/latest/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most recently added albums",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get latest albums by added date",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of albums to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/music/albums/popular/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves most popular albums",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get popular albums",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of albums to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/music/albums/year/{year}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves albums from all connected clients that were released in the specified year",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get albums by release year",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Release year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid year",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/music/artists/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves artists from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get artists by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artists retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/music/artists/popular/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves most popular artists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get popular artists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of artists to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artists retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/music/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search for music across all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Search music (artists, albums, tracks)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Music search results retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_MediaItemResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/music/tracks/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves tracks from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get tracks by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/playlists/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Searches for playlists matching the given query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "playlists"
                ],
                "summary": "Search playlists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Playlists found",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Playlist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/series/actor/{actor}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series featuring a specific actor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get series by actor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actor name",
                        "name": "actor",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/creator/{creator}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series by a specific creator/director",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get series by creator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Creator name",
                        "name": "creator",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get series by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_responses_MediaItemResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/latest/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most recently added TV series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get latest series by added date",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of series to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/popular/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves most popular TV series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get popular series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of series to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/rating": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series with ratings within the specified range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get series by rating range",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Minimum rating",
                        "name": "min",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum rating",
                        "name": "max",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid rating parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search for TV series across all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Search series",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/top-rated/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the highest rated TV series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get top rated series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of series to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/year/{year}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series from all connected clients that were released in the specified year",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get series by release year",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Release year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid year",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/users/avatar": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Uploads a new avatar image for the currently authenticated user",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Upload user avatar",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Avatar image file (jpeg, png, gif only)",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully uploaded avatar",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-requests_AvatarUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid file format or size",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/users/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Changes the password for the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Password change information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed password",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or incorrect current password",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile information for the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the current user's profile",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profile",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the profile information for the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Updated profile information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user profile",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or email/username already exists",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Creates a new user account with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered user",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or email/username already exists",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a user by their ID (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a user account (admin only)",
                "tags": [
                    "users"
                ],
                "summary": "Delete a user account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - User successfully deleted"
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/users/{id}/activate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Activates a user account (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Activate a user account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully activated user account",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/users/{id}/deactivate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deactivates a user account (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Deactivate a user account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deactivated user account",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/users/{id}/role": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Changes a user's role (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change user role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New role information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ChangeRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed user role",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format or invalid role",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.ErrorType": {
            "type": "string",
            "enum": [
                "FAILED_CHECK",
                "UNAUTHORIZED",
                "NOT_FOUND",
                "BAD_REQUEST",
                "INTERNAL_ERROR",
                "FORBIDDEN",
                "CONFLICT",
                "VALIDATION_ERROR",
                "RATE_LIMITED",
                "TIMEOUT",
                "SERVICE_UNAVAILABLE",
                "UNPROCESSABLE_ENTITY"
            ],
            "x-enum-varnames": [
                "ErrorTypeFailedCheck",
                "ErrorTypeUnauthorized",
                "ErrorTypeNotFound",
                "ErrorTypeBadRequest",
                "ErrorTypeInternalError",
                "ErrorTypeForbidden",
                "ErrorTypeConflict",
                "ErrorTypeValidation",
                "ErrorTypeRateLimited",
                "ErrorTypeTimeout",
                "ErrorTypeServiceUnavailable",
                "ErrorTypeUnprocessableEntity"
            ]
        },
        "models.Client-types_ClientConfig": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "config": {
                    "$ref": "#/definitions/models.ClientConfigWrapper-types_ClientConfig"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "models.ClientConfigWrapper-types_ClientConfig": {
            "type": "object",
            "properties": {
                "data": {}
            }
        },
        "models.ClientID": {
            "type": "object",
            "properties": {
                "clientId": {
                    "description": "ID of the client that this external ID belongs to (optional for service IDs like TMDB)",
                    "type": "integer"
                },
                "clientType": {
                    "description": "Type of client this ID belongs to (optional for service IDs)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ClientType"
                        }
                    ]
                },
                "itemId": {
                    "description": "The actual ID value in the external system",
                    "type": "string"
                }
            }
        },
        "models.DefaultClients": {
            "type": "object",
            "properties": {
                "aiClientId": {
                    "type": "integer",
                    "example": 1
                },
                "bookAutomationId": {
                    "type": "integer",
                    "example": 1
                },
                "bookClientId": {
                    "description": "TODO: Add support for books. Should it be books vs audiobooks? How would I want to handle that?",
                    "type": "integer",
                    "example": 1
                },
                "movieAutomationId": {
                    "type": "integer",
                    "example": 1
                },
                "musicAutomationId": {
                    "type": "integer",
                    "example": 1
                },
                "musicClientId": {
                    "type": "integer",
                    "example": 1
                },
                "seriesAutomationId": {
                    "type": "integer",
                    "example": 1
                },
                "videoClientId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.ExternalID": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The actual ID",
                    "type": "string"
                },
                "source": {
                    "description": "e.g., \"tmdb\", \"imdb\", \"trakt\", \"tvdb\"",
                    "type": "string"
                }
            }
        },
        "models.Genres": {
            "type": "object",
            "properties": {
                "anime": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "action",
                        "comedy",
                        "drama"
                    ]
                },
                "books": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "fantasy",
                        "horror",
                        "mystery"
                    ]
                },
                "games": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "action",
                        "comedy",
                        "drama"
                    ]
                },
                "movies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "action",
                        "comedy",
                        "drama"
                    ]
                },
                "music": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "electronic",
                        "pop",
                        "rock"
                    ]
                },
                "series": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "action",
                        "comedy",
                        "drama"
                    ]
                }
            }
        },
        "models.JobRun": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "endTime": {
                    "description": "When the job finished running",
                    "type": "string"
                },
                "errorMessage": {
                    "description": "Any error message from the job run",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "jobName": {
                    "description": "The name of the job",
                    "type": "string"
                },
                "jobType": {
                    "description": "Type of job (recommendation, sync, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JobType"
                        }
                    ]
                },
                "metadata": {
                    "description": "Metadata related to the job (stored as JSON)",
                    "type": "string"
                },
                "processedItems": {
                    "description": "Items processed so far",
                    "type": "integer"
                },
                "progress": {
                    "description": "Progress percentage (0-100)",
                    "type": "integer"
                },
                "startTime": {
                    "description": "When the job started running",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the job run",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JobStatus"
                        }
                    ]
                },
                "statusMessage": {
                    "description": "Current status message",
                    "type": "string"
                },
                "totalItems": {
                    "description": "Total items to process",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "User ID associated with the job, if applicable",
                    "type": "integer"
                }
            }
        },
        "models.JobSchedule": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Any configuration for the job (stored as JSON)",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the job is enabled",
                    "type": "boolean"
                },
                "frequency": {
                    "description": "How often the job should run",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "jobName": {
                    "description": "Unique name of the job",
                    "type": "string"
                },
                "jobType": {
                    "description": "Type of job (recommendation, sync, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JobType"
                        }
                    ]
                },
                "lastRunTime": {
                    "description": "When the job last ran",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "User ID associated with the job, if applicable (for user-specific jobs)",
                    "type": "integer"
                }
            }
        },
        "models.JobStatus": {
            "type": "string",
            "enum": [
                "pending",
                "running",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "JobStatusPending",
                "JobStatusRunning",
                "JobStatusCompleted",
                "JobStatusFailed"
            ]
        },
        "models.JobType": {
            "type": "string",
            "enum": [
                "recommendation",
                "sync",
                "system",
                "notification",
                "analysis"
            ],
            "x-enum-varnames": [
                "JobTypeRecommendation",
                "JobTypeSync",
                "JobTypeSystem",
                "JobTypeNotification",
                "JobTypeAnalysis"
            ]
        },
        "models.MaxRecommendations": {
            "type": "object",
            "properties": {
                "anime": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "books": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "games": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "movies": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "music": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "series": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                }
            }
        },
        "models.MediaItem-suasor_client_media_types_Movie": {
            "type": "object",
            "properties": {
                "clientIds": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClientID"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/suasor_client_media_types.Movie"
                        }
                    ]
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Album": {
            "type": "object",
            "properties": {
                "clientIds": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClientID"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Album"
                        }
                    ]
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Artist": {
            "type": "object",
            "properties": {
                "clientIds": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClientID"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Artist"
                        }
                    ]
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Playlist": {
            "type": "object",
            "properties": {
                "clientIds": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClientID"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Playlist"
                        }
                    ]
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Series": {
            "type": "object",
            "properties": {
                "clientIds": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClientID"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Series"
                        }
                    ]
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Track": {
            "type": "object",
            "properties": {
                "clientIds": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClientID"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Track"
                        }
                    ]
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.MediaSyncJob": {
            "type": "object",
            "properties": {
                "clientId": {
                    "description": "ID of the client to sync from",
                    "type": "integer"
                },
                "clientType": {
                    "description": "Type of the client",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether sync is enabled",
                    "type": "boolean"
                },
                "filters": {
                    "description": "Sync filter criteria (stored as JSON)",
                    "type": "string"
                },
                "frequency": {
                    "description": "Sync frequency",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastSyncTime": {
                    "description": "Last sync time",
                    "type": "string"
                },
                "mediaType": {
                    "description": "Type of media to sync (movies, series, music, etc.)",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "ID of the user",
                    "type": "integer"
                }
            }
        },
        "models.PrivacySettings": {
            "type": "object",
            "properties": {
                "publicProfile": {
                    "type": "boolean",
                    "example": true
                },
                "shareRecommendations": {
                    "type": "boolean",
                    "example": true
                },
                "showRecommendationList": {
                    "type": "boolean",
                    "example": true
                },
                "showWatchHistory": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.Recommendation": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Whether this is an active recommendation",
                    "type": "boolean"
                },
                "confidence": {
                    "description": "Confidence score (0.0 to 1.0) if available",
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "dismissed": {
                    "description": "Whether this item has been dismissed by the user",
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "inLibrary": {
                    "description": "Whether this item is present in the user's library",
                    "type": "boolean"
                },
                "jobRunId": {
                    "description": "Job run that created this recommendation",
                    "type": "integer"
                },
                "mediaItemId": {
                    "description": "ID of the media item being recommended",
                    "type": "integer"
                },
                "mediaType": {
                    "description": "Type of media being recommended (movie, series, etc.)",
                    "type": "string"
                },
                "metadata": {
                    "description": "Additional metadata (stored as JSON)",
                    "type": "string"
                },
                "reason": {
                    "description": "Explanation of why this was recommended",
                    "type": "string"
                },
                "source": {
                    "description": "Source of the recommendation (AI, system, manual)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RecommendationSource"
                        }
                    ]
                },
                "sourceClientId": {
                    "description": "ID of the client that generated this recommendation, if applicable",
                    "type": "integer"
                },
                "sourceClientType": {
                    "description": "Type of the client that generated this recommendation",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "ID of the user receiving this recommendation",
                    "type": "integer"
                },
                "viewed": {
                    "description": "Whether this item has been viewed/played by the user",
                    "type": "boolean"
                }
            }
        },
        "models.RecommendationSource": {
            "type": "string",
            "enum": [
                "ai",
                "system",
                "manual"
            ],
            "x-enum-varnames": [
                "RecommendationSourceAI",
                "RecommendationSourceSystem",
                "RecommendationSourceManual"
            ]
        },
        "models.SocialLinks": {
            "type": "object",
            "properties": {
                "lastfm": {
                    "type": "string",
                    "example": "https://last.fm/user/faiyt"
                },
                "letterboxd": {
                    "type": "string",
                    "example": "https://letterboxd.com/faiyt"
                },
                "trakt": {
                    "type": "string",
                    "example": "https://trakt.tv/users/faiyt"
                }
            }
        },
        "models.UserConfig": {
            "description": "User-specific configuration stored in the database",
            "type": "object",
            "properties": {
                "activityAnalysisEnabled": {
                    "description": "Activity Analysis Settings",
                    "type": "boolean",
                    "example": true
                },
                "aiChatPersonality": {
                    "description": "AI Algorithm Settings",
                    "type": "string",
                    "enum": [
                        "friendly",
                        "serious",
                        "enthusiastic",
                        "analytical",
                        "custom"
                    ],
                    "example": "serious"
                },
                "bio": {
                    "description": "Profile settings",
                    "type": "string",
                    "example": "I'm a developer"
                },
                "contentAvailabilityEnabled": {
                    "description": "Content Availability Settings",
                    "type": "boolean",
                    "example": true
                },
                "contentTypes": {
                    "description": "What sidebar options to show based on the enabled content types.",
                    "type": "string",
                    "example": "movie,series,tv"
                },
                "createdAt": {
                    "type": "string"
                },
                "defaultClients": {
                    "$ref": "#/definitions/models.DefaultClients"
                },
                "deletedAt": {
                    "type": "string"
                },
                "digestFrequency": {
                    "type": "string",
                    "enum": [
                        "never",
                        "daily",
                        "weekly"
                    ],
                    "example": "weekly"
                },
                "discoveryModeEnabled": {
                    "description": "Emphasize new content discovery",
                    "type": "boolean",
                    "example": true
                },
                "discoveryModeRatio": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 0.5
                },
                "displayName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "emailNotifications": {
                    "type": "boolean",
                    "example": true
                },
                "enableAnimations": {
                    "type": "boolean",
                    "example": true
                },
                "excludedGenres": {
                    "$ref": "#/definitions/models.Genres"
                },
                "excludedKeywords": {
                    "type": "string",
                    "example": "war,violence,politics"
                },
                "id": {
                    "type": "integer"
                },
                "includeUnratedContent": {
                    "type": "boolean",
                    "example": false
                },
                "itemsPerPage": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "language": {
                    "type": "string",
                    "example": "en-US"
                },
                "maxContentRating": {
                    "type": "string",
                    "example": "R"
                },
                "maxRecommendations": {
                    "description": "how many movie recommendations to generate",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MaxRecommendations"
                        }
                    ]
                },
                "minContentRating": {
                    "type": "string",
                    "example": "PG-13"
                },
                "newContentWeight": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 0.7
                },
                "newReleaseMediaTypes": {
                    "type": "string",
                    "example": "movie,series,music"
                },
                "newReleaseNotificationsEnabled": {
                    "description": "New Release Notifications Settings",
                    "type": "boolean",
                    "example": true
                },
                "notificationsEnabled": {
                    "description": "Notification Settings",
                    "type": "boolean",
                    "example": true
                },
                "notifyOnNewRecommendations": {
                    "type": "boolean",
                    "example": true
                },
                "notifyOnSync": {
                    "type": "boolean",
                    "example": false
                },
                "onboardingCompleted": {
                    "description": "Onboarding",
                    "type": "boolean",
                    "example": true
                },
                "personalHistoryWeight": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 0.8
                },
                "playlistSyncDirection": {
                    "type": "string",
                    "example": "bidirectional"
                },
                "playlistSyncEnabled": {
                    "description": "Playlist Sync Settings",
                    "type": "boolean",
                    "example": true
                },
                "popularityWeight": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 0.3
                },
                "preferredAudioLanguages": {
                    "type": "string",
                    "example": "en,ja"
                },
                "preferredContentLength": {
                    "type": "string",
                    "enum": [
                        "short",
                        "medium",
                        "long"
                    ],
                    "example": "short"
                },
                "preferredGenres": {
                    "$ref": "#/definitions/models.Genres"
                },
                "privacySettings": {
                    "$ref": "#/definitions/models.PrivacySettings"
                },
                "recommendationContentTypes": {
                    "description": "What content types with be part of the auto sync recommendations",
                    "type": "string",
                    "example": "movie,series,tv,book"
                },
                "recommendationListPrefix": {
                    "description": "Prefux to add to teh beginning of the list name to identify that its part of the auto recommendations system",
                    "type": "string",
                    "example": "AI Picks"
                },
                "recommendationMaxAge": {
                    "description": "In years, 0 = no limit",
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 5
                },
                "recommendationMinRating": {
                    "type": "number",
                    "example": 6
                },
                "recommendationStrategy": {
                    "type": "string",
                    "enum": [
                        "similar",
                        "recent",
                        "popular",
                        "balanced"
                    ],
                    "example": "popular"
                },
                "recommendationSyncEnabled": {
                    "description": "Recommendation Preferences\nAutomatically download and organized recommended media into a collection/playlist",
                    "type": "boolean",
                    "example": true
                },
                "recommendationSyncFrequency": {
                    "description": "How often to sync new recommendations",
                    "type": "string",
                    "enum": [
                        "manual",
                        "daily",
                        "weekly",
                        "monthly"
                    ],
                    "example": "daily"
                },
                "recommendationSyncListType": {
                    "description": "What type of list to create for the synced recommendations",
                    "type": "string",
                    "enum": [
                        "playlist",
                        "collection"
                    ],
                    "example": "playlist"
                },
                "showAdultContent": {
                    "type": "boolean",
                    "example": false
                },
                "smartCollectionsEnabled": {
                    "description": "Smart Collections Settings",
                    "type": "boolean",
                    "example": true
                },
                "socialLinks": {
                    "$ref": "#/definitions/models.SocialLinks"
                },
                "theme": {
                    "description": "UI Preferences",
                    "type": "string",
                    "enum": [
                        "light",
                        "dark",
                        "system"
                    ],
                    "example": "dark"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "UserID links this config to a specific user",
                    "type": "integer"
                }
            }
        },
        "requests.AddMediaRequest": {
            "type": "object",
            "properties": {
                "metadataProfileID": {
                    "description": "For Lidarr",
                    "type": "integer"
                },
                "monitored": {
                    "type": "boolean"
                },
                "musicBrainzID": {
                    "description": "For Lidarr (music)",
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "qualityProfileID": {
                    "type": "integer"
                },
                "searchForMedia": {
                    "description": "Whether to search for the media after adding",
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "title": {
                    "type": "string"
                },
                "tmdbid": {
                    "description": "For Radarr (movies)",
                    "type": "integer"
                },
                "tvdbid": {
                    "description": "For Sonarr (TV shows)",
                    "type": "integer"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "requests.AiContentAnalysisRequest": {
            "description": "Request for AI-powered content analysis",
            "type": "object",
            "required": [
                "content",
                "contentType"
            ],
            "properties": {
                "clientId": {
                    "description": "Client ID to use for the conversation",
                    "type": "integer"
                },
                "clientType": {
                    "description": "Specific AI client type to use (claude, openai, ollama)\nexample: claude",
                    "type": "string"
                },
                "content": {
                    "description": "The content to analyze\nrequired: true\nexample: This is a sample text that needs analysis for sentiment and themes.",
                    "type": "string"
                },
                "contentType": {
                    "description": "Type of content being analyzed (text, movie, etc)\nrequired: true\nexample: text",
                    "type": "string"
                },
                "options": {
                    "description": "Optional analysis options\nexample: {\"includeThemes\": true, \"includeSentiment\": true}",
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "requests.AiRecommendationRequest": {
            "description": "Request for AI-powered content recommendations",
            "type": "object",
            "required": [
                "contentType"
            ],
            "properties": {
                "clientId": {
                    "description": "Client ID to use for the conversation",
                    "type": "integer"
                },
                "clientType": {
                    "description": "Specific AI client type to use (claude, openai, ollama)\nexample: claude",
                    "type": "string"
                },
                "contentType": {
                    "description": "Type of content to recommend (movie, tv, music, etc)\nrequired: true\nexample: movie",
                    "type": "string"
                },
                "count": {
                    "description": "Number of recommendations to return\nexample: 5",
                    "type": "integer"
                },
                "filters": {
                    "description": "Optional filters to apply to recommendations\nexample: {\"genre\": \"sci-fi\", \"year\": \"2020-2023\"}",
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "requests.AvatarUploadResponse": {
            "description": "Response data after avatar upload",
            "type": "object",
            "properties": {
                "filePath": {
                    "description": "FilePath is the path to the uploaded avatar file\n@Description Path to the uploaded avatar file\n@Example \"/uploads/avatars/user_1.jpg\"",
                    "type": "string",
                    "example": "/uploads/avatars/user_1.jpg"
                }
            }
        },
        "requests.ChangePasswordRequest": {
            "description": "Request payload for changing user password",
            "type": "object",
            "required": [
                "currentPassword",
                "newPassword"
            ],
            "properties": {
                "currentPassword": {
                    "description": "CurrentPassword is the user's existing password for verification\n@Description User's current password for verification\n@Example \"oldpassword123\"",
                    "type": "string",
                    "example": "oldpassword123"
                },
                "newPassword": {
                    "description": "NewPassword is the password to change to\n@Description New password to set for the user\n@Example \"newpassword456\"",
                    "type": "string",
                    "example": "newpassword456"
                }
            }
        },
        "requests.ChangeRoleRequest": {
            "description": "Request payload for changing user role",
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "role": {
                    "description": "Role is the new role to assign to the user\n@Description New role to assign to the user\n@Enum \"user\" \"admin\"\n@Example \"admin\"",
                    "type": "string",
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "example": "admin"
                }
            }
        },
        "requests.ClientRequest-types_ClientConfig": {
            "type": "object",
            "required": [
                "clientType",
                "name"
            ],
            "properties": {
                "client": {},
                "clientID": {
                    "type": "integer"
                },
                "clientType": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "requests.ClientTestRequest-types_ClientConfig": {
            "type": "object",
            "required": [
                "clientType"
            ],
            "properties": {
                "client": {},
                "clientType": {
                    "enum": [
                        "radarr",
                        "sonarr",
                        "lidarr",
                        "emby",
                        "jellyfin",
                        "subsonic",
                        "plex",
                        "claude",
                        "openai",
                        "ollama"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ClientType"
                        }
                    ]
                }
            }
        },
        "requests.ConversationMessageRequest": {
            "description": "Request to send a message in an existing AI conversation",
            "type": "object",
            "required": [
                "conversationId",
                "message"
            ],
            "properties": {
                "clientId": {
                    "description": "Client ID to use for the conversation",
                    "type": "integer"
                },
                "context": {
                    "description": "Optional context information for this message\nexample: {\"includeRecommendations\": true, \"maxResults\": 3}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "conversationId": {
                    "description": "The conversation ID from a previous StartConversation call\nrequired: true\nexample: conv-123-abcdef",
                    "type": "string"
                },
                "message": {
                    "description": "The user's message to the AI\nrequired: true\nexample: I'm looking for sci-fi movies similar to Interstellar",
                    "type": "string"
                }
            }
        },
        "requests.CreateTagRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "requests.ExecuteCommandRequest": {
            "type": "object",
            "required": [
                "command"
            ],
            "properties": {
                "command": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "requests.LoginRequest": {
            "description": "Request payload for user login",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address\n@Description User's email address\n@Example \"user@example.com\"",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "Password is the user's chosen password\n@Description User's password (plain text in request)",
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "requests.LogoutRequest": {
            "description": "Request payload for user logout",
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "description": "RefreshToken identifies the session to terminate\n@Description JWT refresh token to invalidate",
                    "type": "string"
                }
            }
        },
        "requests.ProfileRequest": {
            "description": "Request payload for updating user profile",
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "Avatar is the path to the user's avatar image\n@Description Path to the user's avatar image\n@Example \"/uploads/avatars/user_1.jpg\"",
                    "type": "string",
                    "example": "/uploads/avatars/user_1.jpg"
                },
                "email": {
                    "description": "Email is the new email address\n@Description Updated email address for the user\n@Example \"newemail@example.com\"",
                    "type": "string",
                    "example": "newemail@example.com"
                },
                "username": {
                    "description": "Username is the new username\n@Description Updated username for the user\n@Example \"newusername\"",
                    "type": "string",
                    "example": "newusername"
                }
            }
        },
        "requests.RefreshTokenRequest": {
            "description": "Request payload for refreshing access tokens",
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "description": "RefreshToken is used to generate a new access token\n@Description JWT refresh token to use for generating new access token",
                    "type": "string"
                }
            }
        },
        "requests.RegisterRequest": {
            "description": "Request payload for user registration",
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address\n@Description User's email address\n@Example \"user@example.com\"",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "Password is the user's chosen password\n@Description User's password (plain text in request)",
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "description": "Username is the user's desired username\n@Description User's chosen username\n@Example \"johndoe\"",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "requests.RunMediaSyncJobRequest": {
            "type": "object",
            "required": [
                "clientId",
                "mediaType"
            ],
            "properties": {
                "clientId": {
                    "type": "integer"
                },
                "mediaType": {
                    "type": "string"
                }
            }
        },
        "requests.SetupMediaSyncJobRequest": {
            "type": "object",
            "required": [
                "clientId",
                "clientType",
                "frequency",
                "mediaType"
            ],
            "properties": {
                "clientId": {
                    "type": "integer"
                },
                "clientType": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string"
                }
            }
        },
        "requests.StartConversationRequest": {
            "description": "Request to start a new AI-powered conversation for recommendations",
            "type": "object",
            "required": [
                "contentType"
            ],
            "properties": {
                "clientId": {
                    "description": "Client ID to use for the conversation",
                    "type": "integer"
                },
                "contentType": {
                    "description": "Type of content to discuss (movie, tv, music, etc)\nrequired: true\nexample: movie",
                    "type": "string"
                },
                "preferences": {
                    "description": "Optional user preferences to initialize the conversation\nexample: {\"favoriteGenres\": [\"sci-fi\", \"thriller\"], \"recentlyWatched\": [\"Inception\", \"Tenet\"]}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "systemInstructions": {
                    "description": "Optional custom system instructions\nexample: You are a helpful movie recommendation assistant",
                    "type": "string"
                }
            }
        },
        "requests.UpdateJobScheduleRequest": {
            "type": "object",
            "required": [
                "frequency",
                "jobName"
            ],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "frequency": {
                    "type": "string"
                },
                "jobName": {
                    "type": "string"
                }
            }
        },
        "requests.UpdateMediaRequest": {
            "type": "object",
            "properties": {
                "metadataProfileID": {
                    "description": "For Lidarr",
                    "type": "integer"
                },
                "monitored": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                },
                "qualityProfileID": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "requests.UpdateRecommendationViewedRequest": {
            "type": "object",
            "properties": {
                "viewed": {
                    "type": "boolean"
                }
            }
        },
        "responses.APIResponse-any": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_Client-types_ClientConfig": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Client-types_ClientConfig"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_JobRun": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.JobRun"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_JobSchedule": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.JobSchedule"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-suasor_client_media_types_Movie": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-suasor_client_media_types_Movie"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Album": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Album"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Artist": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Artist"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Playlist": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Playlist"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Series": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Series"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Track": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Track"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaSyncJob": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaSyncJob"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_Recommendation": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Recommendation"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_responses_MediaItemResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.MediaItemResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_Client-types_ClientConfig": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Client-types_ClientConfig"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_JobRun": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.JobRun"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_JobSchedule": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.JobSchedule"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-suasor_client_media_types_Movie": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-suasor_client_media_types_Movie"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Album": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Album"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Artist": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Artist"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Playlist": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Playlist"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Series": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Series"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Track": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Track"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_UserConfig": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.UserConfig"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-requests_AvatarUploadResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/requests.AvatarUploadResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_AiContentAnalysisResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.AiContentAnalysisResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_AiRecommendationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.AiRecommendationResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_AuthDataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.AuthDataResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_ConversationMessageResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.ConversationMessageResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_ConversationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.ConversationResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_EmptyResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.EmptyResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_MediaItemResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.MediaItemResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_TestConnectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.TestConnectionResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_UserResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.UserResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-string": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-types_Configuration": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.Configuration"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.AiContentAnalysisResponse": {
            "description": "Response containing AI-powered content analysis",
            "type": "object",
            "properties": {
                "analysis": {
                    "description": "Analysis results",
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "responses.AiRecommendationResponse": {
            "description": "Response containing AI-powered content recommendations",
            "type": "object",
            "properties": {
                "items": {
                    "description": "List of recommended items",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                }
            }
        },
        "responses.AuthDataResponse": {
            "description": "Authentication data returned to client after successful authentication",
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "AccessToken is the JWT token for API access\n@Description JWT access token for authenticated requests\n@Example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string"
                },
                "expiresAt": {
                    "description": "ExpiresAt indicates when the access token expires\n@Description UNIX timestamp when the access token expires\n@Example 1674140400",
                    "type": "integer"
                },
                "refreshToken": {
                    "description": "RefreshToken is used to get new access tokens\n@Description JWT refresh token for obtaining new access tokens\n@Example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string"
                },
                "user": {
                    "description": "User contains the user profile information\n@Description User profile data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.UserResponse"
                        }
                    ]
                }
            }
        },
        "responses.BasicErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "$ref": "#/definitions/responses.ErrorDetails"
                },
                "message": {
                    "type": "string",
                    "example": "This is a pretty message"
                },
                "request_id": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 201
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/errors.ErrorType"
                        }
                    ],
                    "example": "FAILED_CHECK"
                }
            }
        },
        "responses.ClientResponse": {
            "type": "object",
            "properties": {
                "client": {
                    "description": "Can be any of the config types"
                },
                "clientType": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ClientType"
                        }
                    ],
                    "example": "plex"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "example": "My Plex Server"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "userId": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "responses.ClientsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.ClientResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.ConversationMessageResponse": {
            "description": "Response to a message in an AI conversation",
            "type": "object",
            "properties": {
                "context": {
                    "description": "Additional message context\nexample: {\"sentiment\": \"positive\", \"topicShift\": false}",
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "description": "The AI's response to the user message\nexample: \"Based on your interest in Interstellar, I'd recommend checking out these sci-fi movies with similar themes of space exploration and time: 1. Arrival (2016), 2. The Martian (2015), 3. Ad Astra (2019). Would you like more recommendations or details about any of these?\"",
                    "type": "string"
                },
                "recommendations": {
                    "description": "Recommendations included in the response, if any\nexample: [{\"title\": \"Arrival\", \"year\": 2016, \"genre\": \"Sci-Fi\"}, {\"title\": \"The Martian\", \"year\": 2015, \"genre\": \"Sci-Fi\"}]",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                }
            }
        },
        "responses.ConversationResponse": {
            "description": "Response containing conversation details",
            "type": "object",
            "properties": {
                "context": {
                    "description": "Additional information about the conversation context\nexample: {\"contentType\": \"movie\", \"session\": \"active\"}",
                    "type": "object",
                    "additionalProperties": true
                },
                "conversationId": {
                    "description": "Unique ID for the conversation\nexample: conv-123-abcdef",
                    "type": "string"
                },
                "welcome": {
                    "description": "Initial greeting or message from the AI\nexample: \"Hi there! I'm your movie recommendation assistant. What kind of movies do you enjoy watching?\"",
                    "type": "string"
                }
            }
        },
        "responses.EmptyAPIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.EmptyResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "responses.ErrorDetails": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "stackInfo": {
                    "type": "string"
                }
            }
        },
        "responses.ErrorResponse-error": {
            "type": "object",
            "properties": {
                "details": {},
                "message": {
                    "type": "string",
                    "example": "This is a pretty message"
                },
                "request_id": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 201
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/errors.ErrorType"
                        }
                    ],
                    "example": "FAILED_CHECK"
                }
            }
        },
        "responses.ErrorResponse-responses_ErrorDetails": {
            "type": "object",
            "properties": {
                "details": {
                    "$ref": "#/definitions/responses.ErrorDetails"
                },
                "message": {
                    "type": "string",
                    "example": "This is a pretty message"
                },
                "request_id": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 201
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/errors.ErrorType"
                        }
                    ],
                    "example": "FAILED_CHECK"
                }
            }
        },
        "responses.HealthResponse": {
            "type": "object",
            "required": [
                "application",
                "database",
                "status"
            ],
            "properties": {
                "application": {
                    "type": "boolean",
                    "example": true
                },
                "database": {
                    "type": "boolean",
                    "example": true
                },
                "status": {
                    "description": "Overall status of the system",
                    "type": "string",
                    "enum": [
                        "up",
                        "down",
                        "degraded"
                    ],
                    "example": "up"
                }
            }
        },
        "responses.MediaItemResponse": {
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "integer"
                },
                "clientType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {},
                "externalId": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.MediaType"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "responses.TestConnectionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "responses.UserResponse": {
            "description": "User information returned in API responses",
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "Avatar is the path to the user's avatar image\n@Description Path to the user's avatar image\n@Example \"/uploads/avatars/user_1.jpg\"",
                    "type": "string",
                    "example": "/uploads/avatars/user_1.jpg"
                },
                "email": {
                    "description": "Email is the unique email address of the user\n@Description User's email address\n@Example \"user@example.com\"",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the user\n@Description User's unique identifier\n@Example 1",
                    "type": "integer"
                },
                "role": {
                    "description": "Role defines the user's permission level\n@Description User's role in the system\n@Enum \"user\" \"admin\"\n@Example \"user\"",
                    "type": "string"
                },
                "username": {
                    "description": "Username is the display name chosen by the user\n@Description User's chosen username\n@Example \"johndoe\"",
                    "type": "string"
                }
            }
        },
        "suasor_client_media_types.ExternalID": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The actual ID",
                    "type": "string"
                },
                "source": {
                    "description": "e.g., \"tmdb\", \"imdb\", \"trakt\", \"tvdb\"",
                    "type": "string"
                }
            }
        },
        "suasor_client_media_types.Movie": {
            "type": "object",
            "properties": {
                "audioCodec": {
                    "type": "string"
                },
                "cast": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_client_media_types.Person"
                    }
                },
                "crew": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_client_media_types.Person"
                    }
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "resolution": {
                    "description": "e.g., \"4K\", \"1080p\"",
                    "type": "string"
                },
                "subtitleUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trailerUrl": {
                    "type": "string"
                },
                "videoCodec": {
                    "type": "string"
                }
            }
        },
        "suasor_client_media_types.Person": {
            "type": "object",
            "properties": {
                "character": {
                    "description": "For actors",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "role": {
                    "description": "e.g., \"Director\", \"Actor\"",
                    "type": "string"
                }
            }
        },
        "suasor_client_media_types.Rating": {
            "type": "object",
            "properties": {
                "source": {
                    "description": "e.g., \"tmdb\", \"imdb\", \"trakt\", \"tvdb\"",
                    "type": "string"
                },
                "value": {
                    "description": "The actual ID",
                    "type": "number"
                },
                "votes": {
                    "description": "For sources that might have how many people voted on an item",
                    "type": "integer"
                }
            }
        },
        "types.AIClientType": {
            "type": "string",
            "enum": [
                "claude",
                "openai",
                "ollama",
                "unknown"
            ],
            "x-enum-varnames": [
                "AIClientTypeClaude",
                "AIClientTypeOpenAI",
                "AIClientTypeOllama",
                "AIClientTypeUnknown"
            ]
        },
        "types.Album": {
            "type": "object",
            "properties": {
                "artistID": {
                    "type": "string"
                },
                "artistName": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "trackCount": {
                    "type": "integer"
                }
            }
        },
        "types.Artist": {
            "type": "object",
            "properties": {
                "albumCount": {
                    "type": "integer"
                },
                "albumIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "biography": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "similarArtists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.Artwork": {
            "type": "object",
            "properties": {
                "background": {
                    "type": "string"
                },
                "banner": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "poster": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                }
            }
        },
        "types.AutomationClientType": {
            "type": "string",
            "enum": [
                "radarr",
                "sonarr",
                "lidarr",
                "unknown"
            ],
            "x-enum-varnames": [
                "AutomationClientTypeRadarr",
                "AutomationClientTypeSonarr",
                "AutomationClientTypeLidarr",
                "AutomationClientTypeUnknown"
            ]
        },
        "types.ClaudeConfig": {
            "description": "Claude media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.AIClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "maxContextTokens": {
                    "type": "integer",
                    "example": 1000
                },
                "maxTokens": {
                    "type": "integer",
                    "example": 100
                },
                "model": {
                    "type": "string",
                    "example": "claude-2"
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "temperature": {
                    "type": "number",
                    "example": 0.5
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.ClientCategory": {
            "type": "string",
            "enum": [
                "automation",
                "media",
                "ai",
                "metadata",
                "unknown"
            ],
            "x-enum-varnames": [
                "ClientCategoryAutomation",
                "ClientCategoryMedia",
                "ClientCategoryAI",
                "ClientCategoryMetadata",
                "ClientCategoryUnknown"
            ]
        },
        "types.ClientType": {
            "type": "string",
            "enum": [
                "emby",
                "jellyfin",
                "plex",
                "subsonic",
                "radarr",
                "sonarr",
                "lidarr",
                "unknown",
                "claude",
                "openai",
                "ollama",
                "tmdb",
                "trakt"
            ],
            "x-enum-varnames": [
                "ClientTypeEmby",
                "ClientTypeJellyfin",
                "ClientTypePlex",
                "ClientTypeSubsonic",
                "ClientTypeRadarr",
                "ClientTypeSonarr",
                "ClientTypeLidarr",
                "ClientTypeUnknown",
                "ClientTypeClaude",
                "ClientTypeOpenAI",
                "ClientTypeOllama",
                "ClientTypeTMDB",
                "ClientTypeTrakt"
            ]
        },
        "types.Configuration": {
            "description": "Complete application configuration settings",
            "type": "object",
            "properties": {
                "app": {
                    "description": "App contains core application settings",
                    "type": "object",
                    "required": [
                        "apiBaseURL",
                        "appURL",
                        "avatarPath",
                        "environment",
                        "logLevel",
                        "maxAvatarSize",
                        "maxPageSize",
                        "name"
                    ],
                    "properties": {
                        "apiBaseURL": {
                            "type": "string",
                            "example": "http://localhost:8080"
                        },
                        "appURL": {
                            "type": "string",
                            "example": "http://localhost:3000"
                        },
                        "avatarPath": {
                            "type": "string",
                            "example": "./uploads/avatars"
                        },
                        "environment": {
                            "type": "string",
                            "enum": [
                                "development",
                                "staging",
                                "production"
                            ],
                            "example": "development"
                        },
                        "logLevel": {
                            "type": "string",
                            "enum": [
                                "debug",
                                "info",
                                "warn",
                                "error"
                            ],
                            "example": "info"
                        },
                        "maxAvatarSize": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 5242880
                        },
                        "maxPageSize": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "example": 100
                        },
                        "name": {
                            "type": "string",
                            "example": "suasor"
                        }
                    }
                },
                "auth": {
                    "description": "Auth contains authentication settings",
                    "type": "object",
                    "required": [
                        "accessExpiryMinutes",
                        "jwtSecret",
                        "refreshExpiryDays",
                        "sessionTimeout",
                        "tokenAudience",
                        "tokenExpiration",
                        "tokenIssuer"
                    ],
                    "properties": {
                        "accessExpiryMinutes": {
                            "description": "New fields to add",
                            "type": "integer",
                            "minimum": 1,
                            "example": 15
                        },
                        "allowedOrigins": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "example": [
                                "http://localhost:3000"
                            ]
                        },
                        "enable2FA": {
                            "type": "boolean",
                            "example": false
                        },
                        "enableLocal": {
                            "type": "boolean",
                            "example": true
                        },
                        "jwtSecret": {
                            "type": "string",
                            "example": "your-secret-key"
                        },
                        "refreshExpiryDays": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 7
                        },
                        "sessionTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 60
                        },
                        "tokenAudience": {
                            "type": "string",
                            "example": "suasor-client"
                        },
                        "tokenExpiration": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 24
                        },
                        "tokenIssuer": {
                            "type": "string",
                            "example": "suasor-api"
                        }
                    }
                },
                "db": {
                    "description": "Database contains database connection settings",
                    "type": "object",
                    "required": [
                        "host",
                        "maxConns",
                        "name",
                        "password",
                        "port",
                        "timeout",
                        "user"
                    ],
                    "properties": {
                        "host": {
                            "type": "string",
                            "example": "localhost"
                        },
                        "maxConns": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 20
                        },
                        "name": {
                            "type": "string",
                            "example": "suasor"
                        },
                        "password": {
                            "type": "string",
                            "example": "yourpassword"
                        },
                        "port": {
                            "type": "string",
                            "example": "5432"
                        },
                        "timeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 30
                        },
                        "user": {
                            "type": "string",
                            "example": "postgres_user"
                        }
                    }
                },
                "http": {
                    "description": "HTTP contains HTTP server configuration",
                    "type": "object",
                    "required": [
                        "idleTimeout",
                        "port",
                        "readTimeout",
                        "writeTimeout"
                    ],
                    "properties": {
                        "baseURL": {
                            "type": "string",
                            "example": "http://localhost:8080"
                        },
                        "enableSSL": {
                            "type": "boolean",
                            "example": false
                        },
                        "idleTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 60
                        },
                        "port": {
                            "type": "string",
                            "example": "8080"
                        },
                        "proxyEnabled": {
                            "type": "boolean",
                            "example": false
                        },
                        "proxyURL": {
                            "type": "string",
                            "example": "http://proxy:8080"
                        },
                        "rateLimitEnabled": {
                            "type": "boolean",
                            "example": true
                        },
                        "readTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 30
                        },
                        "requestsPerMin": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "sslCert": {
                            "type": "string",
                            "example": "/path/to/cert.pem"
                        },
                        "sslKey": {
                            "type": "string",
                            "example": "/path/to/key.pem"
                        },
                        "writeTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 30
                        }
                    }
                }
            }
        },
        "types.EmbyConfig": {
            "description": "Emby media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.MediaClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "userID": {
                    "type": "string",
                    "example": "your-internal-user-id"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.JellyfinConfig": {
            "description": "Jellyfin media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.MediaClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "userID": {
                    "type": "string",
                    "example": "your-internal-user-id"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.LidarrConfig": {
            "description": "Jellyfin media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.AutomationClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.MediaClientType": {
            "type": "string",
            "enum": [
                "plex",
                "jellyfin",
                "emby",
                "subsonic",
                "unknown"
            ],
            "x-enum-varnames": [
                "MediaClientTypePlex",
                "MediaClientTypeJellyfin",
                "MediaClientTypeEmby",
                "MediaClientTypeSubsonic",
                "MediaClientTypeUnknown"
            ]
        },
        "types.MediaDetails": {
            "type": "object",
            "properties": {
                "addedAt": {
                    "type": "string"
                },
                "artwork": {
                    "$ref": "#/definitions/types.Artwork"
                },
                "contentRating": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "durationSeconds": {
                    "description": "Changed from time.Duration to int64 for Swagger compatibility",
                    "type": "integer"
                },
                "externalIDs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_client_media_types.ExternalID"
                    }
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isFavorite": {
                    "type": "boolean"
                },
                "ratings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_client_media_types.Rating"
                    }
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "studios": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userRating": {
                    "type": "number"
                }
            }
        },
        "types.MediaType": {
            "type": "string",
            "enum": [
                "movie",
                "series",
                "season",
                "episode",
                "artist",
                "album",
                "track",
                "playlist",
                "collection"
            ],
            "x-enum-varnames": [
                "MediaTypeMovie",
                "MediaTypeSeries",
                "MediaTypeSeason",
                "MediaTypeEpisode",
                "MediaTypeArtist",
                "MediaTypeAlbum",
                "MediaTypeTrack",
                "MediaTypePlaylist",
                "MediaTypeCollection"
            ]
        },
        "types.OllamaConfig": {
            "description": "Claude media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.AIClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "maxContextTokens": {
                    "type": "integer",
                    "example": 1000
                },
                "maxTokens": {
                    "type": "integer",
                    "example": 100
                },
                "model": {
                    "type": "string",
                    "example": "claude-2"
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "temperature": {
                    "type": "number",
                    "example": 0.5
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.OpenAIConfig": {
            "description": "Claude media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.AIClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "maxContextTokens": {
                    "type": "integer",
                    "example": 1000
                },
                "maxTokens": {
                    "type": "integer",
                    "example": 100
                },
                "model": {
                    "type": "string",
                    "example": "claude-2"
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "temperature": {
                    "type": "number",
                    "example": 0.5
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.Playlist": {
            "type": "object",
            "properties": {
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "itemCount": {
                    "type": "integer"
                },
                "itemIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "types.PlexConfig": {
            "description": "Plex media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.MediaClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": "your-plex-token"
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.RadarrConfig": {
            "description": "Emby media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.AutomationClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.Season": {
            "type": "object",
            "properties": {
                "artwork": {
                    "$ref": "#/definitions/types.Artwork"
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "episodeCount": {
                    "type": "integer"
                },
                "overview": {
                    "type": "string"
                },
                "releaseDate": {
                    "type": "string"
                },
                "seasonNumber": {
                    "type": "integer"
                },
                "seriesID": {
                    "type": "string"
                },
                "seriesName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.Series": {
            "type": "object",
            "properties": {
                "contentRating": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "episodeCount": {
                    "type": "integer"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "network": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "seasonCount": {
                    "type": "integer"
                },
                "seasons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Season"
                    }
                },
                "status": {
                    "description": "e.g., \"Ended\", \"Continuing\"",
                    "type": "string"
                }
            }
        },
        "types.SonarrConfig": {
            "description": "Emby media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.AutomationClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.SubsonicConfig": {
            "description": "Supersonic music server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "baseURL": {
                    "type": "string",
                    "example": "http://localhost:8096"
                },
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "clientType": {
                    "$ref": "#/definitions/types.MediaClientType"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "My Client"
                },
                "password": {
                    "type": "string",
                    "example": "your-password"
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                },
                "validateConn": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.Track": {
            "type": "object",
            "properties": {
                "albumID": {
                    "type": "string"
                },
                "albumName": {
                    "type": "string"
                },
                "albumTitle": {
                    "type": "string"
                },
                "artistID": {
                    "type": "string"
                },
                "artistName": {
                    "type": "string"
                },
                "composer": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "discNumber": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "lyrics": {
                    "type": "string"
                },
                "trackNumber": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Suasor API",
	Description:      "API Server for Suasor",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
