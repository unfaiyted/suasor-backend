// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Dane Miller",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/client/{clientID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a client configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Delete client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "client deleted",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Client not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/admin/client/{clientID}/test": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Tests the connection to a client using the provided configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Test client connection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection test result",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_TestConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/admin/clients": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all client configurations for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Get all clients",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client category (e.g. 'ai', 'media', 'automation')",
                        "name": "clientCategory",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Clients retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_ClientList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/admin/clients/{clientType}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all clients of a specific type for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Get clients by type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client type (e.g. 'plex', 'jellyfin', 'emby')",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Clients retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_Client-types_ClientConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/admin/clients/{clientType}/test": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Tests the connection to a client using the provided configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Test client connection",
                "parameters": [
                    {
                        "description": "Updated client data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ClientTestRequest-client_ClientConfig"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Client type",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection test result",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_TestConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "User login data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated user",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AuthDataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or inactive account",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Invalidates the refresh token, effectively logging the user out",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log out a user",
                "parameters": [
                    {
                        "description": "Logout data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Get a new access token using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully refreshed token",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AuthDataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user with email, username, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered user",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AuthDataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Email or username already in use",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/auth/validate": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates the user's session token and returns current user profile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Validate user session",
                "responses": {
                    "200": {
                        "description": "Valid session with user details",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired session token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/media/multi": {
            "get": {
                "description": "Retrieves media items associated with any of the specified clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "clients"
                ],
                "summary": "Get media items from multiple clients",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of client IDs",
                        "name": "clientIDs",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/client/media/search": {
            "get": {
                "description": "Searches for media items across multiple clients based on query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "clients"
                ],
                "summary": "Search for media items across multiple clients",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of client IDs",
                        "name": "clientIDs",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type filter",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-map_string_array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/client/media/sync": {
            "post": {
                "description": "Creates or updates a mapping between a media item and a target client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "clients"
                ],
                "summary": "Sync a media item between clients",
                "parameters": [
                    {
                        "description": "Sync request with source and target client info",
                        "name": "syncRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item synced successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Media item not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/ai/analyze": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Use AI to analyze provided content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Analyze content with AI",
                "parameters": [
                    {
                        "description": "Content analysis request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AiContentAnalysisRequest"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Analysis response",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AiContentAnalysisResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/ai/conversation/message": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Continue a conversation with the AI by sending a new message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Send a message in an existing AI conversation",
                "parameters": [
                    {
                        "description": "Message request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ConversationMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AI response",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_ConversationMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Conversation not owned by user",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Conversation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/ai/conversation/start": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initialize a new conversational session with the AI for personalized recommendations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Start a new AI conversation for recommendations",
                "parameters": [
                    {
                        "description": "Conversation initialization request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.StartConversationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation started",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_ConversationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/ai/recommendations": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get content recommendations from an AI service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Get AI-powered content recommendations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Recommendation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RecommendationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recommendation response",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_AiRecommendationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/calendar": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves calendar events from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Get calendar from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Calendar events retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID or dates",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/command": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executes a command on the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Execute command on automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Command details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AutomationExecuteCommandRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Command execution response",
                        "schema": {
                            "$ref": "#/definitions/responses.AutomationExecuteCommandResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/item": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new media item to the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Add media to automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Media details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AddMediaRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Media added",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/item/{itemID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific media item from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Get media by ID from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client or media ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing media item in the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Update media in automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Media details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateMediaRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media updated",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a media item from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Delete media from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media deleted",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client or media ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/library": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all library items from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Get library items from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Library items retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/profiles/metadata": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all metadata profiles from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Get metadata profiles from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metadata profiles retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/profiles/quality": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all quality profiles from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Get quality profiles from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quality profiles retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Searches for media items in the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Search media in automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID or query",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves system status information from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Get automation client system status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "System status information",
                        "schema": {
                            "$ref": "#/definitions/responses.SystemStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/automation/tags": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all tags from the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Get tags from automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tags retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new tag in the automation client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "automation",
                    "clients"
                ],
                "summary": "Create tag in automation client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tag details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateTagRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tag created",
                        "schema": {
                            "$ref": "#/definitions/responses.EmptyAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media": {
            "get": {
                "description": "Retrieves all media items for a specific client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "clients"
                ],
                "summary": "Get media items by client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type filter",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/album/item/{clientItemID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific music album from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get album by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Album ID",
                        "name": "albumID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Album retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/album/{clientItemID}/tracks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific music artist from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get artist by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artist ID",
                        "name": "artistID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/item/{clientItemID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a media item from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "clients"
                ],
                "summary": "Delete a media item from a client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "clientItemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item deleted",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/albums/favorites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the user's favorite albums from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get favorite albums",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of albums to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite albums retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/albums/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves albums from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get albums by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/albums/latest/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most recently added albums",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get latest albums by added date",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of albums to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/albums/popular/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves most popular albums",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get popular albums",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of albums to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/albums/top": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most popular albums from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get top albums from a client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client Type",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of albums to retrieve (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/albums/year/{year}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves albums from all connected clients that were released in the specified year",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get albums by release year",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Release year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid year",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/artists/favorites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the user's favorite artists from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get favorite artists from a client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client Type",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of artists to retrieve (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artists retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/artists/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves artists from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get artists by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of artists to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artists retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/artists/popular/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves most popular artists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get popular artists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of artists to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artists retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/artists/top": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most popular artists from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get top artists from a client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client Type",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of artists to retrieve (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artists retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/artists/{artistID}/albums": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all albums for a specific artist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get albums by artist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artist ID",
                        "name": "artistID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/artists/{artistID}/similar": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves artists similar to a specific artist from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get similar artists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artist ID",
                        "name": "artistID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of artists to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Similar artists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search for music across all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Search music (artists, albums, tracks)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Music search results retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_MediaItemResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/tracks/favorites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the user's favorite tracks from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get favorite tracks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of tracks to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/tracks/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves tracks from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get tracks by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/tracks/recently-added": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most recently added tracks from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get recently added tracks from a client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client Type",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of tracks to retrieve (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/tracks/recently-played": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the user's recently played tracks from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get recently played tracks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of tracks to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recently played tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/tracks/top": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most popular tracks from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get top tracks from a client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client Type",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of tracks to retrieve (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/music/tracks/{trackID}/similar": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves tracks similar to a specific track from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get similar tracks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Track ID",
                        "name": "trackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of tracks to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Similar tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/actor/{actor}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series featuring a specific actor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get series by actor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actor name",
                        "name": "actor",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/creator/{creator}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series by a specific creator/director",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get series by creator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Creator name",
                        "name": "creator",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get series by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_responses_MediaItemResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/latest/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most recently added TV series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get latest series by added date",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of series to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/popular/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves most popular TV series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get popular series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of series to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/rating": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series with ratings within the specified range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get series by rating range",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Minimum rating",
                        "name": "min",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum rating",
                        "name": "max",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid rating parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search for TV series across all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Search series",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/top-rated/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the highest rated TV series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get top rated series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of series to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid count",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/year/{year}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves TV series from all connected clients that were released in the specified year",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get series by release year",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Release year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid year",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/{seriesID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific TV series from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get series by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Series ID",
                        "name": "seriesID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/series/{seriesID}/seasons": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all seasons for a specific TV series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "clients"
                ],
                "summary": "Get seasons for a series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Series ID",
                        "name": "seriesID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/track/item/{clientItemId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific music track from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "clients"
                ],
                "summary": "Get track by ID from client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Track ID",
                        "name": "trackID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/{clientItemID}": {
            "put": {
                "description": "Updates a client media item in the database by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "clients"
                ],
                "summary": "Update an existing client media item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Media item ID",
                        "name": "clientItemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Media item data to update",
                        "name": "mediaItem",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MediaItem-any"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media item updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Media item not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/{mediaType}": {
            "post": {
                "description": "Creates a new media item in the database with client association",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "clients"
                ],
                "summary": "Create a new media item associated with a client",
                "parameters": [
                    {
                        "description": "Media item data with type, client info, and type-specific data",
                        "name": "mediaItem",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MediaItem-any"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Media item created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/media/{mediaType}/{clientItemID}": {
            "get": {
                "description": "Retrieves a media item using its client-specific ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "clients"
                ],
                "summary": "Get media item by client-specific ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client-specific item ID",
                        "name": "clientItemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media item retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Media item not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/actor/{actor}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies from all connected clients featuring the specified actor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get movies by actor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actor name",
                        "name": "actor",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/director/{director}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies from all connected clients directed by the specified director",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get movies by director",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Director name",
                        "name": "director",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/external/{source}/{externalID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a movie from all connected clients by external ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get movie by external ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Source",
                        "name": "source",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "externalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/genre/{genre}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies from all connected clients that match the specified genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get movies by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/item/{clientItemId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific movie from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get movie by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Movie ID",
                        "name": "clientItemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/latest/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most recently added movies from all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get latest added movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of movies to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid count format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/popular/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the most popular movies from all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get popular movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of movies to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid count format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/rating": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies from all connected clients with ratings in the specified range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get movies by rating range",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Minimum rating (e.g. 7.5)",
                        "name": "min",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Maximum rating (e.g. 10.0)",
                        "name": "max",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid rating format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Searches for movies across all connected clients matching the query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Search for movies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Missing search query",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/top-rated/{count}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the highest rated movies from all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get top rated movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of movies to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid count format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/movie/year/{year}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies from all connected clients that were released in the specified year",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "clients"
                ],
                "summary": "Get movies by release year",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Release year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid year",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/user-data/{mediaType}": {
            "get": {
                "description": "Retrieves user media item data for synchronization with a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "clients"
                ],
                "summary": "Get user media item data for a client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type like movie, series, track, etc.",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Since date (default 24 hours ago)",
                        "name": "since",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved client media item data",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/user-data/{mediaType}/sync": {
            "post": {
                "description": "Synchronizes user media item data from an external client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "clients"
                ],
                "summary": "Synchronize user media item data from a client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "description": "Media item data to synchronize",
                        "name": "items",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UserMediaItemDataSyncRequest"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/user-data/{mediaType}/{clientItemID}": {
            "get": {
                "description": "Retrieves user media item data for a specific user and client item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "clients"
                ],
                "summary": "Get user media item data by client ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client Item ID",
                        "name": "clientItemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user media item data",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/user-data/{mediaType}/{clientItemID}/play": {
            "post": {
                "description": "Records a play event from a client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "clients"
                ],
                "summary": "Record a client play event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client Item ID",
                        "name": "clientItemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "description": "Media play information",
                        "name": "mediaPlay",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UserMediaItemDataRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Play event recorded successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/user-data/{mediaType}/{clientItemID}/state": {
            "get": {
                "description": "Retrieves the current playback state for a client item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "clients"
                ],
                "summary": "Get playback state for a client item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client Item ID",
                        "name": "clientItemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type like movie, series, track, etc.",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved playback state",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the playback state for a client item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "clients"
                ],
                "summary": "Update playback state for a client item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client Item ID",
                        "name": "clientItemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Playback state information",
                        "name": "state",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Playback state updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/{listType}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all playlists from the client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists",
                    "clients"
                ],
                "summary": "Get all playlists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of playlists to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lists retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_ListData"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new playlist on the specified client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists",
                    "clients"
                ],
                "summary": "Create a new playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "List creation data",
                        "name": "list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "List created",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_ListData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/{listType}/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Searches for playlists matching the given query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists",
                    "clients"
                ],
                "summary": "Search playlists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lists found",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_ListData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/{listType}/{listID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific list from the client by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists",
                    "clients"
                ],
                "summary": "Get list by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List ID",
                        "name": "listID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_ListData"
                        }
                    },
                    "400": {
                        "description": "Invalid client ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing playlist on the specified client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists",
                    "clients"
                ],
                "summary": "Update a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List ID",
                        "name": "listID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "List update data",
                        "name": "list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List updated",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_ListData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a playlist from the specified client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists",
                    "clients"
                ],
                "summary": "Delete a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List ID",
                        "name": "listID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List deleted",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/{listType}/{listID}/items": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a media item to an existing playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists",
                    "clients"
                ],
                "summary": "Add an item to a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List ID",
                        "name": "listID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Item to add",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item added to playlist",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientID}/{listType}/{playlistID}/items/{itemID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a media item from an existing playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists",
                    "clients"
                ],
                "summary": "Remove an item from a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List ID",
                        "name": "playlistID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID to remove",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item removed from playlist",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/client/{clientType}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all clients of a specific type for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Get all clients of a specific type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client type (e.g. 'plex', 'jellyfin', 'emby')",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Clients retrieved",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_Client-types_ClientConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new client configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Create a new client",
                "parameters": [
                    {
                        "description": "client data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ClientRequest-types_ClientConfig"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Client type",
                        "name": "clientType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "client created",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_Client-types_ClientConfig"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/config": {
            "get": {
                "description": "Returns the current system configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get current configuration",
                "responses": {
                    "200": {
                        "description": "Configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-types_Configuration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the system-wide application configuration (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Update application configuration",
                "parameters": [
                    {
                        "description": "Configuration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Configuration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/config/file": {
            "get": {
                "description": "Returns the file-based system configuration (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get file-based configuration",
                "responses": {
                    "200": {
                        "description": "File configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-types_Configuration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "description": "Saves the configuration to file only (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Save configuration to file",
                "parameters": [
                    {
                        "description": "Configuration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Configuration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration saved to file successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/config/reset": {
            "post": {
                "description": "Resets the system configuration to default values (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Reset configuration to defaults",
                "responses": {
                    "200": {
                        "description": "Configuration reset successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "returns JSON object with health statuses.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "checks app and database health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_HealthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/jobs/active": {
            "get": {
                "description": "Returns a list of all currently running jobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get all active job runs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_JobRun"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/media-sync": {
            "get": {
                "description": "Returns a list of job runs for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get job runs for current user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of results (default 50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaSyncJob"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates or updates a media sync job for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Setup media sync job",
                "parameters": [
                    {
                        "description": "Media sync job setup",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.SetupMediaSyncJobRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/media-sync/run": {
            "post": {
                "description": "Runs a media sync job manually for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Run media sync job manually",
                "parameters": [
                    {
                        "description": "Media sync job run",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RunMediaSyncJobRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/recommendations": {
            "get": {
                "description": "Returns a list of recommendations for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get recommendations for current user",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Only return active recommendations (default true)",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit number of results (default 50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_Recommendation"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/recommendations/{id}/dismiss": {
            "post": {
                "description": "Marks a recommendation as dismissed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Dismiss recommendation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Recommendation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/recommendations/{id}/viewed": {
            "put": {
                "description": "Updates whether a recommendation has been viewed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Update recommendation viewed status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Recommendation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Viewed status update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateRecommendationViewedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/runs": {
            "get": {
                "description": "Returns a list of recent job runs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get recent job runs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of results (default 50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_JobRun"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/runs/{id}/progress": {
            "get": {
                "description": "Returns progress information for a specific job run",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get job run progress",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job Run ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_JobRun"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/schedules": {
            "get": {
                "description": "Returns a list of all job schedules",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get all job schedules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_JobSchedule"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing job schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Update job schedule",
                "parameters": [
                    {
                        "description": "Job schedule update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateJobScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_JobSchedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new job schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Create a new job schedule",
                "parameters": [
                    {
                        "description": "Job schedule to create",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.JobSchedule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_JobSchedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/schedules/{name}": {
            "get": {
                "description": "Returns a specific job schedule by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get job schedule by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_JobSchedule"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/jobs/{name}/run": {
            "post": {
                "description": "Triggers a job to run immediately",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Run job manually",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-error"
                        }
                    }
                }
            }
        },
        "/media/credits": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new credit associating a person with a media item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Create a new credit",
                "parameters": [
                    {
                        "description": "Credit information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateCreditRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Credit created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_Credit"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/credits/person/{personID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all credits associated with a specific person",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Get all credits for a person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Person ID",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credits retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-array_models_Credit"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid person ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/credits/{creditID}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a credit record with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Update an existing credit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Credit ID",
                        "name": "creditID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated credit information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateCreditRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credit updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Credit"
                        }
                    },
                    "400": {
                        "description": "Invalid credit ID or request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Credit not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a credit record by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Delete a credit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Credit ID",
                        "name": "creditID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credit deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid credit ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Credit not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/credits/{itemID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all credits (cast and crew) associated with a specific media item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Get all credits for a media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credits retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-array_models_Credit"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid media item ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates multiple credits for a specific media item in a single operation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Create multiple credits for a media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Multiple credits information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateCreditRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Credits created successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-models_Credit"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid media item ID or request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/credits/{itemID}/cast": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all cast credits associated with a specific media item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Get cast for a media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cast credits retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-array_models_Credit"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid media item ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/credits/{itemID}/crew": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all crew credits associated with a specific media item, optionally filtered by department",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Get crew for a media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by department (e.g., 'Directing', 'Writing')",
                        "name": "department",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Crew credits retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-array_models_Credit"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid media item ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/credits/{itemID}/directors": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all director credits associated with a specific media item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Get directors for a media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Director credits retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-array_models_Credit"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid media item ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/credits/{itemID}/{type}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves credits for a media item filtered by type (cast, crew, directors)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credits"
                ],
                "summary": "Get credits by type for a media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Credit type (cast, crew, directors)",
                        "name": "type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credits retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-models_Credit"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid media item ID or credit type",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/movie/actor/{actor}": {
            "get": {
                "description": "Retrieves movies featuring a specific actor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get movies by actor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actor name",
                        "name": "actor",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/client/{clientID}/item/{clientItemID}": {
            "get": {
                "description": "Retrieves movies associated with a specific client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get movies by client-specific ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client Item ID",
                        "name": "clientItemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/director/{director}": {
            "get": {
                "description": "Retrieves movies directed by a specific director",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get movies by director",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Director name",
                        "name": "director",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/genre/{genre}": {
            "get": {
                "description": "Retrieves movies that match a specific genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get movies by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/latest": {
            "get": {
                "description": "Retrieves the most recently added movies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get latest added movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default 30)",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/popular": {
            "get": {
                "description": "Retrieves the most popular movies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get popular movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/rating/{rating}": {
            "get": {
                "description": "Retrieves movies that match a specific rating",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get movies by rating",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Rating",
                        "name": "rating",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/recently-added": {
            "get": {
                "description": "Retrieves the most recently added movies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get recently added movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default 30)",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/search": {
            "get": {
                "description": "Searches for movies that match the query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Search movies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/top-rated": {
            "get": {
                "description": "Retrieves the highest rated movies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get top rated movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/year/{year}": {
            "get": {
                "description": "Retrieves movies released in a specific year",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get movies by year",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Release year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/{id}": {
            "get": {
                "description": "Retrieves a specific movie by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get movie by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movie/{itemID}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates user-specific data for a movie (favorite, watched status, rating, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Update user data for a movie",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UserMediaItemDataUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movies": {
            "get": {
                "description": "Retrieves all movies in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies",
                    "core"
                ],
                "summary": "Get all movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movies/user/favorites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies that a user has marked as favorites",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get user favorite movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/movies/user/recommended": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies recommended for the user based on their preferences and watch history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get recommended movies for user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movies/user/watched": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies that a user has watched",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get user watched movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/movies/user/watchlist": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves movies that a user has added to their watchlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movies in user watchlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of movies to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/albums/latest": {
            "get": {
                "description": "Retrieves the latest albums added to the library",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get latest albums by added date",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of albums to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default 30)",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/albums/popular": {
            "get": {
                "description": "Retrieves the most popular albums based on play count, ratings, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get popular albums",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of albums to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/albums/top": {
            "get": {
                "description": "Retrieves the top albums based on play count, ratings, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get top albums",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of albums to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/albums/year/{year}": {
            "get": {
                "description": "Retrieves albums released in a specific year",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get albums by release year",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Release year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of albums to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/albums/{albumID}": {
            "get": {
                "description": "Retrieves an album by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get album by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Album ID",
                        "name": "albumID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Album retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Album not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/albums/{id}/tracks": {
            "get": {
                "description": "Retrieves all tracks for a specific album",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get tracks by album ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Album ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Album not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/artist/{artistID}/albums": {
            "get": {
                "description": "Retrieves all albums for a specific artist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get albums by artist ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Artist ID",
                        "name": "artistID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Artist not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/artist/{id}/albums": {
            "get": {
                "description": "Retrieves all albums for a specific artist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get albums for an artist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Artist ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Artist not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/artist/{id}/similar": {
            "get": {
                "description": "Retrieves the similar artists to a specific artist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get similar artists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Artist ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Similar artists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Artist not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/artists/popular": {
            "get": {
                "description": "Retrieves the most popular artists based on play count, ratings, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get popular artists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of artists to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/artists/{artistID}": {
            "get": {
                "description": "Retrieves an artist by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get artist by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Artist ID",
                        "name": "artistID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Artist not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/genre/{genre}": {
            "get": {
                "description": "Get music recommendations based on a genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get genre recommendations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Music items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/genres/{genre}/albums": {
            "get": {
                "description": "Retrieves albums by genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get albums by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of albums to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/genres/{genre}/artists": {
            "get": {
                "description": "Retrieves artists by genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get artists by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of artists to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/genres/{genre}/tracks": {
            "get": {
                "description": "Retrieves tracks by genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get tracks by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of tracks to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/recently-added": {
            "get": {
                "description": "Retrieves recently added music",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get recently added music",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of music items to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default 30)",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Music items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/search": {
            "get": {
                "description": "Search for music items (tracks, albums, artists) by query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Search music",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type to search for (track, album, artist)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItemList"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/track/{itemID}": {
            "get": {
                "description": "Retrieves a track by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get track by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Track not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/track/{trackID}/similar": {
            "get": {
                "description": "Retrieves tracks similar to a specific track",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get similar tracks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "trackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of tracks to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Similar tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Track not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/tracks/recently-added": {
            "get": {
                "description": "Retrieves tracks that were recently added to the library",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get recently added tracks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of tracks to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default 30)",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/tracks/top": {
            "get": {
                "description": "Retrieves the top tracks based on play count, ratings, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music",
                    "core"
                ],
                "summary": "Get top tracks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of tracks to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/user/albums/favorites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves albums that a user has marked as favorites",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get user favorite albums",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of albums to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Albums retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Album"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/user/artists/favorites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves artists that a user has marked as favorites",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get user favorite artists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of artists to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Artist"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/user/tracks/favorites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves tracks that a user has marked as favorites",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get user favorite tracks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of tracks to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/user/tracks/recently-played": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves tracks that a user has recently played",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Get recently played tracks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of tracks to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Track"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/music/user/tracks/{trackID}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates user-specific data for a track (favorite, rating, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "Update user data for a track",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "trackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UserMediaItemDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Track"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Track not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/series/continue-watching": {
            "get": {
                "description": "Retrieves series that are currently in progress (partially watched)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "core"
                ],
                "summary": "Get series in progress",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of series to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/series/creator/{creatorId}": {
            "get": {
                "description": "Retrieves series created by a specific creator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "core"
                ],
                "summary": "Get series by creator",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Creator ID",
                        "name": "creatorId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of series to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/series/network/{network}": {
            "get": {
                "description": "Retrieves series from a specific TV network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "core"
                ],
                "summary": "Get series by network",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Network name",
                        "name": "network",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of series to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/series/next-up": {
            "get": {
                "description": "Retrieves the next unwatched episodes for series in progress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "core"
                ],
                "summary": "Get next episodes to watch",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of episodes to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episodes retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_types_Episode"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/series/recently-aired": {
            "get": {
                "description": "Retrieves episodes that have recently aired based on their air date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "core"
                ],
                "summary": "Get recently aired episodes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of episodes to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default 7)",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episodes retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_types_Episode"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/series/{id}/episodes": {
            "get": {
                "description": "Retrieves all episodes across all seasons for a specific series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "core"
                ],
                "summary": "Get all episodes for a series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Series ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episodes retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_types_Episode"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Series not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/series/{seriesID}/seasons": {
            "get": {
                "description": "Retrieves all seasons for a specific series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "core"
                ],
                "summary": "Get seasons for a series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Series ID",
                        "name": "seriesID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Seasons retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_types_Season"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Series not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/series/{seriesID}/seasons/{seasonNumber}/episodes": {
            "get": {
                "description": "Retrieves all episodes for a specific season of a series",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series",
                    "core"
                ],
                "summary": "Get episodes for a season",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Series ID",
                        "name": "seriesID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Season number",
                        "name": "seasonNumber",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episodes retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_types_Episode"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Series or season not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}": {
            "get": {
                "description": "Retrieves media items of a specific type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get media items by type",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new media item owned by a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media"
                ],
                "summary": "Create a new user-owned media item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Media item data with type, client info, and type-specific data",
                        "name": "mediaItem",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.MediaItemCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Media item created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Media item not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/client/{clientID}": {
            "get": {
                "description": "Retrieves media items associated with a specific client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get media items by client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "clientID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/external/{source}/{externalId}": {
            "get": {
                "description": "Retrieves a media item using its external source ID (e.g., TMDB ID)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get media item by external source ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External source name (e.g., tmdb, imdb)",
                        "name": "source",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "External ID from the source",
                        "name": "externalId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media item retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Media item not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/external/{source}/{id}": {
            "get": {
                "description": "Retrieves a specific media item by its external ID from a source",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get media item by external ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source of the external ID (e.g., tmdb, imdb)",
                        "name": "source",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media item retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Media item not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/genre/{genre}": {
            "get": {
                "description": "Retrieves media items that match a specific genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get media items by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/latest": {
            "get": {
                "description": "Retrieves the most recently added media items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get latest added media items",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/most-played": {
            "get": {
                "description": "Retrieves the most played media items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get most played media items",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum quantity items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/person/{personID}": {
            "get": {
                "description": "Retrieves media items associated with a specific person (actor, director, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get media items by person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Person ID",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role filter (actor, director, etc.)",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/popular": {
            "get": {
                "description": "Retrieves popular media items based on views or ratings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get popular media items",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/rating/{rating}": {
            "get": {
                "description": "Retrieves media items that match a specific rating",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get media items by rating",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Rating",
                        "name": "rating",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of media items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/recently-added": {
            "get": {
                "description": "Retrieves recently added media items of a specific type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get recently added media items",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default 30)",
                        "name": "days",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/search": {
            "get": {
                "description": "Searches for media items based on query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Search media items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/top-rated": {
            "get": {
                "description": "Retrieves the highest rated media items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get top rated media items",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/user/{userID}": {
            "get": {
                "description": "Retrieves media items owned by a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media"
                ],
                "summary": "Get media items by user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/year/{year}": {
            "get": {
                "description": "Retrieves media items released in a specific year",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get media items by release year",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Release year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media items retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/{id}": {
            "get": {
                "description": "Retrieves a specific media item by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "core"
                ],
                "summary": "Get media item by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media item retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "Media item not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/media/{mediaType}/{itemID}": {
            "put": {
                "description": "Updates an existing media item owned by a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media"
                ],
                "summary": "Update an existing user-owned media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated media item data",
                        "name": "mediaItem",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.MediaItemUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media item updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Not authorized to update this media item",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Media item not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user-owned media item by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media"
                ],
                "summary": "Delete a user-owned media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted user media item",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/people": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Searches for people whose names match the provided query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Search for people by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Maximum number of results to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "People retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-array_models_Person"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing search query or invalid limit",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new person record with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Create a new person",
                "parameters": [
                    {
                        "description": "Person information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreatePersonRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Person created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_Person"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/people/import": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Imports a person from an external source with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Import a person from an external source",
                "parameters": [
                    {
                        "description": "Person import information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ImportPersonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Person imported successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_Person"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/people/popular": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of popular people, sorted by popularity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Get popular people",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Maximum number of results to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Popular people retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-array_models_Person"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid limit",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/people/roles/{role}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves people filtered by their professional role (Actor, Director, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Get people by role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role to filter by (e.g., 'Actor', 'Director')",
                        "name": "role",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "People retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.APIResponse-array_models_Person"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing role parameter",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/people/{personID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific person by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Get person by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Person ID",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Person retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_Person"
                        }
                    },
                    "400": {
                        "description": "Invalid person ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Person not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a person record with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Update an existing person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Person ID",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated person information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdatePersonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Person updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_Person"
                        }
                    },
                    "400": {
                        "description": "Invalid person ID or request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Person not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a person record by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Delete a person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Person ID",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Person deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid person ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Person not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/people/{personID}/credits": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific person along with all their credits",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Get person with their credits",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Person ID",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Person and their credits retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_PersonWithCredits"
                        }
                    },
                    "400": {
                        "description": "Invalid person ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Person not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/people/{personID}/credits/grouped": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a person's credits organized by department and role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Get a person's credits grouped by type",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Person ID",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credits grouped by department and role",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_PersonCreditsByRole"
                        }
                    },
                    "400": {
                        "description": "Invalid person ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/people/{personID}/external-ids": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds or updates an external ID reference for a person",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Add external ID to person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Person ID",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "External ID information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ExternalIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "External ID added successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid person ID or request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/recommendations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of recommendations for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recommendations"
                ],
                "summary": "Get recommendations for the current user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by media type (movie, series, music)",
                        "name": "mediaType",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of recommendations to return (default: 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recommendations retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_RecommendationsListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/recommendations/rate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets a user rating for a specific recommendation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recommendations"
                ],
                "summary": "Rate a recommendation",
                "parameters": [
                    {
                        "description": "Recommendation ID and rating",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RateRecommendationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recommendation rated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Recommendation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/recommendations/recent": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of recently created recommendations for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recommendations"
                ],
                "summary": "Get recent recommendations for the current user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default: 7)",
                        "name": "days",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by media type (movie, series, music)",
                        "name": "mediaType",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of recommendations to return (default: 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recent recommendations retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_RecommendationsListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/recommendations/top": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of top-scored recommendations for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recommendations"
                ],
                "summary": "Get top-scored recommendations for the current user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Minimum score (0-1) for recommendations (default: 0.7)",
                        "name": "minScore",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by media type (movie, series, music)",
                        "name": "mediaType",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of recommendations to return (default: 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Top recommendations retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_RecommendationsListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/recommendations/view": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks a specific recommendation as viewed for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recommendations"
                ],
                "summary": "Mark a recommendation as viewed",
                "parameters": [
                    {
                        "description": "Recommendation ID to mark as viewed",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.MarkRecommendationAsViewedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recommendation marked as viewed successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Recommendation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/recommendations/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific recommendation by its ID for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recommendations"
                ],
                "summary": "Get a specific recommendation by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Recommendation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recommendation retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_RecommendationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid recommendation ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Recommendation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "Searches for content in the database, media clients, and metadata sources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search for content across all sources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Limit search to specific media type (movie, series, music, person)",
                        "name": "mediaType",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Maximum number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.SearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/search/recent": {
            "get": {
                "description": "Returns a list of the user's recent searches",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Get recent searches for the current user",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.RecentSearchesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/search/suggestions": {
            "get": {
                "description": "Returns suggestions based on partial search input",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Get search suggestions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Partial search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Maximum number of suggestions",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.SearchSuggestionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/search/trending": {
            "get": {
                "description": "Returns a list of popular searches across the platform",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Get trending searches across all users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.TrendingSearchesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/series/user/continue-watching": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves series that are currently in progress (partially watched)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get series in progress",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of series to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/user/favorites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves series that a user has marked as favorites",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get user favorite series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of series to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/user/next-up": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the next unwatched episodes for series in progress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get next episodes to watch",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of episodes to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episodes retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Episode"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/user/recently-watched": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the user's recently watched episodes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get recently watched episodes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default 7)",
                        "name": "days",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of episodes to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episodes retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Episode"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/user/watched": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves series that a user has watched",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get user watched series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of series to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/user/watchlist": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves series that a user has added to their watchlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Get series in user watchlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of series to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_Series"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/series/user/{id}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates user-specific data for a series (favorite, watched status, rating, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "series"
                ],
                "summary": "Update user data for a series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Series ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserMediaItemData-types_Series"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Series updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Series"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Series not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-config": {
            "get": {
                "description": "Returns the configuration for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get user configuration",
                "responses": {
                    "200": {
                        "description": "User configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the configuration for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Update user configuration",
                "parameters": [
                    {
                        "description": "User configuration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User configuration updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/data/{dataID}": {
            "get": {
                "description": "Retrieves a specific user media item data entry by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "core"
                ],
                "summary": "Get a specific user media item data entry by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User Media Item Data ID",
                        "name": "dataID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user media item data",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/clear": {
            "delete": {
                "description": "Delete all play user-data entries for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data"
                ],
                "summary": "Clear a user's play user-data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type like movie, series, track, etc.",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "History cleared successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/continue-watching": {
            "get": {
                "description": "Get media items that a user has started but not completed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data"
                ],
                "summary": "Get a user's continue watching list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type filter (movie, series, episode, track, etc.)",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved continue watching items",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/favorites": {
            "get": {
                "description": "Get all media items marked as favorites by a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data"
                ],
                "summary": "Get a user's favorite media items",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Media type like movie, series, track, etc.",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved favorites",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/history": {
            "get": {
                "description": "Get a user's media play user-data with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data"
                ],
                "summary": "Get a user's media play user-data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by completion status",
                        "name": "completed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved play user-data",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/recent": {
            "get": {
                "description": "Get a user's recent media user-data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data"
                ],
                "summary": "Get a user's recent media user-data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of days to look back (default 7)",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved recent user-data",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/{id}/check": {
            "get": {
                "description": "Checks if a user has data for a specific media item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "core"
                ],
                "summary": "Check if a user has data for a specific media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type like movie, series, track, etc.",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully checked user media item data",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-bool"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/{itemID}": {
            "get": {
                "description": "Retrieves user media item data for a specific user and media item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "core"
                ],
                "summary": "Get user media item data for a specific user and media item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user media item data",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a specific user media item data entry by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data",
                    "core"
                ],
                "summary": "Delete a specific user media item data entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type like movie, series, track, etc.",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted user media item data",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/{itemID}/favorite": {
            "put": {
                "description": "Mark or unmark a media item as a favorite",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data"
                ],
                "summary": "Toggle favorite status for a media item",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Favorite status",
                        "name": "favorite",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type like movie, series, track, etc.",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite status updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/{itemID}/rating": {
            "put": {
                "description": "Set a user's rating for a media item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data"
                ],
                "summary": "Update user rating for a media item",
                "parameters": [
                    {
                        "type": "number",
                        "description": "User rating (0-10)",
                        "name": "rating",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media type like movie, series, track, etc.",
                        "name": "mediaType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (optional, uses authenticated user ID if not provided)",
                        "name": "userID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rating updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user-data/{mediaType}/{itemID}/record": {
            "post": {
                "description": "Record a new play event for a media item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-data"
                ],
                "summary": "Record a media play event",
                "parameters": [
                    {
                        "description": "Media play information",
                        "name": "mediaPlay",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UserMediaItemDataRequest"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Media Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Play event recorded successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_UserMediaItemData-types_MediaData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/avatar": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Uploads a new avatar image for the currently authenticated user",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Upload user avatar",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Avatar image file (jpeg, png, gif only)",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully uploaded avatar",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-requests_AvatarUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid file format or size",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/forgot-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request a password reset email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "Forgot password request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset email sent",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Changes the password for the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Password change information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or incorrect current password",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile information for the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the current user's profile",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profile",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the profile information for the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Updated profile information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user profile",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or email/username already exists",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Creates a new user account with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered user",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or email/username already exists",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/reset-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset the user's password using a password reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset password request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Password reset token not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/{userID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a user by their userID (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user userID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a user account (admin only)",
                "tags": [
                    "users"
                ],
                "summary": "Delete a user account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - User successfully deleted"
                    },
                    "400": {
                        "description": "Invalid user userID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/{userID}/activate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Activates a user account (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Activate a user account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully activated user account",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user userID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/{userID}/deactivate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deactivates a user account (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Deactivate a user account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deactivated user account",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user userID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/user/{userID}/role": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Changes a user's role (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change user role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New role information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ChangeRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed user role",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-responses_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user userID format or invalid role",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not logged in",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-responses_ErrorDetails"
                        }
                    }
                }
            }
        },
        "/{listType}": {
            "get": {
                "description": "Retrieves all lists in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Get all lists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of lists to return (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_ListData"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new list for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Create a new list",
                "parameters": [
                    {
                        "description": "List details",
                        "name": "list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ListCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "List created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Playlist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/favorites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the favorites for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Get favorites",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of lists to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_ListData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/genre/{genre}": {
            "get": {
                "description": "Retrieves lists that match a specific genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Get lists by genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre name",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_ListData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/search": {
            "get": {
                "description": "Searches for lists that match the query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Search lists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_ListData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all lists owned by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Get user's lists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of lists to return (default 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lists retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-array_models_MediaItem-types_ListData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a list owned by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Delete a list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "List not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/{id}/reorder": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reorders the items in a list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Reorder list items",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reorder request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ListReorderRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List reordered successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_ListData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "List not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/{id}/tracks": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a track to a list owned by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Add a track to a list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Track details",
                        "name": "track",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ListAddTrackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track added successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Playlist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "List not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/{id}/tracks/{trackId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a track from a list owned by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Remove a track from a list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "trackId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track removed successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Playlist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "List not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/{listID}": {
            "get": {
                "description": "Retrieves a specific playlist by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Get playlist by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "listID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_ListData"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "List not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/{listID}/items": {
            "get": {
                "description": "Retrieves all tracks in a specific playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Get tracks in a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "listID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tracks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItemList"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "List not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/{listID}/items/{itemID}": {
            "post": {
                "description": "Adds a media item to an existing playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Add an item to a playlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "listID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID to add",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item added to playlist",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "List not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        },
        "/{listType}/{listId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing list owned by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Update a list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "List ID",
                        "name": "listId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List type (e.g. 'playlist', 'collection')",
                        "name": "listType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated list details",
                        "name": "list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ListUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.APIResponse-models_MediaItem-types_Playlist"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "404": {
                        "description": "List not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse-any"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.ErrorType": {
            "type": "string",
            "enum": [
                "FAILED_CHECK",
                "UNAUTHORIZED",
                "NOT_FOUND",
                "BAD_REQUEST",
                "INTERNAL_ERROR",
                "FORBIDDEN",
                "CONFLICT",
                "VALIDATION_ERROR",
                "RATE_LIMITED",
                "TIMEOUT",
                "SERVICE_UNAVAILABLE",
                "UNPROCESSABLE_ENTITY"
            ],
            "x-enum-varnames": [
                "ErrorTypeFailedCheck",
                "ErrorTypeUnauthorized",
                "ErrorTypeNotFound",
                "ErrorTypeBadRequest",
                "ErrorTypeInternalError",
                "ErrorTypeForbidden",
                "ErrorTypeConflict",
                "ErrorTypeValidation",
                "ErrorTypeRateLimited",
                "ErrorTypeTimeout",
                "ErrorTypeServiceUnavailable",
                "ErrorTypeUnprocessableEntity"
            ]
        },
        "map_string_array_models.MediaItem-types_MediaData": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/models.MediaItem-types_MediaData"
                }
            }
        },
        "models.AIModelPreferences": {
            "type": "object",
            "properties": {
                "defaultMaxTokens": {
                    "type": "integer",
                    "maximum": 100000,
                    "minimum": 100,
                    "example": 4000
                },
                "defaultModelForChat": {
                    "type": "string",
                    "example": "claude-3-opus-20240229"
                },
                "defaultModelForRecommendations": {
                    "type": "string",
                    "example": "claude-3-opus-20240229"
                },
                "defaultTemperature": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 0.7
                }
            }
        },
        "models.Award": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "isWinner": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "production": {
                    "description": "Movie/show the award was for",
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "models.Client-types_ClientConfig": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/types.ClientCategory"
                },
                "config": {},
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.ClientList": {
            "type": "object",
            "properties": {
                "claude": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.ClaudeConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "emby": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.EmbyConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "jellyfin": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.JellyfinConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "lidarr": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.LidarrConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "ollama": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.OllamaConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "openai": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.OpenAIConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "plex": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.PlexConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "radarr": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.RadarrConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "sonarr": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.SonarrConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "subsonic": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/definitions/types.ClientCategory"
                            },
                            "config": {
                                "$ref": "#/definitions/types.SubsonicConfig"
                            },
                            "createdAt": {
                                "type": "string"
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isEnabled": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/definitions/types.ClientType"
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "userID": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "models.Credit": {
            "type": "object",
            "properties": {
                "character": {
                    "description": "For actors",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "department": {
                    "description": "e.g., \"Directing\", \"Writing\", \"Sound\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaDepartment"
                        }
                    ]
                },
                "episodeCount": {
                    "description": "Number of episodes for TV series",
                    "type": "integer"
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isArtist": {
                    "type": "boolean"
                },
                "isCast": {
                    "description": "Credit type flags",
                    "type": "boolean"
                },
                "isCreator": {
                    "type": "boolean"
                },
                "isCrew": {
                    "type": "boolean"
                },
                "isGuest": {
                    "type": "boolean"
                },
                "job": {
                    "description": "Specific job title",
                    "type": "string"
                },
                "mediaItemID": {
                    "type": "integer"
                },
                "metadata": {
                    "description": "Credit metadata (awards, notes, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CreditMetadata"
                        }
                    ]
                },
                "name": {
                    "description": "Name as it appears in the credits",
                    "type": "string"
                },
                "order": {
                    "description": "Display order in credits",
                    "type": "integer"
                },
                "person": {
                    "$ref": "#/definitions/models.Person"
                },
                "personID": {
                    "type": "integer"
                },
                "role": {
                    "description": "e.g., \"Director\", \"Actor\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaRole"
                        }
                    ]
                },
                "seasonNumber": {
                    "description": "For TV series credits",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.CreditAward": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "isNominee": {
                    "type": "boolean"
                },
                "isWinner": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "models.CreditMetadata": {
            "type": "object",
            "properties": {
                "additionalInfo": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "awards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CreditAward"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "specialPerformance": {
                    "type": "boolean"
                },
                "uncredited": {
                    "type": "boolean"
                },
                "voiceOnly": {
                    "type": "boolean"
                }
            }
        },
        "models.DefaultClients": {
            "type": "object",
            "properties": {
                "aiClientId": {
                    "type": "integer",
                    "example": 1
                },
                "bookAutomationId": {
                    "type": "integer",
                    "example": 1
                },
                "bookClientId": {
                    "description": "TODO: Add support for books. Should it be books vs audiobooks? How would I want to handle that?",
                    "type": "integer",
                    "example": 1
                },
                "movieAutomationId": {
                    "type": "integer",
                    "example": 1
                },
                "musicAutomationId": {
                    "type": "integer",
                    "example": 1
                },
                "musicClientId": {
                    "type": "integer",
                    "example": 1
                },
                "seriesAutomationId": {
                    "type": "integer",
                    "example": 1
                },
                "videoClientId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.ExternalID": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The actual ID",
                    "type": "string"
                },
                "source": {
                    "description": "e.g., \"tmdb\", \"imdb\", \"trakt\", \"tvdb\"",
                    "type": "string"
                }
            }
        },
        "models.ExternalIDMap": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "models.ExternalLink": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.Genres": {
            "type": "object",
            "properties": {
                "anime": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "action",
                        "comedy",
                        "drama"
                    ]
                },
                "books": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "fantasy",
                        "horror",
                        "mystery"
                    ]
                },
                "games": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "action",
                        "comedy",
                        "drama"
                    ]
                },
                "movies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "action",
                        "comedy",
                        "drama"
                    ]
                },
                "music": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "electronic",
                        "pop",
                        "rock"
                    ]
                },
                "series": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "action",
                        "comedy",
                        "drama"
                    ]
                }
            }
        },
        "models.JobRun": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "endTime": {
                    "description": "When the job finished running",
                    "type": "string"
                },
                "errorMessage": {
                    "description": "Any error message from the job run",
                    "type": "string"
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "jobName": {
                    "description": "The name of the job",
                    "type": "string"
                },
                "jobType": {
                    "description": "Type of job (recommendation, sync, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JobType"
                        }
                    ]
                },
                "metadata": {
                    "description": "Metadata related to the job (stored as JSON)",
                    "type": "string"
                },
                "processedItems": {
                    "description": "Items processed so far",
                    "type": "integer"
                },
                "progress": {
                    "description": "Progress percentage (0-100)",
                    "type": "integer"
                },
                "startTime": {
                    "description": "When the job started running",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the job run",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JobStatus"
                        }
                    ]
                },
                "statusMessage": {
                    "description": "Current status message",
                    "type": "string"
                },
                "totalItems": {
                    "description": "Total items to process",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "description": "User ID associated with the job, if applicable",
                    "type": "integer"
                }
            }
        },
        "models.JobSchedule": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Any configuration for the job (stored as JSON)",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the job is enabled",
                    "type": "boolean"
                },
                "frequency": {
                    "description": "How often the job should run",
                    "type": "string"
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "jobName": {
                    "description": "Unique name of the job",
                    "type": "string"
                },
                "jobType": {
                    "description": "Type of job (recommendation, sync, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JobType"
                        }
                    ]
                },
                "lastRunTime": {
                    "description": "When the job last ran",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "description": "User ID associated with the job, if applicable (for user-specific jobs)",
                    "type": "integer"
                }
            }
        },
        "models.JobStatus": {
            "type": "string",
            "enum": [
                "pending",
                "running",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "JobStatusPending",
                "JobStatusRunning",
                "JobStatusCompleted",
                "JobStatusFailed"
            ]
        },
        "models.JobType": {
            "type": "string",
            "enum": [
                "recommendation",
                "sync",
                "system",
                "notification",
                "analysis"
            ],
            "x-enum-varnames": [
                "JobTypeRecommendation",
                "JobTypeSync",
                "JobTypeSystem",
                "JobTypeNotification",
                "JobTypeAnalysis"
            ]
        },
        "models.ListItem": {
            "type": "object",
            "properties": {
                "itemUUID": {
                    "type": "string"
                },
                "lastChanged": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                }
            }
        },
        "models.MaxRecommendations": {
            "type": "object",
            "properties": {
                "anime": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "books": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "games": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "movies": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "music": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "series": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                }
            }
        },
        "models.MediaDepartment": {
            "type": "string",
            "enum": [
                "Cast",
                "Crew",
                "Directing",
                "Writing",
                "Production",
                "Camera",
                "Editing",
                "Sound",
                "Art",
                "Other"
            ],
            "x-enum-varnames": [
                "DepartmentCast",
                "DepartmentCrew",
                "DepartmentDirecting",
                "DepartmentWriting",
                "DepartmentProduction",
                "DepartmentCamera",
                "DepartmentEditing",
                "DepartmentSound",
                "DepartmentArt",
                "DepartmentOther"
            ]
        },
        "models.MediaItem-any": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data"
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItem-suasor_clients_media_types_Movie": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/suasor_clients_media_types.Movie"
                        }
                    ]
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Album": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Album"
                        }
                    ]
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Artist": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Artist"
                        }
                    ]
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Episode": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Episode"
                        }
                    ]
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_ListData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data"
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_MediaData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data"
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Playlist": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Playlist"
                        }
                    ]
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Series": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Series"
                        }
                    ]
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItem-types_Track": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "description": "Type-specific media data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Track"
                        }
                    ]
                },
                "deletedAt": {
                    "type": "string"
                },
                "downloadUrl": {
                    "type": "string"
                },
                "externalIds": {
                    "description": "External IDs for this item (TMDB, IMDB, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether this item is public or not",
                    "type": "boolean"
                },
                "ownerId": {
                    "description": "ID of the user that owns this item, 0 for system owned items",
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "streamUrl": {
                    "type": "string"
                },
                "syncClients": {
                    "description": "Client IDs for this item (mapping client to their IDs)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of media (movie, show, episode, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                }
            }
        },
        "models.MediaItemList": {
            "type": "object",
            "properties": {
                "albums": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Album"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "artists": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Artist"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "collections": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/suasor_clients_media_types.Collection"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "details": {
                    "$ref": "#/definitions/models.MediaItem-types_ListData"
                },
                "episodes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Episode"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "listOriginID": {
                    "description": "0 for internal db, otherwise external client/ProviderID",
                    "type": "integer"
                },
                "listType": {
                    "$ref": "#/definitions/types.ListType"
                },
                "movies": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/suasor_clients_media_types.Movie"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "order": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ListItem"
                    }
                },
                "ownerID": {
                    "type": "integer"
                },
                "playlists": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Playlist"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "seasons": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Season"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "series": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Series"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "totalItems": {
                    "type": "integer"
                },
                "tracks": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Track"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "models.MediaRole": {
            "type": "string",
            "enum": [
                "Actor",
                "Voice",
                "Director",
                "Writer",
                "Screenplay",
                "Story",
                "Producer",
                "Executive Producer",
                "Other"
            ],
            "x-enum-varnames": [
                "RoleActor",
                "RoleVoice",
                "RoleDirector",
                "RoleWriter",
                "RoleScreenplay",
                "RoleStory",
                "RoleProducer",
                "RoleExecutiveProducer",
                "RoleOther"
            ]
        },
        "models.MediaSyncJob": {
            "type": "object",
            "properties": {
                "clientID": {
                    "description": "ID of the client to sync from",
                    "type": "integer"
                },
                "clientType": {
                    "description": "Type of the client",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether sync is enabled",
                    "type": "boolean"
                },
                "filters": {
                    "description": "Sync filter criteria (stored as JSON)",
                    "type": "string"
                },
                "frequency": {
                    "description": "Sync frequency",
                    "type": "string"
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "lastSyncTime": {
                    "description": "Last sync time",
                    "type": "string"
                },
                "mediaType": {
                    "description": "Type of media to sync (movies, series, music, etc.)",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "description": "ID of the user",
                    "type": "integer"
                }
            }
        },
        "models.Person": {
            "type": "object",
            "properties": {
                "biography": {
                    "type": "string"
                },
                "birthplace": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "dateOfDeath": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "externalIDs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "knownFor": {
                    "description": "Professional information",
                    "type": "string"
                },
                "metadata": {
                    "description": "Additional metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PersonMetadata"
                        }
                    ]
                },
                "name": {
                    "type": "string"
                },
                "photo": {
                    "description": "Biographical information",
                    "type": "string"
                },
                "popularity": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.PersonCreditsByRole": {
            "type": "object",
            "properties": {
                "credits": {
                    "description": "Credits is a map of credits grouped by role",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/models.Credit"
                        }
                    }
                },
                "person": {
                    "$ref": "#/definitions/models.Person"
                }
            }
        },
        "models.PersonMetadata": {
            "type": "object",
            "properties": {
                "alternateNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "awards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Award"
                    }
                },
                "externalLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalLink"
                    }
                },
                "socialMedia": {
                    "$ref": "#/definitions/models.SocialMedia"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.PersonWithCredits": {
            "type": "object",
            "properties": {
                "biography": {
                    "type": "string"
                },
                "birthplace": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "credits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Credit"
                    }
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "dateOfDeath": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "externalIDs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalID"
                    }
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "knownFor": {
                    "description": "Professional information",
                    "type": "string"
                },
                "metadata": {
                    "description": "Additional metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PersonMetadata"
                        }
                    ]
                },
                "name": {
                    "type": "string"
                },
                "photo": {
                    "description": "Biographical information",
                    "type": "string"
                },
                "popularity": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.PrivacySettings": {
            "type": "object",
            "properties": {
                "publicProfile": {
                    "type": "boolean",
                    "example": true
                },
                "shareRecommendations": {
                    "type": "boolean",
                    "example": true
                },
                "showRecommendationList": {
                    "type": "boolean",
                    "example": true
                },
                "showWatchHistory": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.Recommendation": {
            "description": "Media recommendation stored in the database",
            "type": "object",
            "properties": {
                "active": {
                    "description": "Whether this is an active recommendation",
                    "type": "boolean"
                },
                "aiModel": {
                    "description": "AI model used if recommendedBy=\"AI\"",
                    "type": "string"
                },
                "confidence": {
                    "description": "Confidence score (0.0 to 1.0) if available",
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "dismissed": {
                    "description": "Whether this item has been dismissed by the user",
                    "type": "boolean"
                },
                "expiresAt": {
                    "description": "When this recommendation expires",
                    "type": "string"
                },
                "externalIDs": {
                    "$ref": "#/definitions/models.ExternalIDMap"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "inLibrary": {
                    "description": "Whether this item is present in the user's library",
                    "type": "boolean"
                },
                "isViewed": {
                    "description": "Whether user has viewed this item",
                    "type": "boolean"
                },
                "jobRunID": {
                    "description": "Job run that created this recommendation",
                    "type": "integer"
                },
                "matchesActors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "matchesDirectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "matchesGenres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mediaItemID": {
                    "type": "integer"
                },
                "mediaType": {
                    "description": "\"movie\", \"series\", \"music\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "metadata": {
                    "description": "Additional metadata (stored as JSON)",
                    "type": "string"
                },
                "reasoning": {
                    "type": "string"
                },
                "recommendedBy": {
                    "description": "\"AI\", \"popular\", \"similar_users\"",
                    "type": "string"
                },
                "similarItems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "source": {
                    "description": "Source of the recommendation (AI, system, manual)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RecommendationSource"
                        }
                    ]
                },
                "sourceClientID": {
                    "description": "ID of the client that generated this recommendation, if applicable",
                    "type": "integer"
                },
                "sourceClientType": {
                    "description": "Type of the client that generated this recommendation",
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                },
                "userRating": {
                    "description": "If user has rated this recommendation",
                    "type": "number"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "models.RecommendationSource": {
            "type": "string",
            "enum": [
                "ai",
                "system",
                "manual"
            ],
            "x-enum-varnames": [
                "RecommendationSourceAI",
                "RecommendationSourceSystem",
                "RecommendationSourceManual"
            ]
        },
        "models.SocialLinks": {
            "type": "object",
            "properties": {
                "lastfm": {
                    "type": "string",
                    "example": "https://last.fm/user/faiyt"
                },
                "letterboxd": {
                    "type": "string",
                    "example": "https://letterboxd.com/faiyt"
                },
                "trakt": {
                    "type": "string",
                    "example": "https://trakt.tv/users/faiyt"
                }
            }
        },
        "models.SocialMedia": {
            "type": "object",
            "properties": {
                "facebook": {
                    "type": "string"
                },
                "instagram": {
                    "type": "string"
                },
                "twitter": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "models.SyncClient": {
            "type": "object",
            "properties": {
                "clientID": {
                    "description": "ID of the client that this external ID belongs to (optional for service IDs like TMDB)",
                    "type": "integer"
                },
                "clientType": {
                    "description": "Type of client this ID belongs to (optional for service IDs)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ClientType"
                        }
                    ]
                },
                "itemID": {
                    "description": "The actual ID value in the external system",
                    "type": "string"
                }
            }
        },
        "models.UserConfig": {
            "description": "User-specific configuration stored in the database",
            "type": "object",
            "properties": {
                "activityAnalysisEnabled": {
                    "description": "Activity Analysis Settings",
                    "type": "boolean",
                    "example": true
                },
                "aiChatPersonality": {
                    "description": "AI Algorithm Settings",
                    "type": "string",
                    "enum": [
                        "friendly",
                        "serious",
                        "enthusiastic",
                        "analytical",
                        "custom"
                    ],
                    "example": "serious"
                },
                "aiModelPreferences": {
                    "description": "AI Model Preferences",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AIModelPreferences"
                        }
                    ]
                },
                "bio": {
                    "description": "Profile settings",
                    "type": "string",
                    "example": "I'm a developer"
                },
                "contentAvailabilityEnabled": {
                    "description": "Content Availability Settings",
                    "type": "boolean",
                    "example": true
                },
                "contentTypes": {
                    "description": "What sidebar options to show based on the enabled content types.",
                    "type": "string",
                    "example": "movie,series,tv"
                },
                "createdAt": {
                    "type": "string"
                },
                "defaultClients": {
                    "$ref": "#/definitions/models.DefaultClients"
                },
                "deletedAt": {
                    "type": "string"
                },
                "digestFrequency": {
                    "type": "string",
                    "enum": [
                        "never",
                        "daily",
                        "weekly"
                    ],
                    "example": "weekly"
                },
                "discoveryModeEnabled": {
                    "description": "Emphasize new content discovery",
                    "type": "boolean",
                    "example": true
                },
                "discoveryModeRatio": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 0.5
                },
                "displayName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "emailNotifications": {
                    "type": "boolean",
                    "example": true
                },
                "enableAnimations": {
                    "type": "boolean",
                    "example": true
                },
                "excludedGenres": {
                    "$ref": "#/definitions/models.Genres"
                },
                "excludedKeywords": {
                    "type": "string",
                    "example": "war,violence,politics"
                },
                "id": {
                    "description": "Internal ID",
                    "type": "integer"
                },
                "includeUnratedContent": {
                    "type": "boolean",
                    "example": false
                },
                "itemsPerPage": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 5,
                    "example": 20
                },
                "language": {
                    "type": "string",
                    "example": "en-US"
                },
                "maxContentRating": {
                    "type": "string",
                    "example": "R"
                },
                "maxNotificationsPerDay": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1,
                    "example": 10
                },
                "maxRecommendations": {
                    "description": "how many movie recommendations to generate",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MaxRecommendations"
                        }
                    ]
                },
                "minContentRating": {
                    "type": "string",
                    "example": "PG-13"
                },
                "newContentWeight": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 0.7
                },
                "newReleaseMediaTypes": {
                    "type": "string",
                    "example": "movie,series,music"
                },
                "newReleaseNotificationsEnabled": {
                    "description": "New Release Notifications Settings",
                    "type": "boolean",
                    "example": true
                },
                "notificationsEnabled": {
                    "description": "Notification Settings",
                    "type": "boolean",
                    "example": true
                },
                "notifyMediaTypes": {
                    "type": "string",
                    "example": "movie,series,music"
                },
                "notifyOnNewRecommendations": {
                    "type": "boolean",
                    "example": true
                },
                "notifyOnSync": {
                    "type": "boolean",
                    "example": false
                },
                "notifyRatingThreshold": {
                    "type": "number",
                    "maximum": 10,
                    "minimum": 0,
                    "example": 5
                },
                "notifyRecentReleases": {
                    "type": "boolean",
                    "example": true
                },
                "notifyUpcomingReleases": {
                    "type": "boolean",
                    "example": true
                },
                "onboardingCompleted": {
                    "description": "Onboarding",
                    "type": "boolean",
                    "example": true
                },
                "personalHistoryWeight": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 0.8
                },
                "playlistSyncDirection": {
                    "type": "string",
                    "example": "bidirectional"
                },
                "playlistSyncEnabled": {
                    "description": "Playlist Sync Settings",
                    "type": "boolean",
                    "example": true
                },
                "popularityWeight": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 0.3
                },
                "preferredAudioLanguages": {
                    "type": "string",
                    "example": "en,ja"
                },
                "preferredContentLength": {
                    "type": "string",
                    "enum": [
                        "short",
                        "medium",
                        "long"
                    ],
                    "example": "short"
                },
                "preferredGenres": {
                    "$ref": "#/definitions/models.Genres"
                },
                "privacySettings": {
                    "$ref": "#/definitions/models.PrivacySettings"
                },
                "recommendationContentTypes": {
                    "description": "What content types with be part of the auto sync recommendations",
                    "type": "string",
                    "example": "movie,series,tv,book"
                },
                "recommendationIncludeSimilar": {
                    "type": "boolean",
                    "example": false
                },
                "recommendationIncludeWatched": {
                    "type": "boolean",
                    "example": false
                },
                "recommendationListPrefix": {
                    "description": "Prefux to add to teh beginning of the list name to identify that its part of the auto recommendations system",
                    "type": "string",
                    "example": "AI Picks"
                },
                "recommendationMaxAge": {
                    "description": "In years, 0 = no limit",
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 5
                },
                "recommendationMinRating": {
                    "type": "number",
                    "example": 6
                },
                "recommendationStrategy": {
                    "type": "string",
                    "enum": [
                        "similar",
                        "recent",
                        "popular",
                        "balanced"
                    ],
                    "example": "popular"
                },
                "recommendationSyncEnabled": {
                    "description": "Recommendation Preferences\nAutomatically download and organized recommended media into a collection/playlist",
                    "type": "boolean",
                    "example": true
                },
                "recommendationSyncFrequency": {
                    "description": "How often to sync new recommendations",
                    "type": "string",
                    "enum": [
                        "manual",
                        "daily",
                        "weekly",
                        "monthly"
                    ],
                    "example": "daily"
                },
                "recommendationSyncListType": {
                    "description": "What type of list to create for the synced recommendations",
                    "type": "string",
                    "enum": [
                        "playlist",
                        "collection"
                    ],
                    "example": "playlist"
                },
                "showAdultContent": {
                    "type": "boolean",
                    "example": false
                },
                "smartCollectionsEnabled": {
                    "description": "Smart Collections Settings",
                    "type": "boolean",
                    "example": true
                },
                "socialLinks": {
                    "$ref": "#/definitions/models.SocialLinks"
                },
                "theme": {
                    "description": "UI Preferences",
                    "type": "string",
                    "enum": [
                        "light",
                        "dark",
                        "system"
                    ],
                    "example": "dark"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "UserID links this config to a specific user",
                    "type": "integer"
                }
            }
        },
        "models.UserMediaItemData-types_MediaData": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "durationSeconds": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "isDisliked": {
                    "type": "boolean"
                },
                "isFavorite": {
                    "type": "boolean"
                },
                "item": {
                    "description": "Not stored in DB, loaded via relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaItem-types_MediaData"
                        }
                    ]
                },
                "lastPlayedAt": {
                    "type": "string"
                },
                "mediaItemId": {
                    "description": "Foreign key to MediaItem",
                    "type": "integer"
                },
                "playCount": {
                    "type": "integer"
                },
                "playedAt": {
                    "type": "string"
                },
                "playedPercentage": {
                    "type": "number"
                },
                "positionSeconds": {
                    "type": "integer"
                },
                "type": {
                    "description": "\"movie\", \"episode\", \"show\", \"season\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "Foreign key to User",
                    "type": "integer"
                },
                "userRating": {
                    "type": "number"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                },
                "watchlist": {
                    "type": "boolean"
                }
            }
        },
        "models.UserMediaItemData-types_Series": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "durationSeconds": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "isDisliked": {
                    "type": "boolean"
                },
                "isFavorite": {
                    "type": "boolean"
                },
                "item": {
                    "description": "Not stored in DB, loaded via relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaItem-types_Series"
                        }
                    ]
                },
                "lastPlayedAt": {
                    "type": "string"
                },
                "mediaItemId": {
                    "description": "Foreign key to MediaItem",
                    "type": "integer"
                },
                "playCount": {
                    "type": "integer"
                },
                "playedAt": {
                    "type": "string"
                },
                "playedPercentage": {
                    "type": "number"
                },
                "positionSeconds": {
                    "type": "integer"
                },
                "type": {
                    "description": "\"movie\", \"episode\", \"show\", \"season\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MediaType"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "Foreign key to User",
                    "type": "integer"
                },
                "userRating": {
                    "type": "number"
                },
                "uuid": {
                    "description": "Stable UUID for syncing",
                    "type": "string"
                },
                "watchlist": {
                    "type": "boolean"
                }
            }
        },
        "requests.AddMediaRequest": {
            "type": "object",
            "properties": {
                "metadataProfileID": {
                    "description": "For Lidarr",
                    "type": "integer"
                },
                "monitored": {
                    "type": "boolean"
                },
                "musicBrainzID": {
                    "description": "For Lidarr (music)",
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "qualityProfileID": {
                    "type": "integer"
                },
                "searchForMedia": {
                    "description": "Whether to search for the media after adding",
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "title": {
                    "type": "string"
                },
                "tmdbid": {
                    "description": "For Radarr (movies)",
                    "type": "integer"
                },
                "tvdbid": {
                    "description": "For Sonarr (TV shows)",
                    "type": "integer"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "requests.AiContentAnalysisRequest": {
            "description": "Request for AI-powered content analysis",
            "type": "object",
            "required": [
                "content",
                "contentType"
            ],
            "properties": {
                "clientID": {
                    "description": "Client ID to use for the conversation",
                    "type": "integer"
                },
                "clientType": {
                    "description": "Specific AI client type to use (claude, openai, ollama)\nexample: claude",
                    "type": "string"
                },
                "content": {
                    "description": "The content to analyze\nrequired: true\nexample: This is a sample text that needs analysis for sentiment and themes.",
                    "type": "string"
                },
                "contentType": {
                    "description": "Type of content being analyzed (text, movie, etc)\nrequired: true\nexample: text",
                    "type": "string"
                },
                "options": {
                    "description": "Optional analysis options\nexample: {\"includeThemes\": true, \"includeSentiment\": true}",
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "requests.AutomationExecuteCommandRequest": {
            "type": "object",
            "required": [
                "command"
            ],
            "properties": {
                "command": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "requests.AvatarUploadResponse": {
            "description": "Response data after avatar upload",
            "type": "object",
            "properties": {
                "filePath": {
                    "description": "FilePath is the path to the uploaded avatar file\n\t@Description\tPath to the uploaded avatar file\n\t@Example\t\t\"/uploads/avatars/user_1.jpg\"",
                    "type": "string",
                    "example": "/uploads/avatars/user_1.jpg"
                }
            }
        },
        "requests.ChangePasswordRequest": {
            "description": "Request payload for changing user password",
            "type": "object",
            "required": [
                "currentPassword",
                "newPassword"
            ],
            "properties": {
                "currentPassword": {
                    "description": "CurrentPassword is the user's existing password for verification\n\t@Description\tUser's current password for verification\n\t@Example\t\t\"oldpassword123\"",
                    "type": "string",
                    "example": "oldpassword123"
                },
                "newPassword": {
                    "description": "NewPassword is the password to change to\n\t@Description\tNew password to set for the user\n\t@Example\t\t\"newpassword456\"",
                    "type": "string",
                    "example": "newpassword456"
                }
            }
        },
        "requests.ChangeRoleRequest": {
            "description": "Request payload for changing user role",
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "role": {
                    "description": "Role is the new role to assign to the user\n\t@Description\tNew role to assign to the user\n\t@Enum\t\t\t\"user\" \"admin\"\n\t@Example\t\t\"admin\"",
                    "type": "string",
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "example": "admin"
                }
            }
        },
        "requests.ClientRequest-types_ClientConfig": {
            "type": "object",
            "required": [
                "clientType",
                "name"
            ],
            "properties": {
                "clientID": {
                    "type": "integer"
                },
                "clientType": {
                    "$ref": "#/definitions/types.ClientType"
                },
                "config": {},
                "isEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "requests.ClientTestRequest-client_ClientConfig": {
            "type": "object",
            "required": [
                "clientType"
            ],
            "properties": {
                "client": {},
                "clientType": {
                    "enum": [
                        "radarr",
                        "sonarr",
                        "lidarr",
                        "emby",
                        "jellyfin",
                        "subsonic",
                        "plex",
                        "claude",
                        "openai",
                        "ollama"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ClientType"
                        }
                    ]
                }
            }
        },
        "requests.ConversationMessageRequest": {
            "description": "Request to send a message in an existing AI conversation",
            "type": "object",
            "required": [
                "conversationId",
                "message"
            ],
            "properties": {
                "clientID": {
                    "description": "Client ID to use for the conversation",
                    "type": "integer"
                },
                "context": {
                    "description": "Optional context information for this message\nexample: {\"includeRecommendations\": true, \"maxResults\": 3}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "conversationId": {
                    "description": "The conversation ID from a previous StartConversation call\nrequired: true\nexample: conv-123-abcdef",
                    "type": "string"
                },
                "message": {
                    "description": "The user's message to the AI\nrequired: true\nexample: I'm looking for sci-fi movies similar to Interstellar",
                    "type": "string"
                }
            }
        },
        "requests.CreateCreditRequest": {
            "description": "Request payload for creating a new credit",
            "type": "object",
            "required": [
                "mediaItemId",
                "name",
                "personId"
            ],
            "properties": {
                "character": {
                    "description": "Character is the character's name (for acting roles)\n\t@Description\tCharacter's name (for acting roles)\n\t@Example\t\t\"Forrest Gump\"",
                    "type": "string",
                    "example": "Forrest Gump"
                },
                "department": {
                    "description": "Department is the department the person worked in\n\t@Description\tDepartment the person worked in\n\t@Example\t\t\"Acting\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaDepartment"
                        }
                    ],
                    "example": "Acting"
                },
                "isArtist": {
                    "description": "IsArtist indicates if this is an artist credit\n\t@Description\tIndicates if this is an artist credit\n\t@Example\t\tfalse",
                    "type": "boolean",
                    "example": false
                },
                "isCast": {
                    "description": "IsCast indicates if this is a cast credit\n\t@Description\tIndicates if this is a cast credit\n\t@Example\t\ttrue",
                    "type": "boolean",
                    "example": true
                },
                "isCreator": {
                    "description": "IsCreator indicates if this is a creator credit\n\t@Description\tIndicates if this is a creator credit\n\t@Example\t\tfalse",
                    "type": "boolean",
                    "example": false
                },
                "isCrew": {
                    "description": "IsCrew indicates if this is a crew credit\n\t@Description\tIndicates if this is a crew credit\n\t@Example\t\tfalse",
                    "type": "boolean",
                    "example": false
                },
                "isGuest": {
                    "description": "IsGuest indicates if this is a guest credit\n\t@Description\tIndicates if this is a guest credit\n\t@Example\t\tfalse",
                    "type": "boolean",
                    "example": false
                },
                "job": {
                    "description": "Job is the specific job the person had\n\t@Description\tSpecific job the person had\n\t@Example\t\t\"Lead Actor\"",
                    "type": "string",
                    "example": "Lead Actor"
                },
                "mediaItemId": {
                    "description": "MediaItemID is the ID of the media item\n\t@Description\tID of the media item\n\t@Example\t\t2",
                    "type": "integer",
                    "example": 2
                },
                "name": {
                    "description": "Name is the person's name for this credit\n\t@Description\tPerson's name for this credit\n\t@Example\t\t\"Tom Hanks\"",
                    "type": "string",
                    "example": "Tom Hanks"
                },
                "order": {
                    "description": "Order is the order of importance (lower means more important)\n\t@Description\tOrder of importance (lower means more important)\n\t@Example\t\t1",
                    "type": "integer",
                    "example": 1
                },
                "personId": {
                    "description": "PersonID is the ID of the person\n\t@Description\tID of the person\n\t@Example\t\t1",
                    "type": "integer",
                    "example": 1
                },
                "role": {
                    "description": "Role is the person's role\n\t@Description\tPerson's role\n\t@Example\t\t\"Actor\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaRole"
                        }
                    ],
                    "example": "Actor"
                }
            }
        },
        "requests.CreatePersonRequest": {
            "description": "Request payload for creating a new person",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "biography": {
                    "description": "Biography is the person's biography\n\t@Description\tPerson's biography\n\t@Example\t\t\"Thomas Jeffrey Hanks is an American actor and filmmaker...\"",
                    "type": "string",
                    "example": "Thomas Jeffrey Hanks is an American actor and filmmaker..."
                },
                "birthplace": {
                    "description": "Birthplace is the person's birthplace\n\t@Description\tPerson's birthplace\n\t@Example\t\t\"Concord, California, USA\"",
                    "type": "string",
                    "example": "Concord, California, USA"
                },
                "dateOfBirth": {
                    "description": "DateOfBirth is the person's date of birth\n\t@Description\tPerson's date of birth in RFC3339 format\n\t@Example\t\t\"1956-07-09T00:00:00Z\"",
                    "type": "string",
                    "example": "1956-07-09T00:00:00Z"
                },
                "dateOfDeath": {
                    "description": "DateOfDeath is the person's date of death (if applicable)\n\t@Description\tPerson's date of death in RFC3339 format (if applicable)\n\t@Example\t\t\"2056-07-09T00:00:00Z\"",
                    "type": "string",
                    "example": "2056-07-09T00:00:00Z"
                },
                "externalIds": {
                    "description": "ExternalIDs contains IDs from external services\n\t@Description\tIDs from external services",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.ExternalIDRequest"
                    }
                },
                "gender": {
                    "description": "Gender is the person's gender\n\t@Description\tPerson's gender\n\t@Example\t\t\"Male\"",
                    "type": "string",
                    "example": "Male"
                },
                "knownFor": {
                    "description": "KnownFor is what the person is primarily known for\n\t@Description\tWhat the person is primarily known for\n\t@Example\t\t\"Actor\"",
                    "type": "string",
                    "example": "Actor"
                },
                "name": {
                    "description": "Name is the person's name\n\t@Description\tPerson's name\n\t@Example\t\t\"Tom Hanks\"",
                    "type": "string",
                    "example": "Tom Hanks"
                },
                "photo": {
                    "description": "Photo is the URL or path to the person's photo\n\t@Description\tURL or path to the person's photo\n\t@Example\t\t\"https://example.com/photos/tom-hanks.jpg\"",
                    "type": "string",
                    "example": "https://example.com/photos/tom-hanks.jpg"
                }
            }
        },
        "requests.CreateTagRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "requests.ExternalIDRequest": {
            "description": "External ID for a person",
            "type": "object",
            "required": [
                "id",
                "source"
            ],
            "properties": {
                "id": {
                    "description": "ID is the identifier in the external service\n\t@Description\tIdentifier in the external service\n\t@Example\t\t\"31\"",
                    "type": "string",
                    "example": "31"
                },
                "source": {
                    "description": "Source is the name of the external service\n\t@Description\tName of the external service\n\t@Example\t\t\"TMDB\"",
                    "type": "string",
                    "example": "TMDB"
                }
            }
        },
        "requests.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address\n\t@Description\tUser's email address\n\t@Example\t\t\"user@example.com\"",
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "requests.ImportPersonRequest": {
            "description": "Request payload for importing a person from an external source",
            "type": "object",
            "required": [
                "externalId",
                "personData",
                "source"
            ],
            "properties": {
                "externalId": {
                    "description": "ExternalID is the identifier in the external service\n\t@Description\tIdentifier in the external service\n\t@Example\t\t\"31\"",
                    "type": "string",
                    "example": "31"
                },
                "personData": {
                    "description": "PersonData contains the person data to import\n\t@Description\tPerson data to import",
                    "allOf": [
                        {
                            "$ref": "#/definitions/requests.CreatePersonRequest"
                        }
                    ]
                },
                "source": {
                    "description": "Source is the name of the external service\n\t@Description\tName of the external service\n\t@Example\t\t\"TMDB\"",
                    "type": "string",
                    "example": "TMDB"
                }
            }
        },
        "requests.ListAddTrackRequest": {
            "type": "object",
            "properties": {
                "trackID": {
                    "type": "integer"
                }
            }
        },
        "requests.ListCreateRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "genre": {
                    "type": "string"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "isSmart": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/requests.ListType"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "requests.ListReorderRequest": {
            "type": "object",
            "properties": {
                "itemIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "requests.ListType": {
            "type": "string",
            "enum": [
                "playlist",
                "collection"
            ],
            "x-enum-varnames": [
                "ListTypePlaylist",
                "ListTypeCollection"
            ]
        },
        "requests.ListUpdateRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "requests.LoginRequest": {
            "description": "Request payload for user login",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address\n\t@Description\tUser's email address\n\t@Example\t\t\"user@example.com\"",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "Password is the user's chosen password\n\t@Description\tUser's password (plain text in request)",
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "requests.LogoutRequest": {
            "description": "Request payload for user logout",
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "description": "RefreshToken identifies the session to terminate\n\t@Description\tJWT refresh token to invalidate",
                    "type": "string"
                }
            }
        },
        "requests.MarkRecommendationAsViewedRequest": {
            "type": "object",
            "required": [
                "recommendationId"
            ],
            "properties": {
                "recommendationId": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "requests.MediaItemCreateRequest": {
            "type": "object",
            "required": [
                "data",
                "type"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/requests.MediaItemData"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "requests.MediaItemData": {
            "type": "object",
            "properties": {
                "albumTitle": {
                    "description": "Album data",
                    "type": "string"
                },
                "artistName": {
                    "description": "Artist data",
                    "type": "string"
                },
                "collectionName": {
                    "description": "Collection data",
                    "type": "string"
                },
                "episodeNumber": {
                    "type": "integer"
                },
                "id": {
                    "description": "Base data",
                    "type": "integer"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "seasonNumber": {
                    "description": "Episode data",
                    "type": "integer"
                },
                "title": {
                    "description": "Movie data",
                    "type": "string"
                },
                "titles": {
                    "description": "Series data",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trackNumber": {
                    "description": "Track data",
                    "type": "integer"
                }
            }
        },
        "requests.MediaItemUpdateRequest": {
            "type": "object",
            "required": [
                "data",
                "type"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/requests.MediaItemData"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "requests.RateRecommendationRequest": {
            "type": "object",
            "required": [
                "rating",
                "recommendationId"
            ],
            "properties": {
                "rating": {
                    "type": "number",
                    "maximum": 5,
                    "minimum": 0,
                    "example": 4.5
                },
                "recommendationId": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "requests.RefreshTokenRequest": {
            "description": "Request payload for refreshing access tokens",
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "description": "RefreshToken is used to generate a new access token\n\t@Description\tJWT refresh token to use for generating new access token",
                    "type": "string"
                }
            }
        },
        "requests.RegisterRequest": {
            "description": "Request payload for user registration",
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address\n\t@Description\tUser's email address\n\t@Example\t\t\"user@example.com\"",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "Password is the user's chosen password\n\t@Description\tUser's password (plain text in request)",
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "description": "Username is the user's desired username\n\t@Description\tUser's chosen username\n\t@Example\t\t\"johndoe\"",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "requests.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "email",
                "newPassword",
                "token"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address\n\t@Description\tUser's email address\n\t@Example\t\t\"user@example.com\"",
                    "type": "string",
                    "example": "user@example.com"
                },
                "newPassword": {
                    "description": "NewPassword is the new password to set for the user\n\t@Description\tNew password to set for the user\n\t@Example\t\t\"newpassword456\"",
                    "type": "string",
                    "example": "newpassword456"
                },
                "token": {
                    "description": "Token is the password reset token\n\t@Description\tPassword reset token\n\t@Example\t\t\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "requests.RunMediaSyncJobRequest": {
            "type": "object",
            "required": [
                "clientID",
                "mediaType"
            ],
            "properties": {
                "clientID": {
                    "type": "integer"
                },
                "mediaType": {
                    "type": "string"
                }
            }
        },
        "requests.SetupMediaSyncJobRequest": {
            "type": "object",
            "required": [
                "clientID",
                "clientType",
                "frequency",
                "mediaType"
            ],
            "properties": {
                "clientID": {
                    "type": "integer"
                },
                "clientType": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string"
                }
            }
        },
        "requests.StartConversationRequest": {
            "description": "Request to start a new AI-powered conversation for recommendations",
            "type": "object",
            "required": [
                "contentType"
            ],
            "properties": {
                "clientID": {
                    "description": "Client ID to use for the conversation",
                    "type": "integer"
                },
                "contentType": {
                    "description": "Type of content to discuss (movie, tv, music, etc)\nrequired: true\nexample: movie",
                    "type": "string"
                },
                "preferences": {
                    "description": "Optional user preferences to initialize the conversation\nexample: {\"favoriteGenres\": [\"sci-fi\", \"thriller\"], \"recentlyWatched\": [\"Inception\", \"Tenet\"]}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "systemInstructions": {
                    "description": "Optional custom system instructions\nexample: You are a helpful movie recommendation assistant",
                    "type": "string"
                }
            }
        },
        "requests.UpdateCreditRequest": {
            "description": "Request payload for updating an existing credit",
            "type": "object",
            "properties": {
                "character": {
                    "description": "Character is the character's name (for acting roles)\n\t@Description\tCharacter's name (for acting roles)\n\t@Example\t\t\"Forrest Gump\"",
                    "type": "string",
                    "example": "Forrest Gump"
                },
                "department": {
                    "description": "Department is the department the person worked in\n\t@Description\tDepartment the person worked in\n\t@Example\t\t\"Acting\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaDepartment"
                        }
                    ],
                    "example": "Acting"
                },
                "isArtist": {
                    "description": "IsArtist indicates if this is an artist credit\n\t@Description\tIndicates if this is an artist credit\n\t@Example\t\tfalse",
                    "type": "boolean",
                    "example": false
                },
                "isCast": {
                    "description": "IsCast indicates if this is a cast credit\n\t@Description\tIndicates if this is a cast credit\n\t@Example\t\ttrue",
                    "type": "boolean",
                    "example": true
                },
                "isCreator": {
                    "description": "IsCreator indicates if this is a creator credit\n\t@Description\tIndicates if this is a creator credit\n\t@Example\t\tfalse",
                    "type": "boolean",
                    "example": false
                },
                "isCrew": {
                    "description": "IsCrew indicates if this is a crew credit\n\t@Description\tIndicates if this is a crew credit\n\t@Example\t\tfalse",
                    "type": "boolean",
                    "example": false
                },
                "isGuest": {
                    "description": "IsGuest indicates if this is a guest credit\n\t@Description\tIndicates if this is a guest credit\n\t@Example\t\tfalse",
                    "type": "boolean",
                    "example": false
                },
                "job": {
                    "description": "Job is the specific job the person had\n\t@Description\tSpecific job the person had\n\t@Example\t\t\"Lead Actor\"",
                    "type": "string",
                    "example": "Lead Actor"
                },
                "mediaItemId": {
                    "description": "MediaItemID is the ID of the media item\n\t@Description\tID of the media item\n\t@Example\t\t2",
                    "type": "integer",
                    "example": 2
                },
                "name": {
                    "description": "Name is the person's name for this credit\n\t@Description\tPerson's name for this credit\n\t@Example\t\t\"Tom Hanks\"",
                    "type": "string",
                    "example": "Tom Hanks"
                },
                "order": {
                    "description": "Order is the order of importance (lower means more important)\n\t@Description\tOrder of importance (lower means more important)\n\t@Example\t\t1",
                    "type": "integer",
                    "example": 1
                },
                "personId": {
                    "description": "PersonID is the ID of the person\n\t@Description\tID of the person\n\t@Example\t\t1",
                    "type": "integer",
                    "example": 1
                },
                "role": {
                    "description": "Role is the person's role\n\t@Description\tPerson's role\n\t@Example\t\t\"Actor\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaRole"
                        }
                    ],
                    "example": "Actor"
                }
            }
        },
        "requests.UpdateJobScheduleRequest": {
            "type": "object",
            "required": [
                "frequency",
                "jobName"
            ],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "frequency": {
                    "type": "string"
                },
                "jobName": {
                    "type": "string"
                }
            }
        },
        "requests.UpdateMediaRequest": {
            "type": "object",
            "properties": {
                "metadataProfileID": {
                    "description": "For Lidarr",
                    "type": "integer"
                },
                "monitored": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                },
                "qualityProfileID": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "requests.UpdatePersonRequest": {
            "description": "Request payload for updating an existing person",
            "type": "object",
            "properties": {
                "biography": {
                    "description": "Biography is the person's biography\n\t@Description\tPerson's biography\n\t@Example\t\t\"Thomas Jeffrey Hanks is an American actor and filmmaker...\"",
                    "type": "string",
                    "example": "Thomas Jeffrey Hanks is an American actor and filmmaker..."
                },
                "birthplace": {
                    "description": "Birthplace is the person's birthplace\n\t@Description\tPerson's birthplace\n\t@Example\t\t\"Concord, California, USA\"",
                    "type": "string",
                    "example": "Concord, California, USA"
                },
                "dateOfBirth": {
                    "description": "DateOfBirth is the person's date of birth\n\t@Description\tPerson's date of birth in RFC3339 format\n\t@Example\t\t\"1956-07-09T00:00:00Z\"",
                    "type": "string",
                    "example": "1956-07-09T00:00:00Z"
                },
                "dateOfDeath": {
                    "description": "DateOfDeath is the person's date of death (if applicable)\n\t@Description\tPerson's date of death in RFC3339 format (if applicable)\n\t@Example\t\t\"2056-07-09T00:00:00Z\"",
                    "type": "string",
                    "example": "2056-07-09T00:00:00Z"
                },
                "externalIds": {
                    "description": "ExternalIDs contains IDs from external services\n\t@Description\tIDs from external services",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.ExternalIDRequest"
                    }
                },
                "gender": {
                    "description": "Gender is the person's gender\n\t@Description\tPerson's gender\n\t@Example\t\t\"Male\"",
                    "type": "string",
                    "example": "Male"
                },
                "knownFor": {
                    "description": "KnownFor is what the person is primarily known for\n\t@Description\tWhat the person is primarily known for\n\t@Example\t\t\"Actor\"",
                    "type": "string",
                    "example": "Actor"
                },
                "name": {
                    "description": "Name is the person's name\n\t@Description\tPerson's name\n\t@Example\t\t\"Tom Hanks\"",
                    "type": "string",
                    "example": "Tom Hanks"
                },
                "photo": {
                    "description": "Photo is the URL or path to the person's photo\n\t@Description\tURL or path to the person's photo\n\t@Example\t\t\"https://example.com/photos/tom-hanks.jpg\"",
                    "type": "string",
                    "example": "https://example.com/photos/tom-hanks.jpg"
                }
            }
        },
        "requests.UpdateRecommendationViewedRequest": {
            "type": "object",
            "properties": {
                "viewed": {
                    "type": "boolean"
                }
            }
        },
        "requests.UpdateUserRequest": {
            "description": "Request payload for updating user profile",
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "Avatar is the path to the user's avatar image\n\t@Description\tPath to the user's avatar image\n\t@Example\t\t\"/uploads/avatars/user_1.jpg\"",
                    "type": "string",
                    "example": "/uploads/avatars/user_1.jpg"
                },
                "email": {
                    "description": "Email is the new email address\n\t@Description\tUpdated email address for the user\n\t@Example\t\t\"newemail@example.com\"",
                    "type": "string",
                    "example": "newemail@example.com"
                },
                "username": {
                    "description": "Username is the new username\n\t@Description\tUpdated username for the user\n\t@Example\t\t\"newusername\"",
                    "type": "string",
                    "example": "newusername"
                }
            }
        },
        "requests.UserMediaItemDataRequest": {
            "description": "Request payload for recording a new play history entry",
            "type": "object",
            "required": [
                "mediaItemID",
                "type",
                "userID"
            ],
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "continued": {
                    "description": "If this is a continuation of a previous play",
                    "type": "boolean"
                },
                "durationSeconds": {
                    "type": "integer"
                },
                "isFavorite": {
                    "type": "boolean"
                },
                "mediaItemID": {
                    "type": "integer"
                },
                "playedPercentage": {
                    "type": "number"
                },
                "positionSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.MediaType"
                },
                "userID": {
                    "type": "integer"
                },
                "userRating": {
                    "type": "number"
                }
            }
        },
        "requests.UserMediaItemDataSyncRequest": {
            "description": "Request payload for synchronizing media item data",
            "type": "object",
            "required": [
                "mediaItemID",
                "type",
                "userID"
            ],
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "continued": {
                    "description": "If this is a continuation of a previous play",
                    "type": "boolean"
                },
                "durationSeconds": {
                    "type": "integer"
                },
                "isFavorite": {
                    "type": "boolean"
                },
                "mediaItemID": {
                    "type": "integer"
                },
                "playedPercentage": {
                    "type": "number"
                },
                "positionSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.MediaType"
                },
                "userID": {
                    "type": "integer"
                },
                "userRating": {
                    "type": "number"
                }
            }
        },
        "requests.UserMediaItemDataUpdateRequest": {
            "type": "object",
            "required": [
                "mediaItemID",
                "type",
                "userID"
            ],
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "continued": {
                    "description": "If this is a continuation of a previous play",
                    "type": "boolean"
                },
                "durationSeconds": {
                    "type": "integer"
                },
                "isFavorite": {
                    "type": "boolean"
                },
                "mediaItemID": {
                    "type": "integer"
                },
                "playedPercentage": {
                    "type": "number"
                },
                "positionSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.MediaType"
                },
                "userID": {
                    "type": "integer"
                },
                "userRating": {
                    "type": "number"
                }
            }
        },
        "responses.APIResponse-any": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_Client-types_ClientConfig": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Client-types_ClientConfig"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_ClientList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClientList"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_Credit": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Credit"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_JobRun": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.JobRun"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_JobSchedule": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.JobSchedule"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-suasor_clients_media_types_Movie"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Album": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Album"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Artist": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Artist"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Episode": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Episode"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_ListData": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_ListData"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_MediaData": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_MediaData"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Series": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Series"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaItem-types_Track": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaItem-types_Track"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_MediaSyncJob": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaSyncJob"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_Person": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Person"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_Recommendation": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Recommendation"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_models_UserMediaItemData-types_MediaData": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserMediaItemData-types_MediaData"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_responses_MediaItemResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.MediaItemResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_types_Episode": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Episode"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_types_Season": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Season"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-array_types_Series": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Series"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-bool": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-map_string_array_models_MediaItem-types_MediaData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/map_string_array_models.MediaItem-types_MediaData"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_Client-types_ClientConfig": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Client-types_ClientConfig"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_Credit": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Credit"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_JobRun": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.JobRun"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_JobSchedule": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.JobSchedule"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-suasor_clients_media_types_Movie"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Album": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Album"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Artist": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Artist"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_ListData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_ListData"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_MediaData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_MediaData"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Playlist": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Playlist"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Series": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Series"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItem-types_Track": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItem-types_Track"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_MediaItemList": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.MediaItemList"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_Person": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Person"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_PersonCreditsByRole": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.PersonCreditsByRole"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_PersonWithCredits": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.PersonWithCredits"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_UserConfig": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.UserConfig"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-models_UserMediaItemData-types_MediaData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.UserMediaItemData-types_MediaData"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-requests_AvatarUploadResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/requests.AvatarUploadResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_AiContentAnalysisResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.AiContentAnalysisResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_AiRecommendationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.AiRecommendationResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_AuthDataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.AuthDataResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_ConversationMessageResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.ConversationMessageResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_ConversationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.ConversationResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_EmptyResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.EmptyResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_HealthResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.HealthResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_MediaItemResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.MediaItemResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_RecommendationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.RecommendationResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_RecommendationsListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.RecommendationsListResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_TestConnectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.TestConnectionResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-responses_UserResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.UserResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-types_Configuration": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.Configuration"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.APIResponse-types_MediaData": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.AiContentAnalysisResponse": {
            "description": "Response containing AI-powered content analysis",
            "type": "object",
            "properties": {
                "analysis": {
                    "description": "Analysis results",
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "responses.AiRecommendationResponse": {
            "description": "Response containing AI-powered content recommendations",
            "type": "object",
            "properties": {
                "items": {
                    "description": "List of recommended items",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                }
            }
        },
        "responses.AuthDataResponse": {
            "description": "Authentication data returned to client after successful authentication",
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "AccessToken is the JWT token for API access\n\t@Description\tJWT access token for authenticated requests\n\t@Example\t\t\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string"
                },
                "expiresAt": {
                    "description": "ExpiresAt indicates when the access token expires\n\t@Description\tUNIX timestamp when the access token expires\n\t@Example\t\t1674140400",
                    "type": "integer"
                },
                "refreshToken": {
                    "description": "RefreshToken is used to get new access tokens\n\t@Description\tJWT refresh token for obtaining new access tokens\n\t@Example\t\t\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string"
                },
                "user": {
                    "description": "User contains the user profile information\n\t@Description\tUser profile data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/responses.UserResponse"
                        }
                    ]
                }
            }
        },
        "responses.AutomationExecuteCommandResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "responses.ConversationMessageResponse": {
            "description": "Response to a message in an AI conversation",
            "type": "object",
            "properties": {
                "context": {
                    "description": "Additional message context\nexample: {\"sentiment\": \"positive\", \"topicShift\": false}",
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "description": "The AI's response to the user message\nexample: \"Based on your interest in Interstellar, I'd recommend checking out these sci-fi movies with similar themes of space exploration and time: 1. Arrival (2016), 2. The Martian (2015), 3. Ad Astra (2019). Would you like more recommendations or details about any of these?\"",
                    "type": "string"
                },
                "recommendations": {
                    "description": "Recommendations included in the response, if any\nexample: [{\"title\": \"Arrival\", \"year\": 2016, \"genre\": \"Sci-Fi\"}, {\"title\": \"The Martian\", \"year\": 2015, \"genre\": \"Sci-Fi\"}]",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                }
            }
        },
        "responses.ConversationResponse": {
            "description": "Response containing conversation details",
            "type": "object",
            "properties": {
                "context": {
                    "description": "Additional information about the conversation context\nexample: {\"contentType\": \"movie\", \"session\": \"active\"}",
                    "type": "object",
                    "additionalProperties": true
                },
                "conversationId": {
                    "description": "Unique ID for the conversation\nexample: conv-123-abcdef",
                    "type": "string"
                },
                "welcome": {
                    "description": "Initial greeting or message from the AI\nexample: \"Hi there! I'm your movie recommendation assistant. What kind of movies do you enjoy watching?\"",
                    "type": "string"
                }
            }
        },
        "responses.EmptyAPIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.EmptyResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "responses.ErrorDetails": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "stackInfo": {
                    "type": "string"
                }
            }
        },
        "responses.ErrorResponse-any": {
            "type": "object",
            "properties": {
                "details": {},
                "message": {
                    "type": "string",
                    "example": "This is a pretty message"
                },
                "request_id": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 201
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/errors.ErrorType"
                        }
                    ],
                    "example": "FAILED_CHECK"
                }
            }
        },
        "responses.ErrorResponse-error": {
            "type": "object",
            "properties": {
                "details": {},
                "message": {
                    "type": "string",
                    "example": "This is a pretty message"
                },
                "request_id": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 201
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/errors.ErrorType"
                        }
                    ],
                    "example": "FAILED_CHECK"
                }
            }
        },
        "responses.ErrorResponse-responses_ErrorDetails": {
            "type": "object",
            "properties": {
                "details": {
                    "$ref": "#/definitions/responses.ErrorDetails"
                },
                "message": {
                    "type": "string",
                    "example": "This is a pretty message"
                },
                "request_id": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 201
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/errors.ErrorType"
                        }
                    ],
                    "example": "FAILED_CHECK"
                }
            }
        },
        "responses.HealthResponse": {
            "type": "object",
            "required": [
                "application",
                "database",
                "status"
            ],
            "properties": {
                "application": {
                    "type": "boolean",
                    "example": true
                },
                "database": {
                    "type": "boolean",
                    "example": true
                },
                "status": {
                    "description": "Overall status of the system",
                    "type": "string",
                    "enum": [
                        "up",
                        "down",
                        "degraded"
                    ],
                    "example": "up"
                }
            }
        },
        "responses.MediaItemResponse": {
            "type": "object",
            "properties": {
                "clientID": {
                    "type": "integer"
                },
                "clientType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {},
                "externalID": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.MediaType"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "responses.RecentSearchHistoryItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "resultCount": {
                    "type": "integer"
                },
                "searchedAt": {
                    "type": "string"
                }
            }
        },
        "responses.RecentSearchesResponse": {
            "type": "object",
            "properties": {
                "searches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.RecentSearchHistoryItem"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "responses.RecommendationResponse": {
            "type": "object",
            "properties": {
                "aiModel": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "externalIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "isViewed": {
                    "type": "boolean"
                },
                "matchesActors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "matchesDirectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "matchesGenres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mediaType": {
                    "$ref": "#/definitions/types.MediaType"
                },
                "reasoning": {
                    "type": "string"
                },
                "recommendedBy": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "similarItems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "userRating": {
                    "type": "number"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "responses.RecommendationsListResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "mediaType": {
                    "type": "string"
                },
                "offset": {
                    "type": "integer"
                },
                "recommendations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.RecommendationResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "responses.SearchResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "$ref": "#/definitions/responses.SearchResults"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "responses.SearchResults": {
            "type": "object",
            "properties": {
                "albums": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Album"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "artists": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Artist"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "collections": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/suasor_clients_media_types.Collection"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "episodes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Episode"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "movies": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/suasor_clients_media_types.Movie"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "people": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Person"
                    }
                },
                "playlists": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Playlist"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "series": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Series"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                },
                "totalCount": {
                    "type": "integer"
                },
                "tracks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "createdAt": {
                                "type": "string"
                            },
                            "data": {
                                "description": "Type-specific media data",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.Track"
                                    }
                                ]
                            },
                            "deletedAt": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "externalIds": {
                                "description": "External IDs for this item (TMDB, IMDB, etc.)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.ExternalID"
                                }
                            },
                            "id": {
                                "description": "Internal ID",
                                "type": "integer"
                            },
                            "isPublic": {
                                "description": "Whether this item is public or not",
                                "type": "boolean"
                            },
                            "ownerId": {
                                "description": "ID of the user that owns this item, 0 for system owned items",
                                "type": "integer"
                            },
                            "releaseDate": {
                                "type": "string"
                            },
                            "releaseYear": {
                                "type": "integer"
                            },
                            "streamUrl": {
                                "type": "string"
                            },
                            "syncClients": {
                                "description": "Client IDs for this item (mapping client to their IDs)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SyncClient"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of media (movie, show, episode, etc.)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.MediaType"
                                    }
                                ]
                            },
                            "updatedAt": {
                                "type": "string"
                            },
                            "uuid": {
                                "description": "Stable UUID for syncing",
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "responses.SearchSuggestionsResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                },
                "suggestions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "responses.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.EmptyResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.SystemStatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "responses.TestConnectionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "responses.TrendingSearchItem": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string"
                },
                "searchCount": {
                    "type": "integer"
                }
            }
        },
        "responses.TrendingSearchesResponse": {
            "type": "object",
            "properties": {
                "searches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.TrendingSearchItem"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "responses.UserResponse": {
            "description": "User information returned in API responses",
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "Avatar is the path to the user's avatar image\n\t@Description\tPath to the user's avatar image\n\t@Example\t\t\"/uploads/avatars/user_1.jpg\"",
                    "type": "string",
                    "example": "/uploads/avatars/user_1.jpg"
                },
                "email": {
                    "description": "Email is the unique email address of the user\n\t@Description\tUser's email address\n\t@Example\t\t\"user@example.com\"",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the user\n\t@Description\tUser's unique identifier\n\t@Example\t\t1",
                    "type": "integer"
                },
                "role": {
                    "description": "Role defines the user's permission level\n\t@Description\tUser's role in the system\n\t@Enum\t\t\t\"user\" \"admin\"\n\t@Example\t\t\"user\"",
                    "type": "string"
                },
                "username": {
                    "description": "Username is the display name chosen by the user\n\t@Description\tUser's chosen username\n\t@Example\t\t\"johndoe\"",
                    "type": "string"
                }
            }
        },
        "suasor_clients_media_types.Collection": {
            "type": "object",
            "properties": {
                "autoUpdateTime": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "isSmart": {
                    "description": "Smart lists",
                    "type": "boolean"
                },
                "itemCount": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ListItem"
                    }
                },
                "lastModified": {
                    "description": "Track when and which client last modified this playlist",
                    "type": "string"
                },
                "lastSynced": {
                    "type": "string"
                },
                "modifiedBy": {
                    "description": "client ID",
                    "type": "integer"
                },
                "owner": {
                    "type": "integer"
                },
                "sharedWith": {
                    "description": "ListCollaboratorIDs",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "smartCriteria": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "syncClientStates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SyncClientState"
                    }
                }
            }
        },
        "suasor_clients_media_types.ExternalID": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The actual ID",
                    "type": "string"
                },
                "source": {
                    "description": "e.g., \"tmdb\", \"imdb\", \"trakt\", \"tvdb\"",
                    "type": "string"
                }
            }
        },
        "suasor_clients_media_types.Movie": {
            "type": "object",
            "properties": {
                "MediaData": {},
                "audioCodec": {
                    "type": "string"
                },
                "credits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_clients_media_types.Person"
                    }
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "resolution": {
                    "description": "e.g., \"4K\", \"1080p\"",
                    "type": "string"
                },
                "subtitleUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trailerUrl": {
                    "type": "string"
                },
                "videoCodec": {
                    "type": "string"
                }
            }
        },
        "suasor_clients_media_types.Person": {
            "type": "object",
            "properties": {
                "MediaData": {},
                "character": {
                    "description": "For actors",
                    "type": "string"
                },
                "isArtist": {
                    "type": "boolean"
                },
                "isCast": {
                    "type": "boolean"
                },
                "isCreator": {
                    "type": "boolean"
                },
                "isCrew": {
                    "type": "boolean"
                },
                "isGuest": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "role": {
                    "description": "e.g., \"Director\", \"Actor\"",
                    "type": "string"
                }
            }
        },
        "suasor_clients_media_types.Rating": {
            "type": "object",
            "properties": {
                "source": {
                    "description": "e.g., \"tmdb\", \"imdb\", \"trakt\", \"tvdb\"",
                    "type": "string"
                },
                "value": {
                    "description": "The actual ID",
                    "type": "number"
                },
                "votes": {
                    "description": "For sources that might have how many people voted on an item",
                    "type": "integer"
                }
            }
        },
        "types.Album": {
            "type": "object",
            "properties": {
                "artistID": {
                    "type": "integer"
                },
                "artistName": {
                    "type": "string"
                },
                "credits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_clients_media_types.Person"
                    }
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "syncArtist": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SyncClient"
                    }
                },
                "trackCount": {
                    "type": "integer"
                },
                "trackIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tracks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Track"
                    }
                }
            }
        },
        "types.Artist": {
            "type": "object",
            "properties": {
                "MediaData": {},
                "albumCount": {
                    "type": "integer"
                },
                "albumIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "albums": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Album"
                    }
                },
                "biography": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "similarArtists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ArtistReference"
                    }
                }
            }
        },
        "types.ArtistReference": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.Artwork": {
            "type": "object",
            "properties": {
                "background": {
                    "type": "string"
                },
                "banner": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "poster": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                }
            }
        },
        "types.ChangeRecord": {
            "type": "object",
            "properties": {
                "changeType": {
                    "description": "\"add\", \"remove\", \"update\", \"reorder\", \"sync\"",
                    "type": "string"
                },
                "clientID": {
                    "description": "0 = internal client",
                    "type": "integer"
                },
                "itemID": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "types.ClaudeConfig": {
            "description": "Claude AI service configuration",
            "type": "object",
            "properties": {
                "AIClientConfig": {},
                "maxContextTokens": {
                    "type": "integer",
                    "example": 100000
                },
                "maxTokens": {
                    "type": "integer",
                    "example": 2000
                },
                "model": {
                    "type": "string",
                    "example": "claude-3-opus-20240229"
                },
                "temperature": {
                    "type": "number",
                    "example": 0.7
                }
            }
        },
        "types.ClientCategory": {
            "type": "string",
            "enum": [
                "automation",
                "media",
                "ai",
                "metadata",
                "unknown"
            ],
            "x-enum-varnames": [
                "ClientCategoryAutomation",
                "ClientCategoryMedia",
                "ClientCategoryAI",
                "ClientCategoryMetadata",
                "ClientCategoryUnknown"
            ]
        },
        "types.ClientType": {
            "type": "string",
            "enum": [
                "emby",
                "jellyfin",
                "plex",
                "subsonic",
                "radarr",
                "sonarr",
                "lidarr",
                "unknown",
                "claude",
                "openai",
                "ollama",
                "tmdb",
                "trakt"
            ],
            "x-enum-varnames": [
                "ClientTypeEmby",
                "ClientTypeJellyfin",
                "ClientTypePlex",
                "ClientTypeSubsonic",
                "ClientTypeRadarr",
                "ClientTypeSonarr",
                "ClientTypeLidarr",
                "ClientTypeUnknown",
                "ClientTypeClaude",
                "ClientTypeOpenAI",
                "ClientTypeOllama",
                "ClientTypeTMDB",
                "ClientTypeTrakt"
            ]
        },
        "types.Configuration": {
            "description": "Complete application configuration settings",
            "type": "object",
            "properties": {
                "app": {
                    "description": "App contains core application settings",
                    "type": "object",
                    "required": [
                        "apiBaseURL",
                        "appURL",
                        "avatarPath",
                        "environment",
                        "logLevel",
                        "maxAvatarSize",
                        "maxPageSize",
                        "name"
                    ],
                    "properties": {
                        "apiBaseURL": {
                            "type": "string",
                            "example": "http://localhost:8080"
                        },
                        "appURL": {
                            "type": "string",
                            "example": "http://localhost:3000"
                        },
                        "avatarPath": {
                            "type": "string",
                            "example": "./uploads/avatars"
                        },
                        "environment": {
                            "type": "string",
                            "enum": [
                                "development",
                                "staging",
                                "production"
                            ],
                            "example": "development"
                        },
                        "logLevel": {
                            "type": "string",
                            "enum": [
                                "debug",
                                "info",
                                "warn",
                                "error"
                            ],
                            "example": "info"
                        },
                        "maxAvatarSize": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 5242880
                        },
                        "maxPageSize": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "example": 100
                        },
                        "name": {
                            "type": "string",
                            "example": "suasor"
                        }
                    }
                },
                "auth": {
                    "description": "Auth contains authentication settings",
                    "type": "object",
                    "required": [
                        "accessExpiryMinutes",
                        "jwtSecret",
                        "refreshExpiryDays",
                        "sessionTimeout",
                        "tokenAudience",
                        "tokenExpiration",
                        "tokenIssuer"
                    ],
                    "properties": {
                        "accessExpiryMinutes": {
                            "description": "New fields to add",
                            "type": "integer",
                            "minimum": 1,
                            "example": 15
                        },
                        "allowedOrigins": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "example": [
                                "http://localhost:3000"
                            ]
                        },
                        "enable2FA": {
                            "type": "boolean",
                            "example": false
                        },
                        "enableLocal": {
                            "type": "boolean",
                            "example": true
                        },
                        "jwtSecret": {
                            "type": "string",
                            "example": "your-secret-key"
                        },
                        "refreshExpiryDays": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 7
                        },
                        "sessionTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 60
                        },
                        "tokenAudience": {
                            "type": "string",
                            "example": "suasor-client"
                        },
                        "tokenExpiration": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 24
                        },
                        "tokenIssuer": {
                            "type": "string",
                            "example": "suasor-api"
                        }
                    }
                },
                "db": {
                    "description": "Database contains database connection settings",
                    "type": "object",
                    "required": [
                        "host",
                        "maxConns",
                        "name",
                        "password",
                        "port",
                        "timeout",
                        "user"
                    ],
                    "properties": {
                        "host": {
                            "type": "string",
                            "example": "localhost"
                        },
                        "maxConns": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 20
                        },
                        "name": {
                            "type": "string",
                            "example": "suasor"
                        },
                        "password": {
                            "type": "string",
                            "example": "yourpassword"
                        },
                        "port": {
                            "type": "string",
                            "example": "5432"
                        },
                        "timeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 30
                        },
                        "user": {
                            "type": "string",
                            "example": "postgres_user"
                        }
                    }
                },
                "http": {
                    "description": "HTTP contains HTTP server configuration",
                    "type": "object",
                    "required": [
                        "idleTimeout",
                        "port",
                        "readTimeout",
                        "writeTimeout"
                    ],
                    "properties": {
                        "baseURL": {
                            "type": "string",
                            "example": "http://localhost:8080"
                        },
                        "enableSSL": {
                            "type": "boolean",
                            "example": false
                        },
                        "idleTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 60
                        },
                        "port": {
                            "type": "string",
                            "example": "8080"
                        },
                        "proxyEnabled": {
                            "type": "boolean",
                            "example": false
                        },
                        "proxyURL": {
                            "type": "string",
                            "example": "http://proxy:8080"
                        },
                        "rateLimitEnabled": {
                            "type": "boolean",
                            "example": true
                        },
                        "readTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 30
                        },
                        "requestsPerMin": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "sslCert": {
                            "type": "string",
                            "example": "/path/to/cert.pem"
                        },
                        "sslKey": {
                            "type": "string",
                            "example": "/path/to/key.pem"
                        },
                        "writeTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 30
                        }
                    }
                }
            }
        },
        "types.EmbyConfig": {
            "description": "Emby media server configuration",
            "type": "object",
            "properties": {
                "details": {},
                "userID": {
                    "type": "string",
                    "example": "your-internal-user-id"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "types.Episode": {
            "type": "object",
            "properties": {
                "credits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_clients_media_types.Person"
                    }
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "number": {
                    "type": "integer"
                },
                "seasonID": {
                    "type": "integer"
                },
                "seasonNumber": {
                    "type": "integer"
                },
                "showID": {
                    "type": "integer"
                },
                "showTitle": {
                    "type": "string"
                },
                "syncSeason": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SyncClient"
                    }
                },
                "syncSeries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SyncClient"
                    }
                }
            }
        },
        "types.GenerationOptions": {
            "type": "object",
            "properties": {
                "maxTokens": {
                    "description": "Maximum response length",
                    "type": "integer"
                },
                "responseFormat": {
                    "description": "Optional format like \"json\" if supported",
                    "type": "string"
                },
                "systemInstructions": {
                    "description": "System instructions for the AI",
                    "type": "string"
                },
                "temperature": {
                    "description": "Controls randomness (0.0-1.0)",
                    "type": "number"
                }
            }
        },
        "types.JellyfinConfig": {
            "description": "Jellyfin media server configuration",
            "type": "object",
            "properties": {
                "ClientMediaConfig": {},
                "userID": {
                    "type": "string",
                    "example": "your-internal-user-id"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "types.LidarrConfig": {
            "description": "Lidarr automation server configuration",
            "type": "object",
            "properties": {
                "ClientAutomationConfig": {}
            }
        },
        "types.ListItem": {
            "type": "object",
            "properties": {
                "changeHistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ChangeRecord"
                    }
                },
                "itemID": {
                    "type": "integer"
                },
                "lastChanged": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.MediaType"
                }
            }
        },
        "types.ListType": {
            "type": "string",
            "enum": [
                "playlist",
                "collection"
            ],
            "x-enum-varnames": [
                "ListTypePlaylist",
                "ListTypeCollection"
            ]
        },
        "types.MediaDetails": {
            "type": "object",
            "properties": {
                "addedAt": {
                    "type": "string"
                },
                "artwork": {
                    "$ref": "#/definitions/types.Artwork"
                },
                "contentRating": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "durationSeconds": {
                    "description": "Changed from time.Duration to int64 for Swagger compatibility",
                    "type": "integer"
                },
                "externalIDs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_clients_media_types.ExternalID"
                    }
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isFavorite": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "ratings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_clients_media_types.Rating"
                    }
                },
                "releaseDate": {
                    "type": "string"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "studios": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userRating": {
                    "type": "number"
                }
            }
        },
        "types.MediaType": {
            "type": "string",
            "enum": [
                "movie",
                "series",
                "season",
                "episode",
                "artist",
                "album",
                "track",
                "playlist",
                "collection",
                "all",
                "unknown"
            ],
            "x-enum-varnames": [
                "MediaTypeMovie",
                "MediaTypeSeries",
                "MediaTypeSeason",
                "MediaTypeEpisode",
                "MediaTypeArtist",
                "MediaTypeAlbum",
                "MediaTypeTrack",
                "MediaTypePlaylist",
                "MediaTypeCollection",
                "MediaTypeAll",
                "MediaTypeUnknown"
            ]
        },
        "types.OllamaConfig": {
            "description": "Ollama local AI service configuration",
            "type": "object",
            "properties": {
                "AIClientConfig": {},
                "model": {
                    "type": "string",
                    "example": "llama2"
                },
                "temperature": {
                    "type": "number",
                    "example": 0.7
                }
            }
        },
        "types.OpenAIConfig": {
            "description": "OpenAI service configuration",
            "type": "object",
            "properties": {
                "AIClientConfig": {},
                "maxContextTokens": {
                    "type": "integer",
                    "example": 8192
                },
                "maxTokens": {
                    "type": "integer",
                    "example": 1000
                },
                "model": {
                    "type": "string",
                    "example": "gpt-4-turbo"
                },
                "temperature": {
                    "type": "number",
                    "example": 0.7
                }
            }
        },
        "types.Playlist": {
            "type": "object",
            "properties": {
                "autoUpdateTime": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "isSmart": {
                    "description": "Smart lists",
                    "type": "boolean"
                },
                "itemCount": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ListItem"
                    }
                },
                "lastModified": {
                    "description": "Track when and which client last modified this playlist",
                    "type": "string"
                },
                "lastSynced": {
                    "type": "string"
                },
                "modifiedBy": {
                    "description": "client ID",
                    "type": "integer"
                },
                "owner": {
                    "type": "integer"
                },
                "sharedWith": {
                    "description": "ListCollaboratorIDs",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "smartCriteria": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "syncClientStates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SyncClientState"
                    }
                }
            }
        },
        "types.PlexConfig": {
            "description": "Plex media server configuration",
            "type": "object",
            "properties": {
                "ClientMediaConfig": {},
                "token": {
                    "type": "string",
                    "example": "your-plex-token"
                }
            }
        },
        "types.RadarrConfig": {
            "description": "Radarr movie automation server configuration",
            "type": "object",
            "properties": {
                "ClientAutomationConfig": {}
            }
        },
        "types.RecommendationRequest": {
            "type": "object",
            "properties": {
                "additionalContext": {
                    "description": "Additional context or instructions",
                    "type": "string"
                },
                "count": {
                    "description": "Number of recommendations to generate",
                    "type": "integer"
                },
                "excludeIDs": {
                    "description": "IDs to exclude from recommendations",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generationOptions": {
                    "description": "Options for the generation process",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.GenerationOptions"
                        }
                    ]
                },
                "includeSimilarTo": {
                    "description": "Include items similar to these IDs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mediaType": {
                    "description": "Type of media (\"movie\", \"series\", \"music\")",
                    "type": "string"
                },
                "userPreferences": {
                    "description": "User preferences to consider",
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "types.Season": {
            "type": "object",
            "properties": {
                "MediaData": {},
                "artwork": {
                    "$ref": "#/definitions/types.Artwork"
                },
                "credits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_clients_media_types.Person"
                    }
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "episodeCount": {
                    "type": "integer"
                },
                "episodeIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "episodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Episode"
                    }
                },
                "overview": {
                    "type": "string"
                },
                "releaseDate": {
                    "type": "string"
                },
                "seasonNumber": {
                    "type": "integer"
                },
                "seriesID": {
                    "type": "integer"
                },
                "seriesName": {
                    "type": "string"
                },
                "syncSeries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SyncClient"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.Series": {
            "type": "object",
            "properties": {
                "MediaData": {},
                "contentRating": {
                    "type": "string"
                },
                "credits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_clients_media_types.Person"
                    }
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "episodeCount": {
                    "type": "integer"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "network": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "releaseYear": {
                    "type": "integer"
                },
                "seasonCount": {
                    "type": "integer"
                },
                "seasons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Season"
                    }
                },
                "status": {
                    "description": "e.g., \"Ended\", \"Continuing\"",
                    "type": "string"
                }
            }
        },
        "types.SonarrConfig": {
            "description": "Sonarr TV series automation server configuration",
            "type": "object",
            "properties": {
                "ClientAutomationConfig": {}
            }
        },
        "types.SubsonicConfig": {
            "description": "Supersonic music server configuration",
            "type": "object",
            "properties": {
                "ClientMediaConfig": {},
                "password": {
                    "type": "string",
                    "example": "your-password"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "types.SyncClient": {
            "type": "object",
            "properties": {
                "clientID": {
                    "description": "ID of the client that this external ID belongs to (optional for service IDs like TMDB)",
                    "type": "integer"
                },
                "itemID": {
                    "description": "The actual ID value in the external system",
                    "type": "string"
                }
            }
        },
        "types.SyncClientState": {
            "type": "object",
            "properties": {
                "clientID": {
                    "type": "integer"
                },
                "clientListID": {
                    "type": "string"
                },
                "items": {
                    "description": "Integration Client's Internal IDs for the items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SyncListItem"
                    }
                },
                "lastSynced": {
                    "description": "Time last synced to this client",
                    "type": "string"
                }
            }
        },
        "types.SyncListItem": {
            "type": "object",
            "properties": {
                "changeHistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ChangeRecord"
                    }
                },
                "itemID": {
                    "type": "string"
                },
                "lastChanged": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                }
            }
        },
        "types.Track": {
            "type": "object",
            "properties": {
                "albumID": {
                    "type": "integer"
                },
                "albumName": {
                    "type": "string"
                },
                "albumTitle": {
                    "type": "string"
                },
                "artistID": {
                    "type": "integer"
                },
                "artistName": {
                    "type": "string"
                },
                "composer": {
                    "type": "string"
                },
                "credits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/suasor_clients_media_types.Person"
                    }
                },
                "details": {
                    "$ref": "#/definitions/types.MediaDetails"
                },
                "discNumber": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "lyrics": {
                    "type": "string"
                },
                "syncAlbum": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SyncClient"
                    }
                },
                "syncArtist": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SyncClient"
                    }
                },
                "trackNumber": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Suasor API",
	Description:      "API Server for Suasor",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
