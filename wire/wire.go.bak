//go:build wireinject
// +build wireinject

package wire

import (
	"context"
	"time"

	"github.com/google/wire"
	"gorm.io/gorm"
	"suasor/client"
	"suasor/client/media/types"
	clienttypes "suasor/client/types"
	"suasor/database"
	"suasor/handlers"
	"suasor/repository"
	repobundles "suasor/repository/bundles"
	"suasor/services"
	"suasor/services/jobs"
	"suasor/services/jobs/recommendation"
	apptypes "suasor/types"
)

// ApplicationHandlers contains all the handlers for the application
type ApplicationHandlers struct {

	// System Handlers
	AuthHandler       *handlers.AuthHandler
	UserHandler       *handlers.UserHandler
	ConfigHandler     *handlers.ConfigHandler
	JobHandler        *handlers.JobHandler
	HealthHandler     *handlers.HealthHandler
	SearchHandler     *handlers.SearchHandler
	PeopleHandler     *handlers.PeopleHandler
	UserConfigHandler *handlers.UserConfigHandler
	
	// Client Handlers
	ClientsHandler       *handlers.ClientsHandler
	EmbyClientHandler    *handlers.ClientHandler[*clienttypes.EmbyConfig]
	JellyfinClientHandler *handlers.ClientHandler[*clienttypes.JellyfinConfig]
	PlexClientHandler    *handlers.ClientHandler[*clienttypes.PlexConfig]
	SubsonicClientHandler *handlers.ClientHandler[*clienttypes.SubsonicConfig]
	
	// Automation Client Handlers
	RadarrClientHandler  *handlers.ClientHandler[*clienttypes.RadarrConfig]
	SonarrClientHandler  *handlers.ClientHandler[*clienttypes.SonarrConfig]
	LidarrClientHandler  *handlers.ClientHandler[*clienttypes.LidarrConfig]
	
	// AI Client Handlers
	AIHandler           *handlers.AIHandler
	ClaudeClientHandler  *handlers.ClientHandler[*clienttypes.ClaudeConfig]
	OpenAIClientHandler  *handlers.ClientHandler[*clienttypes.OpenAIConfig]
	OllamaClientHandler  *handlers.ClientHandler[*clienttypes.OllamaConfig]
	
	// Metadata Client Handlers
	MetadataClientHandler *handlers.MetadataClientHandler
	
	// Client Media Handlers
	EmbyMovieHandler    *handlers.ClientMediaItemHandler[*clienttypes.EmbyConfig, *types.Movie]
	EmbySeriesHandler   *handlers.ClientMediaItemHandler[*clienttypes.EmbyConfig, *types.Series]
	JellyfinMovieHandler *handlers.ClientMediaItemHandler[*clienttypes.JellyfinConfig, *types.Movie]
	JellyfinSeriesHandler *handlers.ClientMediaItemHandler[*clienttypes.JellyfinConfig, *types.Series]
	PlexMovieHandler    *handlers.ClientMediaItemHandler[*clienttypes.PlexConfig, *types.Movie]
	PlexSeriesHandler   *handlers.ClientMediaItemHandler[*clienttypes.PlexConfig, *types.Series]
	
	// Media Item Handlers
	MovieHandler   handlers.UserMediaItemHandler[*types.Movie]
	SeriesHandler  handlers.UserMediaItemHandler[*types.Series]
	SeasonHandler  handlers.UserMediaItemHandler[*types.Season]
	EpisodeHandler handlers.UserMediaItemHandler[*types.Episode]
	TrackHandler   handlers.UserMediaItemHandler[*types.Track]
	AlbumHandler   handlers.UserMediaItemHandler[*types.Album]
	ArtistHandler  handlers.UserMediaItemHandler[*types.Artist]

	// List Handlers
	PlaylistHandler   handlers.UserListHandler[*types.Playlist]
	CollectionHandler handlers.UserListHandler[*types.Collection]

	// Media Item Data Handlers
	MovieDataHandler      handlers.UserMediaItemDataHandler[*types.Movie]
	SeriesDataHandler     handlers.UserMediaItemDataHandler[*types.Series]
	SeasonDataHandler     handlers.UserMediaItemDataHandler[*types.Season]
	EpisodeDataHandler    handlers.UserMediaItemDataHandler[*types.Episode]
	TrackDataHandler      handlers.UserMediaItemDataHandler[*types.Track]
	AlbumDataHandler      handlers.UserMediaItemDataHandler[*types.Album]
	ArtistDataHandler     handlers.UserMediaItemDataHandler[*types.Artist]
	PlaylistDataHandler   handlers.UserMediaItemDataHandler[*types.Playlist]
	CollectionDataHandler handlers.UserMediaItemDataHandler[*types.Collection]
	
	// Specialized Handlers
	RecommendationHandler *handlers.RecommendationHandler
	CreditHandler         *handlers.CreditHandler
	CalendarHandler       *handlers.CalendarHandler
}

// ProvideDB provides the database connection
func ProvideDB() (*gorm.DB, error) {
	// In a real implementation, this would load proper configuration from environment or config file
	// This is a simplified version for demonstration purposes
	dbConfig := apptypes.DatabaseConfig{
		Host:     "localhost",
		Port:     "5432",
		User:     "postgres",
		Password: "postgres",
		Name:     "suasor",
	}

	// Initialize database connection
	return database.Initialize(context.Background(), dbConfig)
}

// ----- Repository Providers -----

// Media Item Repositories
func ProvideMovieRepository(db *gorm.DB) repository.MediaItemRepository[*types.Movie] {
	return repository.NewMediaItemRepository[*types.Movie](db)
}

func ProvideSeriesRepository(db *gorm.DB) repository.MediaItemRepository[*types.Series] {
	return repository.NewMediaItemRepository[*types.Series](db)
}

func ProvideSeasonRepository(db *gorm.DB) repository.MediaItemRepository[*types.Season] {
	return repository.NewMediaItemRepository[*types.Season](db)
}

func ProvideEpisodeRepository(db *gorm.DB) repository.MediaItemRepository[*types.Episode] {
	return repository.NewMediaItemRepository[*types.Episode](db)
}

func ProvideTrackRepository(db *gorm.DB) repository.MediaItemRepository[*types.Track] {
	return repository.NewMediaItemRepository[*types.Track](db)
}

func ProvideAlbumRepository(db *gorm.DB) repository.MediaItemRepository[*types.Album] {
	return repository.NewMediaItemRepository[*types.Album](db)
}

func ProvideArtistRepository(db *gorm.DB) repository.MediaItemRepository[*types.Artist] {
	return repository.NewMediaItemRepository[*types.Artist](db)
}

func ProvidePlaylistRepository(db *gorm.DB) repository.MediaItemRepository[*types.Playlist] {
	return repository.NewMediaItemRepository[*types.Playlist](db)
}

func ProvideCollectionRepository(db *gorm.DB) repository.MediaItemRepository[*types.Collection] {
	return repository.NewMediaItemRepository[*types.Collection](db)
}

// User Media Item Repositories
func ProvideUserMovieRepository(db *gorm.DB) repository.UserMediaItemRepository[*types.Movie] {
	return repository.NewUserMediaItemRepository[*types.Movie](db)
}

func ProvideUserSeriesRepository(db *gorm.DB) repository.UserMediaItemRepository[*types.Series] {
	return repository.NewUserMediaItemRepository[*types.Series](db)
}

func ProvideUserSeasonRepository(db *gorm.DB) repository.UserMediaItemRepository[*types.Season] {
	return repository.NewUserMediaItemRepository[*types.Season](db)
}

func ProvideUserEpisodeRepository(db *gorm.DB) repository.UserMediaItemRepository[*types.Episode] {
	return repository.NewUserMediaItemRepository[*types.Episode](db)
}

func ProvideUserTrackRepository(db *gorm.DB) repository.UserMediaItemRepository[*types.Track] {
	return repository.NewUserMediaItemRepository[*types.Track](db)
}

func ProvideUserAlbumRepository(db *gorm.DB) repository.UserMediaItemRepository[*types.Album] {
	return repository.NewUserMediaItemRepository[*types.Album](db)
}

func ProvideUserArtistRepository(db *gorm.DB) repository.UserMediaItemRepository[*types.Artist] {
	return repository.NewUserMediaItemRepository[*types.Artist](db)
}

func ProvideUserPlaylistRepository(db *gorm.DB) repository.UserMediaItemRepository[*types.Playlist] {
	return repository.NewUserMediaItemRepository[*types.Playlist](db)
}

func ProvideUserCollectionRepository(db *gorm.DB) repository.UserMediaItemRepository[*types.Collection] {
	return repository.NewUserMediaItemRepository[*types.Collection](db)
}

// Core Media Item Data Repositories
func ProvideCoreMovieDataRepository(db *gorm.DB) repository.CoreUserMediaItemDataRepository[*types.Movie] {
	return repository.NewCoreUserMediaItemDataRepository[*types.Movie](db)
}

func ProvideCoreSeriesDataRepository(db *gorm.DB) repository.CoreUserMediaItemDataRepository[*types.Series] {
	return repository.NewCoreUserMediaItemDataRepository[*types.Series](db)
}

func ProvideCoreSeasonDataRepository(db *gorm.DB) repository.CoreUserMediaItemDataRepository[*types.Season] {
	return repository.NewCoreUserMediaItemDataRepository[*types.Season](db)
}

func ProvideCoreEpisodeDataRepository(db *gorm.DB) repository.CoreUserMediaItemDataRepository[*types.Episode] {
	return repository.NewCoreUserMediaItemDataRepository[*types.Episode](db)
}

func ProvideCoreTrackDataRepository(db *gorm.DB) repository.CoreUserMediaItemDataRepository[*types.Track] {
	return repository.NewCoreUserMediaItemDataRepository[*types.Track](db)
}

func ProvideCoreAlbumDataRepository(db *gorm.DB) repository.CoreUserMediaItemDataRepository[*types.Album] {
	return repository.NewCoreUserMediaItemDataRepository[*types.Album](db)
}

func ProvideCoreArtistDataRepository(db *gorm.DB) repository.CoreUserMediaItemDataRepository[*types.Artist] {
	return repository.NewCoreUserMediaItemDataRepository[*types.Artist](db)
}

func ProvideCorePlaylistDataRepository(db *gorm.DB) repository.CoreUserMediaItemDataRepository[*types.Playlist] {
	return repository.NewCoreUserMediaItemDataRepository[*types.Playlist](db)
}

func ProvideCoreCollectionDataRepository(db *gorm.DB) repository.CoreUserMediaItemDataRepository[*types.Collection] {
	return repository.NewCoreUserMediaItemDataRepository[*types.Collection](db)
}

// User Media Item Data Repositories
func ProvideUserMovieDataRepository(
	db *gorm.DB,
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Movie],
) repository.UserMediaItemDataRepository[*types.Movie] {
	return repository.NewUserMediaItemDataRepository[*types.Movie](db, coreRepo)
}

func ProvideUserSeriesDataRepository(
	db *gorm.DB,
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Series],
) repository.UserMediaItemDataRepository[*types.Series] {
	return repository.NewUserMediaItemDataRepository[*types.Series](db, coreRepo)
}

func ProvideUserSeasonDataRepository(
	db *gorm.DB,
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Season],
) repository.UserMediaItemDataRepository[*types.Season] {
	return repository.NewUserMediaItemDataRepository[*types.Season](db, coreRepo)
}

func ProvideUserEpisodeDataRepository(
	db *gorm.DB,
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Episode],
) repository.UserMediaItemDataRepository[*types.Episode] {
	return repository.NewUserMediaItemDataRepository[*types.Episode](db, coreRepo)
}

func ProvideUserTrackDataRepository(
	db *gorm.DB,
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Track],
) repository.UserMediaItemDataRepository[*types.Track] {
	return repository.NewUserMediaItemDataRepository[*types.Track](db, coreRepo)
}

func ProvideUserAlbumDataRepository(
	db *gorm.DB,
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Album],
) repository.UserMediaItemDataRepository[*types.Album] {
	return repository.NewUserMediaItemDataRepository[*types.Album](db, coreRepo)
}

func ProvideUserArtistDataRepository(
	db *gorm.DB,
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Artist],
) repository.UserMediaItemDataRepository[*types.Artist] {
	return repository.NewUserMediaItemDataRepository[*types.Artist](db, coreRepo)
}

func ProvideUserPlaylistDataRepository(
	db *gorm.DB,
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Playlist],
) repository.UserMediaItemDataRepository[*types.Playlist] {
	return repository.NewUserMediaItemDataRepository[*types.Playlist](db, coreRepo)
}

func ProvideUserCollectionDataRepository(
	db *gorm.DB,
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Collection],
) repository.UserMediaItemDataRepository[*types.Collection] {
	return repository.NewUserMediaItemDataRepository[*types.Collection](db, coreRepo)
}

// ----- Service Providers -----

// Core Media Item Services
func ProvideCoreMovieService(
	repo repository.MediaItemRepository[*types.Movie],
) services.CoreMediaItemService[*types.Movie] {
	return services.NewCoreMediaItemService[*types.Movie](repo)
}

func ProvideCoreSeriesService(
	repo repository.MediaItemRepository[*types.Series],
) services.CoreMediaItemService[*types.Series] {
	return services.NewCoreMediaItemService[*types.Series](repo)
}

func ProvideCoreSeasonService(
	repo repository.MediaItemRepository[*types.Season],
) services.CoreMediaItemService[*types.Season] {
	return services.NewCoreMediaItemService[*types.Season](repo)
}

func ProvideCoreEpisodeService(
	repo repository.MediaItemRepository[*types.Episode],
) services.CoreMediaItemService[*types.Episode] {
	return services.NewCoreMediaItemService[*types.Episode](repo)
}

func ProvideCoreTrackService(
	repo repository.MediaItemRepository[*types.Track],
) services.CoreMediaItemService[*types.Track] {
	return services.NewCoreMediaItemService[*types.Track](repo)
}

func ProvideCoreAlbumService(
	repo repository.MediaItemRepository[*types.Album],
) services.CoreMediaItemService[*types.Album] {
	return services.NewCoreMediaItemService[*types.Album](repo)
}

func ProvideCoreArtistService(
	repo repository.MediaItemRepository[*types.Artist],
) services.CoreMediaItemService[*types.Artist] {
	return services.NewCoreMediaItemService[*types.Artist](repo)
}

func ProvideCorePlaylistService(
	repo repository.MediaItemRepository[*types.Playlist],
) services.CoreMediaItemService[*types.Playlist] {
	return services.NewCoreMediaItemService[*types.Playlist](repo)
}

func ProvideCoreCollectionService(
	repo repository.MediaItemRepository[*types.Collection],
) services.CoreMediaItemService[*types.Collection] {
	return services.NewCoreMediaItemService[*types.Collection](repo)
}

// Core List Services
func ProvideCorePlaylistListService(
	repo repository.MediaItemRepository[*types.Playlist],
) services.CoreListService[*types.Playlist] {
	return services.NewCoreListService[*types.Playlist](repo)
}

func ProvideCoreCollectionListService(
	repo repository.MediaItemRepository[*types.Collection],
) services.CoreListService[*types.Collection] {
	return services.NewCoreListService[*types.Collection](repo)
}

// User Media Item Services
func ProvideUserMovieService(
	coreService services.CoreMediaItemService[*types.Movie],
	userRepo repository.UserMediaItemRepository[*types.Movie],
) services.UserMediaItemService[*types.Movie] {
	return services.NewUserMediaItemService[*types.Movie](coreService, userRepo)
}

func ProvideUserSeriesService(
	coreService services.CoreMediaItemService[*types.Series],
	userRepo repository.UserMediaItemRepository[*types.Series],
) services.UserMediaItemService[*types.Series] {
	return services.NewUserMediaItemService[*types.Series](coreService, userRepo)
}

func ProvideUserSeasonService(
	coreService services.CoreMediaItemService[*types.Season],
	userRepo repository.UserMediaItemRepository[*types.Season],
) services.UserMediaItemService[*types.Season] {
	return services.NewUserMediaItemService[*types.Season](coreService, userRepo)
}

func ProvideUserEpisodeService(
	coreService services.CoreMediaItemService[*types.Episode],
	userRepo repository.UserMediaItemRepository[*types.Episode],
) services.UserMediaItemService[*types.Episode] {
	return services.NewUserMediaItemService[*types.Episode](coreService, userRepo)
}

func ProvideUserTrackService(
	coreService services.CoreMediaItemService[*types.Track],
	userRepo repository.UserMediaItemRepository[*types.Track],
) services.UserMediaItemService[*types.Track] {
	return services.NewUserMediaItemService[*types.Track](coreService, userRepo)
}

func ProvideUserAlbumService(
	coreService services.CoreMediaItemService[*types.Album],
	userRepo repository.UserMediaItemRepository[*types.Album],
) services.UserMediaItemService[*types.Album] {
	return services.NewUserMediaItemService[*types.Album](coreService, userRepo)
}

func ProvideUserArtistService(
	coreService services.CoreMediaItemService[*types.Artist],
	userRepo repository.UserMediaItemRepository[*types.Artist],
) services.UserMediaItemService[*types.Artist] {
	return services.NewUserMediaItemService[*types.Artist](coreService, userRepo)
}

func ProvideUserPlaylistService(
	coreService services.CoreMediaItemService[*types.Playlist],
	userRepo repository.UserMediaItemRepository[*types.Playlist],
) services.UserMediaItemService[*types.Playlist] {
	return services.NewUserMediaItemService[*types.Playlist](coreService, userRepo)
}

func ProvideUserCollectionService(
	coreService services.CoreMediaItemService[*types.Collection],
	userRepo repository.UserMediaItemRepository[*types.Collection],
) services.UserMediaItemService[*types.Collection] {
	return services.NewUserMediaItemService[*types.Collection](coreService, userRepo)
}

// User List Services
func ProvideUserPlaylistListService(
	coreService services.CoreListService[*types.Playlist],
	userRepo repository.UserMediaItemRepository[*types.Playlist],
	userDataRepo repository.UserMediaItemDataRepository[*types.Playlist],
) services.UserListService[*types.Playlist] {
	return services.NewUserListService[*types.Playlist](coreService, userRepo, userDataRepo)
}

func ProvideUserCollectionListService(
	coreService services.CoreListService[*types.Collection],
	userRepo repository.UserMediaItemRepository[*types.Collection],
	userDataRepo repository.UserMediaItemDataRepository[*types.Collection],
) services.UserListService[*types.Collection] {
	return services.NewUserListService[*types.Collection](coreService, userRepo, userDataRepo)
}

// Core User Media Item Data Services
func ProvideCoreMovieDataService(
	coreService services.CoreMediaItemService[*types.Movie],
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Movie],
) services.CoreUserMediaItemDataService[*types.Movie] {
	return services.NewCoreUserMediaItemDataService[*types.Movie](coreService, coreRepo)
}

func ProvideCoreSeriesDataService(
	coreService services.CoreMediaItemService[*types.Series],
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Series],
) services.CoreUserMediaItemDataService[*types.Series] {
	return services.NewCoreUserMediaItemDataService[*types.Series](coreService, coreRepo)
}

func ProvideCoreEpisodeDataService(
	coreService services.CoreMediaItemService[*types.Episode],
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Episode],
) services.CoreUserMediaItemDataService[*types.Episode] {
	return services.NewCoreUserMediaItemDataService[*types.Episode](coreService, coreRepo)
}

func ProvideCoreSeasonDataService(
	coreService services.CoreMediaItemService[*types.Season],
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Season],
) services.CoreUserMediaItemDataService[*types.Season] {
	return services.NewCoreUserMediaItemDataService[*types.Season](coreService, coreRepo)
}

func ProvideCoreTrackDataService(
	coreService services.CoreMediaItemService[*types.Track],
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Track],
) services.CoreUserMediaItemDataService[*types.Track] {
	return services.NewCoreUserMediaItemDataService[*types.Track](coreService, coreRepo)
}

func ProvideCoreAlbumDataService(
	coreService services.CoreMediaItemService[*types.Album],
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Album],
) services.CoreUserMediaItemDataService[*types.Album] {
	return services.NewCoreUserMediaItemDataService[*types.Album](coreService, coreRepo)
}

func ProvideCoreArtistDataService(
	coreService services.CoreMediaItemService[*types.Artist],
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Artist],
) services.CoreUserMediaItemDataService[*types.Artist] {
	return services.NewCoreUserMediaItemDataService[*types.Artist](coreService, coreRepo)
}

func ProvideCorePlaylistDataService(
	coreService services.CoreMediaItemService[*types.Playlist],
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Playlist],
) services.CoreUserMediaItemDataService[*types.Playlist] {
	return services.NewCoreUserMediaItemDataService[*types.Playlist](coreService, coreRepo)
}

func ProvideCoreCollectionDataService(
	coreService services.CoreMediaItemService[*types.Collection],
	coreRepo repository.CoreUserMediaItemDataRepository[*types.Collection],
) services.CoreUserMediaItemDataService[*types.Collection] {
	return services.NewCoreUserMediaItemDataService[*types.Collection](coreService, coreRepo)
}

// User Media Item Data Services
func ProvideUserMovieDataService(
	coreService services.CoreUserMediaItemDataService[*types.Movie],
	userRepo repository.UserMediaItemDataRepository[*types.Movie],
) services.UserMediaItemDataService[*types.Movie] {
	return services.NewUserMediaItemDataService[*types.Movie](coreService, userRepo)
}

func ProvideUserSeriesDataService(
	coreService services.CoreUserMediaItemDataService[*types.Series],
	userRepo repository.UserMediaItemDataRepository[*types.Series],
) services.UserMediaItemDataService[*types.Series] {
	return services.NewUserMediaItemDataService[*types.Series](coreService, userRepo)
}

func ProvideUserSeasonDataService(
	coreService services.CoreUserMediaItemDataService[*types.Season],
	userRepo repository.UserMediaItemDataRepository[*types.Season],
) services.UserMediaItemDataService[*types.Season] {
	return services.NewUserMediaItemDataService[*types.Season](coreService, userRepo)
}

func ProvideUserEpisodeDataService(
	coreService services.CoreUserMediaItemDataService[*types.Episode],
	userRepo repository.UserMediaItemDataRepository[*types.Episode],
) services.UserMediaItemDataService[*types.Episode] {
	return services.NewUserMediaItemDataService[*types.Episode](coreService, userRepo)
}

func ProvideUserTrackDataService(
	coreService services.CoreUserMediaItemDataService[*types.Track],
	userRepo repository.UserMediaItemDataRepository[*types.Track],
) services.UserMediaItemDataService[*types.Track] {
	return services.NewUserMediaItemDataService[*types.Track](coreService, userRepo)
}

func ProvideUserAlbumDataService(
	coreService services.CoreUserMediaItemDataService[*types.Album],
	userRepo repository.UserMediaItemDataRepository[*types.Album],
) services.UserMediaItemDataService[*types.Album] {
	return services.NewUserMediaItemDataService[*types.Album](coreService, userRepo)
}

func ProvideUserArtistDataService(
	coreService services.CoreUserMediaItemDataService[*types.Artist],
	userRepo repository.UserMediaItemDataRepository[*types.Artist],
) services.UserMediaItemDataService[*types.Artist] {
	return services.NewUserMediaItemDataService[*types.Artist](coreService, userRepo)
}

func ProvideUserPlaylistDataService(
	coreService services.CoreUserMediaItemDataService[*types.Playlist],
	userRepo repository.UserMediaItemDataRepository[*types.Playlist],
) services.UserMediaItemDataService[*types.Playlist] {
	return services.NewUserMediaItemDataService[*types.Playlist](coreService, userRepo)
}

func ProvideUserCollectionDataService(
	coreService services.CoreUserMediaItemDataService[*types.Collection],
	userRepo repository.UserMediaItemDataRepository[*types.Collection],
) services.UserMediaItemDataService[*types.Collection] {
	return services.NewUserMediaItemDataService[*types.Collection](coreService, userRepo)
}

// ----- Handler Providers -----

// Core Media Item Handlers
func ProvideCoreMovieHandler(
	service services.CoreMediaItemService[*types.Movie],
) handlers.CoreMediaItemHandler[*types.Movie] {
	return handlers.NewCoreMediaItemHandler[*types.Movie](service)
}

func ProvideCoreSeriesHandler(
	service services.CoreMediaItemService[*types.Series],
) handlers.CoreMediaItemHandler[*types.Series] {
	return handlers.NewCoreMediaItemHandler[*types.Series](service)
}

func ProvideCoreSeasonHandler(
	service services.CoreMediaItemService[*types.Season],
) handlers.CoreMediaItemHandler[*types.Season] {
	return handlers.NewCoreMediaItemHandler[*types.Season](service)
}

func ProvideCoreEpisodeHandler(
	service services.CoreMediaItemService[*types.Episode],
) handlers.CoreMediaItemHandler[*types.Episode] {
	return handlers.NewCoreMediaItemHandler[*types.Episode](service)
}

func ProvideCoreTrackHandler(
	service services.CoreMediaItemService[*types.Track],
) handlers.CoreMediaItemHandler[*types.Track] {
	return handlers.NewCoreMediaItemHandler[*types.Track](service)
}

func ProvideCoreAlbumHandler(
	service services.CoreMediaItemService[*types.Album],
) handlers.CoreMediaItemHandler[*types.Album] {
	return handlers.NewCoreMediaItemHandler[*types.Album](service)
}

func ProvideCoreArtistHandler(
	service services.CoreMediaItemService[*types.Artist],
) handlers.CoreMediaItemHandler[*types.Artist] {
	return handlers.NewCoreMediaItemHandler[*types.Artist](service)
}

func ProvideCorePlaylistHandler(
	service services.CoreMediaItemService[*types.Playlist],
) handlers.CoreMediaItemHandler[*types.Playlist] {
	return handlers.NewCoreMediaItemHandler[*types.Playlist](service)
}

func ProvideCoreCollectionHandler(
	service services.CoreMediaItemService[*types.Collection],
) handlers.CoreMediaItemHandler[*types.Collection] {
	return handlers.NewCoreMediaItemHandler[*types.Collection](service)
}

// Core List Handlers
func ProvideCorePlaylistListHandler(
	coreHandler handlers.CoreMediaItemHandler[*types.Playlist],
	listService services.CoreListService[*types.Playlist],
) handlers.CoreListHandler[*types.Playlist] {
	return handlers.NewCoreListHandler[*types.Playlist](coreHandler, listService)
}

func ProvideCoreCollectionListHandler(
	coreHandler handlers.CoreMediaItemHandler[*types.Collection],
	listService services.CoreListService[*types.Collection],
) handlers.CoreListHandler[*types.Collection] {
	return handlers.NewCoreListHandler[*types.Collection](coreHandler, listService)
}

// User Media Item Handlers
func ProvideUserMovieHandler(
	service services.UserMediaItemService[*types.Movie],
) handlers.UserMediaItemHandler[*types.Movie] {
	return handlers.NewUserMediaItemHandler[*types.Movie](service)
}

func ProvideUserSeriesHandler(
	service services.UserMediaItemService[*types.Series],
) handlers.UserMediaItemHandler[*types.Series] {
	return handlers.NewUserMediaItemHandler[*types.Series](service)
}

func ProvideUserSeasonHandler(
	service services.UserMediaItemService[*types.Season],
) handlers.UserMediaItemHandler[*types.Season] {
	return handlers.NewUserMediaItemHandler[*types.Season](service)
}

func ProvideUserEpisodeHandler(
	service services.UserMediaItemService[*types.Episode],
) handlers.UserMediaItemHandler[*types.Episode] {
	return handlers.NewUserMediaItemHandler[*types.Episode](service)
}

func ProvideUserTrackHandler(
	service services.UserMediaItemService[*types.Track],
) handlers.UserMediaItemHandler[*types.Track] {
	return handlers.NewUserMediaItemHandler[*types.Track](service)
}

func ProvideUserAlbumHandler(
	service services.UserMediaItemService[*types.Album],
) handlers.UserMediaItemHandler[*types.Album] {
	return handlers.NewUserMediaItemHandler[*types.Album](service)
}

func ProvideUserArtistHandler(
	service services.UserMediaItemService[*types.Artist],
) handlers.UserMediaItemHandler[*types.Artist] {
	return handlers.NewUserMediaItemHandler[*types.Artist](service)
}

func ProvideUserPlaylistHandler(
	service services.UserMediaItemService[*types.Playlist],
) handlers.UserMediaItemHandler[*types.Playlist] {
	return handlers.NewUserMediaItemHandler[*types.Playlist](service)
}

func ProvideUserCollectionHandler(
	service services.UserMediaItemService[*types.Collection],
) handlers.UserMediaItemHandler[*types.Collection] {
	return handlers.NewUserMediaItemHandler[*types.Collection](service)
}

// User List Handlers
func ProvideUserPlaylistListHandler(
	coreHandler handlers.CoreListHandler[*types.Playlist],
	itemService services.UserMediaItemService[*types.Playlist],
	listService services.UserListService[*types.Playlist],
) handlers.UserListHandler[*types.Playlist] {
	return handlers.NewUserListHandler[*types.Playlist](coreHandler, itemService, listService)
}

func ProvideUserCollectionListHandler(
	coreHandler handlers.CoreListHandler[*types.Collection],
	itemService services.UserMediaItemService[*types.Collection],
	listService services.UserListService[*types.Collection],
) handlers.UserListHandler[*types.Collection] {
	return handlers.NewUserListHandler[*types.Collection](coreHandler, itemService, listService)
}

// Core User Media Item Data Handlers
func ProvideCoreMovieDataHandler(
	service services.CoreUserMediaItemDataService[*types.Movie],
) handlers.CoreUserMediaItemDataHandler[*types.Movie] {
	return handlers.NewCoreUserMediaItemDataHandler[*types.Movie](service)
}

func ProvideCoreSeriesDataHandler(
	service services.CoreUserMediaItemDataService[*types.Series],
) handlers.CoreUserMediaItemDataHandler[*types.Series] {
	return handlers.NewCoreUserMediaItemDataHandler[*types.Series](service)
}

func ProvideCoreEpisodeDataHandler(
	service services.CoreUserMediaItemDataService[*types.Episode],
) handlers.CoreUserMediaItemDataHandler[*types.Episode] {
	return handlers.NewCoreUserMediaItemDataHandler[*types.Episode](service)
}

func ProvideCoreTrackDataHandler(
	service services.CoreUserMediaItemDataService[*types.Track],
) handlers.CoreUserMediaItemDataHandler[*types.Track] {
	return handlers.NewCoreUserMediaItemDataHandler[*types.Track](service)
}

func ProvideCoreSeasonDataHandler(
	service services.CoreUserMediaItemDataService[*types.Season],
) handlers.CoreUserMediaItemDataHandler[*types.Season] {
	return handlers.NewCoreUserMediaItemDataHandler[*types.Season](service)
}

func ProvideCoreAlbumDataHandler(
	service services.CoreUserMediaItemDataService[*types.Album],
) handlers.CoreUserMediaItemDataHandler[*types.Album] {
	return handlers.NewCoreUserMediaItemDataHandler[*types.Album](service)
}

func ProvideCoreArtistDataHandler(
	service services.CoreUserMediaItemDataService[*types.Artist],
) handlers.CoreUserMediaItemDataHandler[*types.Artist] {
	return handlers.NewCoreUserMediaItemDataHandler[*types.Artist](service)
}

func ProvideCorePlaylistDataHandler(
	service services.CoreUserMediaItemDataService[*types.Playlist],
) handlers.CoreUserMediaItemDataHandler[*types.Playlist] {
	return handlers.NewCoreUserMediaItemDataHandler[*types.Playlist](service)
}

func ProvideCoreCollectionDataHandler(
	service services.CoreUserMediaItemDataService[*types.Collection],
) handlers.CoreUserMediaItemDataHandler[*types.Collection] {
	return handlers.NewCoreUserMediaItemDataHandler[*types.Collection](service)
}

// User Media Item Data Handlers
func ProvideUserMovieDataHandler(
	coreHandler handlers.CoreUserMediaItemDataHandler[*types.Movie],
	service services.UserMediaItemDataService[*types.Movie],
) handlers.UserMediaItemDataHandler[*types.Movie] {
	return handlers.NewUserMediaItemDataHandler[*types.Movie](coreHandler, service)
}

func ProvideUserSeriesDataHandler(
	coreHandler handlers.CoreUserMediaItemDataHandler[*types.Series],
	service services.UserMediaItemDataService[*types.Series],
) handlers.UserMediaItemDataHandler[*types.Series] {
	return handlers.NewUserMediaItemDataHandler[*types.Series](coreHandler, service)
}

func ProvideUserSeasonDataHandler(
	coreHandler handlers.CoreUserMediaItemDataHandler[*types.Season],
	service services.UserMediaItemDataService[*types.Season],
) handlers.UserMediaItemDataHandler[*types.Season] {
	return handlers.NewUserMediaItemDataHandler[*types.Season](coreHandler, service)
}

func ProvideUserEpisodeDataHandler(
	coreHandler handlers.CoreUserMediaItemDataHandler[*types.Episode],
	service services.UserMediaItemDataService[*types.Episode],
) handlers.UserMediaItemDataHandler[*types.Episode] {
	return handlers.NewUserMediaItemDataHandler[*types.Episode](coreHandler, service)
}

func ProvideUserTrackDataHandler(
	coreHandler handlers.CoreUserMediaItemDataHandler[*types.Track],
	service services.UserMediaItemDataService[*types.Track],
) handlers.UserMediaItemDataHandler[*types.Track] {
	return handlers.NewUserMediaItemDataHandler[*types.Track](coreHandler, service)
}

func ProvideUserAlbumDataHandler(
	coreHandler handlers.CoreUserMediaItemDataHandler[*types.Album],
	service services.UserMediaItemDataService[*types.Album],
) handlers.UserMediaItemDataHandler[*types.Album] {
	return handlers.NewUserMediaItemDataHandler[*types.Album](coreHandler, service)
}

func ProvideUserArtistDataHandler(
	coreHandler handlers.CoreUserMediaItemDataHandler[*types.Artist],
	service services.UserMediaItemDataService[*types.Artist],
) handlers.UserMediaItemDataHandler[*types.Artist] {
	return handlers.NewUserMediaItemDataHandler[*types.Artist](coreHandler, service)
}

func ProvideUserPlaylistDataHandler(
	coreHandler handlers.CoreUserMediaItemDataHandler[*types.Playlist],
	service services.UserMediaItemDataService[*types.Playlist],
) handlers.UserMediaItemDataHandler[*types.Playlist] {
	return handlers.NewUserMediaItemDataHandler[*types.Playlist](coreHandler, service)
}

func ProvideUserCollectionDataHandler(
	coreHandler handlers.CoreUserMediaItemDataHandler[*types.Collection],
	service services.UserMediaItemDataService[*types.Collection],
) handlers.UserMediaItemDataHandler[*types.Collection] {
	return handlers.NewUserMediaItemDataHandler[*types.Collection](coreHandler, service)
}

// ----- System Repository Providers -----

// ProvideUserRepository provides a new UserRepository
func ProvideUserRepository(db *gorm.DB) repository.UserRepository {
	return repository.NewUserRepository(db)
}

// ProvideSessionRepository provides a new SessionRepository
func ProvideSessionRepository(db *gorm.DB) repository.SessionRepository {
	return repository.NewSessionRepository(db)
}

// ProvideConfigRepository provides a new ConfigRepository
func ProvideConfigRepository(db *gorm.DB) repository.ConfigRepository {
	return repository.NewConfigRepository()
}

// ProvideJobRepository provides a new JobRepository
func ProvideJobRepository(db *gorm.DB) repository.JobRepository {
	return repository.NewJobRepository(db)
}

// ProvideUserConfigRepository provides a new UserConfigRepository
func ProvideUserConfigRepository(db *gorm.DB) repository.UserConfigRepository {
	return repository.NewUserConfigRepository(db)
}

// ----- System Service Providers -----

// ProvideAuthService provides a new AuthService
func ProvideAuthService(
	userRepo repository.UserRepository,
	sessionRepo repository.SessionRepository,
) services.AuthService {
	// In a real implementation, these would come from configuration
	return services.NewAuthService(
		userRepo,
		sessionRepo,
		"your-jwt-secret",    // JWT secret
		24*time.Hour,         // Access token expiry (24 hours)
		7*24*time.Hour,       // Refresh token expiry (7 days)
		"suasor",             // Token issuer
		"suasor-application", // Token audience
	)
}

// ProvideUserService provides a new UserService
func ProvideUserService(
	userRepo repository.UserRepository,
) services.UserService {
	return services.NewUserService(userRepo)
}

// ProvideConfigService provides a new ConfigService
func ProvideConfigService(
	configRepo repository.ConfigRepository,
) services.ConfigService {
	return services.NewConfigService(configRepo)
}

// ProvideHealthService provides a new HealthService
func ProvideHealthService(db *gorm.DB) services.HealthService {
	return services.NewHealthService(db)
}

// ProvideSearchRepository provides a new SearchRepository
func ProvideSearchRepository(db *gorm.DB) repository.SearchRepository {
	return repository.NewSearchRepository(db)
}

// ProvideClientRepositories creates a ClientRepositories instance with all needed client repositories
func ProvideClientRepositories(db *gorm.DB) repobundles.ClientRepositories {
	return repobundles.NewClientRepositories(
		repository.NewClientRepository[*clienttypes.EmbyConfig](db),
		repository.NewClientRepository[*clienttypes.JellyfinConfig](db),
		repository.NewClientRepository[*clienttypes.PlexConfig](db),
		repository.NewClientRepository[*clienttypes.SubsonicConfig](db),
		repository.NewClientRepository[*clienttypes.SonarrConfig](db),
		repository.NewClientRepository[*clienttypes.RadarrConfig](db),
		repository.NewClientRepository[*clienttypes.LidarrConfig](db),
		repository.NewClientRepository[*clienttypes.ClaudeConfig](db),
		repository.NewClientRepository[*clienttypes.OpenAIConfig](db),
		repository.NewClientRepository[*clienttypes.OllamaConfig](db),
	)
}

// ProvideCoreMediaItemRepositories creates a CoreMediaItemRepositories instance
func ProvideCoreMediaItemRepositories(db *gorm.DB) repobundles.CoreMediaItemRepositories {
	return repobundles.NewCoreMediaItemRepositories(
		repository.NewMediaItemRepository[*types.Movie](db),
		repository.NewMediaItemRepository[*types.Series](db),
		repository.NewMediaItemRepository[*types.Season](db),
		repository.NewMediaItemRepository[*types.Episode](db),
		repository.NewMediaItemRepository[*types.Track](db),
		repository.NewMediaItemRepository[*types.Album](db),
		repository.NewMediaItemRepository[*types.Artist](db),
		repository.NewMediaItemRepository[*types.Collection](db),
		repository.NewMediaItemRepository[*types.Playlist](db),
	)
}

// ProvideClientFactoryService provides a ClientFactoryService
func ProvideClientFactoryService() *client.ClientFactoryService {
	return client.GetClientFactoryService()
}

// ProvideSearchService provides a SearchService with all required dependencies
func ProvideSearchService(
	searchRepo repository.SearchRepository,
	personRepo repository.PersonRepository,
	clientRepos repobundles.ClientRepositories,
	itemRepos repobundles.CoreMediaItemRepositories,
	clientFactoryService *client.ClientFactoryService,
) services.SearchService {
	// Create a proper SearchService implementation
	return services.NewSearchService(
		searchRepo,
		clientRepos,
		itemRepos,
		personRepo,
		clientFactoryService,
	)
}

// ProvidePersonRepository provides a new PersonRepository
func ProvidePersonRepository(db *gorm.DB) repository.PersonRepository {
	return repository.NewPersonRepository(db)
}

// ProvideCreditRepository provides a new CreditRepository
func ProvideCreditRepository(db *gorm.DB) repository.CreditRepository {
	return repository.NewCreditRepository(db)
}

// ProvidePersonService provides a new PersonService
func ProvidePersonService(
	personRepo repository.PersonRepository,
	creditRepo repository.CreditRepository,
) *services.PersonService {
	return services.NewPersonService(personRepo, creditRepo)
}

// ProvideRecommendationJob provides a RecommendationJob instance
func ProvideRecommendationJob() *recommendation.RecommendationJob {
	// This is a simplified version for demonstration purposes
	return &recommendation.RecommendationJob{}
}

// ProvideMediaSyncJob provides a MediaSyncJob instance
func ProvideMediaSyncJob() *jobs.MediaSyncJob {
	// This is a simplified version for demonstration purposes
	return &jobs.MediaSyncJob{}
}

// ProvideWatchHistorySyncJob provides a WatchHistorySyncJob instance
func ProvideWatchHistorySyncJob() *jobs.WatchHistorySyncJob {
	// This is a simplified version for demonstration purposes
	return &jobs.WatchHistorySyncJob{}
}

// ProvideFavoritesSyncJob provides a FavoritesSyncJob instance
func ProvideFavoritesSyncJob() *jobs.FavoritesSyncJob {
	// This is a simplified version for demonstration purposes
	return &jobs.FavoritesSyncJob{}
}

// ProvideJobService provides a JobService
func ProvideJobService(
	jobRepo repository.JobRepository,
	userRepo repository.UserRepository,
	userConfigRepo repository.UserConfigRepository,
	movieRepo repository.MediaItemRepository[*types.Movie],
	seriesRepo repository.MediaItemRepository[*types.Series],
	trackRepo repository.MediaItemRepository[*types.Track],
	userMovieDataRepo repository.UserMediaItemDataRepository[*types.Movie],
	userSeriesDataRepo repository.UserMediaItemDataRepository[*types.Series],
	userTrackDataRepo repository.UserMediaItemDataRepository[*types.Track],
	recommendationJob *recommendation.RecommendationJob,
	mediaSyncJob *jobs.MediaSyncJob,
	watchHistorySyncJob *jobs.WatchHistorySyncJob,
	favoritesSyncJob *jobs.FavoritesSyncJob,
) services.JobService {
	return services.NewJobService(
		jobRepo,             // jobRepo
		userRepo,            // userRepo
		userConfigRepo,      // configRepo
		movieRepo,           // movieRepo
		seriesRepo,          // seriesRepo
		trackRepo,           // musicRepo
		userMovieDataRepo,   // userMovieDataRepo
		userSeriesDataRepo,  // userSeriesDataRepo
		userTrackDataRepo,   // userMusicDataRepo
		recommendationJob,   // recommendationJob
		mediaSyncJob,        // mediaSyncJob
		watchHistorySyncJob, // watchHistorySyncJob
		favoritesSyncJob,    // favoritesSyncJob
	)
}

// ProvideUserConfigService provides a simplified UserConfigService
func ProvideUserConfigService(
	repo repository.UserConfigRepository,
	jobService services.JobService,
	recommendationJob *recommendation.RecommendationJob,
) services.UserConfigService {
	return services.NewUserConfigService(
		repo,       // userConfigRepo
		jobService, // jobService
		recommendationJob,
	)
}

// ----- System Handler Providers -----

func ProvideAuthHandler(service services.AuthService) *handlers.AuthHandler {
	return handlers.NewAuthHandler(service)
}

func ProvideUserHandler(
	service services.UserService,
	configService services.ConfigService,
) *handlers.UserHandler {
	return handlers.NewUserHandler(service, configService)
}

// ProvideConfigHandler provides a new ConfigHandler
func ProvideConfigHandler(service services.ConfigService) *handlers.ConfigHandler {
	return handlers.NewConfigHandler(service)
}

// ProvideJobHandler provides a new JobHandler
func ProvideJobHandler(service services.JobService) *handlers.JobHandler {
	return handlers.NewJobHandler(service)
}

// ProvideHealthHandler provides a new HealthHandler
func ProvideHealthHandler(service services.HealthService) *handlers.HealthHandler {
	return handlers.NewHealthHandler(service)
}

// ProvideSearchHandler provides a new SearchHandler
func ProvideSearchHandler(service services.SearchService) *handlers.SearchHandler {
	return handlers.NewSearchHandler(service)
}

// ProvidePeopleHandler provides a new PeopleHandler
func ProvidePeopleHandler(service *services.PersonService) *handlers.PeopleHandler {
	return handlers.NewPeopleHandler(service)
}

// ProvideUserConfigHandler provides a new UserConfigHandler
func ProvideUserConfigHandler(service services.UserConfigService) *handlers.UserConfigHandler {
	return handlers.NewUserConfigHandler(service)
}

// ----- Specialized Handler Providers -----

// ProvideRecommendationService provides a RecommendationService
func ProvideRecommendationService(jobRepo repository.JobRepository) services.RecommendationService {
	// Simplified placeholder implementation
	return &recommendationServiceImpl{}
}

// Simple implementation of RecommendationService
type recommendationServiceImpl struct{}

// ProvideRecommendationHandler provides a RecommendationHandler
func ProvideRecommendationHandler(service services.RecommendationService) *handlers.RecommendationHandler {
	return handlers.NewRecommendationHandler(service)
}

// ProvideCreditService provides a CreditService
func ProvideCreditService(db *gorm.DB) *services.CreditService {
	// Simplified placeholder implementation
	return &services.CreditService{}
}

// ProvideCreditHandler provides a CreditHandler
func ProvideCreditHandler(service *services.CreditService) *handlers.CreditHandler {
	return handlers.NewCreditHandler(service)
}

// ProvideCalendarHandler provides a CalendarHandler
func ProvideCalendarHandler() *handlers.CalendarHandler {
	// Simplified placeholder implementation
	return &handlers.CalendarHandler{}
}

// ----- Client Handler Providers -----

// ProvideClientsHandler provides a ClientsHandler
func ProvideClientsHandler(
	embyService services.ClientService[*clienttypes.EmbyConfig],
	jellyfinService services.ClientService[*clienttypes.JellyfinConfig],
	plexService services.ClientService[*clienttypes.PlexConfig],
	subsonicService services.ClientService[*clienttypes.SubsonicConfig],
	sonarrService services.ClientService[*clienttypes.SonarrConfig],
	radarrService services.ClientService[*clienttypes.RadarrConfig],
	lidarrService services.ClientService[*clienttypes.LidarrConfig],
	claudeService services.ClientService[*clienttypes.ClaudeConfig],
	openaiService services.ClientService[*clienttypes.OpenAIConfig],
	ollamaService services.ClientService[*clienttypes.OllamaConfig],
) *handlers.ClientsHandler {
	return &handlers.ClientsHandler{
		embyService:     embyService,
		jellyfinService: jellyfinService,
		plexService:     plexService,
		subsonicService: subsonicService,
		sonarrService:   sonarrService,
		radarrService:   radarrService,
		lidarrService:   lidarrService,
		claudeService:   claudeService,
		openaiService:   openaiService,
		ollamaService:   ollamaService,
	}
}

// ProvideClientService provides a ClientService
func ProvideEmbyClientService(repo repository.ClientRepository[*clienttypes.EmbyConfig]) services.ClientService[*clienttypes.EmbyConfig] {
	return services.NewClientService[*clienttypes.EmbyConfig](repo)
}

func ProvideJellyfinClientService(repo repository.ClientRepository[*clienttypes.JellyfinConfig]) services.ClientService[*clienttypes.JellyfinConfig] {
	return services.NewClientService[*clienttypes.JellyfinConfig](repo)
}

func ProvidePlexClientService(repo repository.ClientRepository[*clienttypes.PlexConfig]) services.ClientService[*clienttypes.PlexConfig] {
	return services.NewClientService[*clienttypes.PlexConfig](repo)
}

func ProvideSubsonicClientService(repo repository.ClientRepository[*clienttypes.SubsonicConfig]) services.ClientService[*clienttypes.SubsonicConfig] {
	return services.NewClientService[*clienttypes.SubsonicConfig](repo)
}

func ProvideSonarrClientService(repo repository.ClientRepository[*clienttypes.SonarrConfig]) services.ClientService[*clienttypes.SonarrConfig] {
	return services.NewClientService[*clienttypes.SonarrConfig](repo)
}

func ProvideRadarrClientService(repo repository.ClientRepository[*clienttypes.RadarrConfig]) services.ClientService[*clienttypes.RadarrConfig] {
	return services.NewClientService[*clienttypes.RadarrConfig](repo)
}

func ProvideLidarrClientService(repo repository.ClientRepository[*clienttypes.LidarrConfig]) services.ClientService[*clienttypes.LidarrConfig] {
	return services.NewClientService[*clienttypes.LidarrConfig](repo)
}

func ProvideClaudeClientService(repo repository.ClientRepository[*clienttypes.ClaudeConfig]) services.ClientService[*clienttypes.ClaudeConfig] {
	return services.NewClientService[*clienttypes.ClaudeConfig](repo)
}

func ProvideOpenAIClientService(repo repository.ClientRepository[*clienttypes.OpenAIConfig]) services.ClientService[*clienttypes.OpenAIConfig] {
	return services.NewClientService[*clienttypes.OpenAIConfig](repo)
}

func ProvideOllamaClientService(repo repository.ClientRepository[*clienttypes.OllamaConfig]) services.ClientService[*clienttypes.OllamaConfig] {
	return services.NewClientService[*clienttypes.OllamaConfig](repo)
}

// ProvideClientHandler provides a ClientHandler
func ProvideEmbyClientHandler(service services.ClientService[*clienttypes.EmbyConfig]) *handlers.ClientHandler[*clienttypes.EmbyConfig] {
	return handlers.NewClientHandler[*clienttypes.EmbyConfig](service)
}

func ProvideJellyfinClientHandler(service services.ClientService[*clienttypes.JellyfinConfig]) *handlers.ClientHandler[*clienttypes.JellyfinConfig] {
	return handlers.NewClientHandler[*clienttypes.JellyfinConfig](service)
}

func ProvidePlexClientHandler(service services.ClientService[*clienttypes.PlexConfig]) *handlers.ClientHandler[*clienttypes.PlexConfig] {
	return handlers.NewClientHandler[*clienttypes.PlexConfig](service)
}

func ProvideSubsonicClientHandler(service services.ClientService[*clienttypes.SubsonicConfig]) *handlers.ClientHandler[*clienttypes.SubsonicConfig] {
	return handlers.NewClientHandler[*clienttypes.SubsonicConfig](service)
}

func ProvideSonarrClientHandler(service services.ClientService[*clienttypes.SonarrConfig]) *handlers.ClientHandler[*clienttypes.SonarrConfig] {
	return handlers.NewClientHandler[*clienttypes.SonarrConfig](service)
}

func ProvideRadarrClientHandler(service services.ClientService[*clienttypes.RadarrConfig]) *handlers.ClientHandler[*clienttypes.RadarrConfig] {
	return handlers.NewClientHandler[*clienttypes.RadarrConfig](service)
}

func ProvideLidarrClientHandler(service services.ClientService[*clienttypes.LidarrConfig]) *handlers.ClientHandler[*clienttypes.LidarrConfig] {
	return handlers.NewClientHandler[*clienttypes.LidarrConfig](service)
}

func ProvideClaudeClientHandler(service services.ClientService[*clienttypes.ClaudeConfig]) *handlers.ClientHandler[*clienttypes.ClaudeConfig] {
	return handlers.NewClientHandler[*clienttypes.ClaudeConfig](service)
}

func ProvideOpenAIClientHandler(service services.ClientService[*clienttypes.OpenAIConfig]) *handlers.ClientHandler[*clienttypes.OpenAIConfig] {
	return handlers.NewClientHandler[*clienttypes.OpenAIConfig](service)
}

func ProvideOllamaClientHandler(service services.ClientService[*clienttypes.OllamaConfig]) *handlers.ClientHandler[*clienttypes.OllamaConfig] {
	return handlers.NewClientHandler[*clienttypes.OllamaConfig](service)
}

// ProvideAIHandler provides an AIHandler
func ProvideAIHandler(factory *client.ClientFactoryService) *handlers.AIHandler {
	// Note: This is a simplified implementation as the actual AIHandler is generic
	return &handlers.AIHandler{}
}

// ProvideMetadataClientHandler provides a MetadataClientHandler
func ProvideMetadataClientHandler() *handlers.MetadataClientHandler {
	// Note: This is a simplified implementation as the actual MetadataClientHandler is generic
	return &handlers.MetadataClientHandler{}
}

// ----- Client Media Item Handler Providers -----

// ProvideEmbyMovieHandler provides an EmbyMovieHandler
func ProvideEmbyMovieHandler(
	factory *client.ClientFactoryService,
	clientService services.ClientService[*clienttypes.EmbyConfig],
) *handlers.ClientMediaItemHandler[*clienttypes.EmbyConfig, *types.Movie] {
	return handlers.NewClientMediaItemHandler[*clienttypes.EmbyConfig, *types.Movie](factory, clientService)
}

// ProvideEmbySeriesHandler provides an EmbySeriesHandler
func ProvideEmbySeriesHandler(
	factory *client.ClientFactoryService,
	clientService services.ClientService[*clienttypes.EmbyConfig],
) *handlers.ClientMediaItemHandler[*clienttypes.EmbyConfig, *types.Series] {
	return handlers.NewClientMediaItemHandler[*clienttypes.EmbyConfig, *types.Series](factory, clientService)
}

// ProvideJellyfinMovieHandler provides a JellyfinMovieHandler
func ProvideJellyfinMovieHandler(
	factory *client.ClientFactoryService,
	clientService services.ClientService[*clienttypes.JellyfinConfig],
) *handlers.ClientMediaItemHandler[*clienttypes.JellyfinConfig, *types.Movie] {
	return handlers.NewClientMediaItemHandler[*clienttypes.JellyfinConfig, *types.Movie](factory, clientService)
}

// ProvideJellyfinSeriesHandler provides a JellyfinSeriesHandler
func ProvideJellyfinSeriesHandler(
	factory *client.ClientFactoryService,
	clientService services.ClientService[*clienttypes.JellyfinConfig],
) *handlers.ClientMediaItemHandler[*clienttypes.JellyfinConfig, *types.Series] {
	return handlers.NewClientMediaItemHandler[*clienttypes.JellyfinConfig, *types.Series](factory, clientService)
}

// ProvidePlexMovieHandler provides a PlexMovieHandler
func ProvidePlexMovieHandler(
	factory *client.ClientFactoryService,
	clientService services.ClientService[*clienttypes.PlexConfig],
) *handlers.ClientMediaItemHandler[*clienttypes.PlexConfig, *types.Movie] {
	return handlers.NewClientMediaItemHandler[*clienttypes.PlexConfig, *types.Movie](factory, clientService)
}

// ProvidePlexSeriesHandler provides a PlexSeriesHandler
func ProvidePlexSeriesHandler(
	factory *client.ClientFactoryService,
	clientService services.ClientService[*clienttypes.PlexConfig],
) *handlers.ClientMediaItemHandler[*clienttypes.PlexConfig, *types.Series] {
	return handlers.NewClientMediaItemHandler[*clienttypes.PlexConfig, *types.Series](factory, clientService)
}

// InitializeAllHandlers initializes all handlers for the application
func InitializeAllHandlers(ctx context.Context) (ApplicationHandlers, error) {
	wire.Build(
		ProvideDB,

		// System Repositories
		ProvideUserRepository,
		ProvideSessionRepository,
		ProvideConfigRepository,
		ProvideJobRepository,
		ProvideUserConfigRepository,
		ProvideSearchRepository,
		ProvidePersonRepository,
		ProvideCreditRepository,
		ProvideClientRepositories,
		ProvideCoreMediaItemRepositories,
		ProvideClientFactoryService,

		// System Services
		ProvideAuthService,
		ProvideUserService,
		ProvideConfigService,
		ProvideHealthService,
		// The following services are provided with simplified dependencies for demonstration
		ProvidePersonService,

		ProvideRecommendationJob,
		ProvideMediaSyncJob,
		ProvideWatchHistorySyncJob,
		ProvideFavoritesSyncJob,
		ProvideSearchService,
		ProvideJobService,
		ProvideUserConfigService,

		// System Handlers
		ProvideAuthHandler,
		ProvideUserHandler,
		ProvideConfigHandler,
		ProvideJobHandler,
		ProvideHealthHandler,
		ProvideSearchHandler,
		ProvidePeopleHandler,
		ProvideUserConfigHandler,

			// Specialized Handlers
			ProvideRecommendationService,
			ProvideRecommendationHandler,
			ProvideCreditService,
			ProvideCreditHandler,
			ProvideCalendarHandler,
			
			// Client Handlers
			ProvideEmbyClientService,
			ProvideJellyfinClientService,
			ProvidePlexClientService,
			ProvideSubsonicClientService, 
			ProvideSonarrClientService,
			ProvideRadarrClientService,
			ProvideLidarrClientService,
			ProvideClaudeClientService,
			ProvideOpenAIClientService,
			ProvideOllamaClientService,
			ProvideEmbyClientHandler,
			ProvideJellyfinClientHandler,
			ProvidePlexClientHandler,
			ProvideSubsonicClientHandler,
			ProvideSonarrClientHandler,
			ProvideRadarrClientHandler,
			ProvideLidarrClientHandler,
			ProvideClaudeClientHandler,
			ProvideOpenAIClientHandler,
			ProvideOllamaClientHandler,
			ProvideClientsHandler,
			ProvideAIHandler,
			ProvideMetadataClientHandler,
			
			// Client Media Handlers
			ProvideEmbyMovieHandler,
			ProvideEmbySeriesHandler,
			ProvideJellyfinMovieHandler,
			ProvideJellyfinSeriesHandler,
			ProvidePlexMovieHandler,
			ProvidePlexSeriesHandler,

		// Media Item Handlers
		ProvideMovieRepository,
		ProvideCoreMovieService,
		ProvideUserMovieRepository,
		ProvideUserMovieService,
		ProvideUserMovieHandler,

		ProvideSeriesRepository,
		ProvideCoreSeriesService,
		ProvideUserSeriesRepository,
		ProvideUserSeriesService,
		ProvideUserSeriesHandler,

		ProvideSeasonRepository,
		ProvideCoreSeasonService,
		ProvideUserSeasonRepository,
		ProvideUserSeasonService,
		ProvideUserSeasonHandler,

		ProvideEpisodeRepository,
		ProvideCoreEpisodeService,
		ProvideUserEpisodeRepository,
		ProvideUserEpisodeService,
		ProvideUserEpisodeHandler,

		ProvideTrackRepository,
		ProvideCoreTrackService,
		ProvideUserTrackRepository,
		ProvideUserTrackService,
		ProvideUserTrackHandler,

		ProvideAlbumRepository,
		ProvideCoreAlbumService,
		ProvideUserAlbumRepository,
		ProvideUserAlbumService,
		ProvideUserAlbumHandler,

		ProvideArtistRepository,
		ProvideCoreArtistService,
		ProvideUserArtistRepository,
		ProvideUserArtistService,
		ProvideUserArtistHandler,

		// List Handlers
		ProvidePlaylistRepository,
		ProvideCorePlaylistService,
		ProvideCorePlaylistHandler,
		ProvideCorePlaylistListService,
		ProvideCorePlaylistListHandler,
		ProvideUserPlaylistRepository,
		ProvideUserPlaylistService,
		ProvideUserPlaylistDataRepository,
		ProvideCorePlaylistDataRepository,
		ProvideUserPlaylistListService,
		ProvideUserPlaylistListHandler,

		ProvideCollectionRepository,
		ProvideCoreCollectionService,
		ProvideCoreCollectionHandler,
		ProvideCoreCollectionListService,
		ProvideCoreCollectionListHandler,
		ProvideUserCollectionRepository,
		ProvideUserCollectionService,
		ProvideUserCollectionDataRepository,
		ProvideCoreCollectionDataRepository,
		ProvideUserCollectionListService,
		ProvideUserCollectionListHandler,

		// Media Item Data Handlers
		ProvideCoreMovieDataRepository,
		ProvideCoreMovieDataService,
		ProvideCoreMovieDataHandler,
		ProvideUserMovieDataRepository,
		ProvideUserMovieDataService,
		ProvideUserMovieDataHandler,

		ProvideCoreSeriesDataRepository,
		ProvideCoreSeriesDataService,
		ProvideCoreSeriesDataHandler,

		ProvideCoreSeasonDataRepository,
		ProvideCoreSeasonDataService,
		ProvideCoreSeasonDataHandler,
		ProvideUserSeasonDataRepository,
		ProvideUserSeasonDataService,
		ProvideUserSeasonDataHandler,
		ProvideUserSeriesDataRepository,
		ProvideUserSeriesDataService,
		ProvideUserSeriesDataHandler,

		ProvideCoreEpisodeDataRepository,
		ProvideCoreEpisodeDataService,
		ProvideCoreEpisodeDataHandler,
		ProvideUserEpisodeDataRepository,
		ProvideUserEpisodeDataService,
		ProvideUserEpisodeDataHandler,

		ProvideCoreTrackDataRepository,
		ProvideCoreTrackDataService,
		ProvideCoreTrackDataHandler,
		ProvideUserTrackDataRepository,
		ProvideUserTrackDataService,
		ProvideUserTrackDataHandler,

		ProvideCoreAlbumDataRepository,
		ProvideCoreAlbumDataService,
		ProvideCoreAlbumDataHandler,
		ProvideUserAlbumDataRepository,
		ProvideUserAlbumDataService,
		ProvideUserAlbumDataHandler,

		ProvideCoreArtistDataRepository,
		ProvideCoreArtistDataService,
		ProvideCoreArtistDataHandler,
		ProvideUserArtistDataRepository,
		ProvideUserArtistDataService,
		ProvideUserArtistDataHandler,

		ProvideCorePlaylistDataService,
		ProvideCorePlaylistDataHandler,
		ProvideUserPlaylistDataService,
		ProvideUserPlaylistDataHandler,

		ProvideCoreCollectionDataService,
		ProvideCoreCollectionDataHandler,
		ProvideUserCollectionDataService,
		ProvideUserCollectionDataHandler,

		// Build the complete ApplicationHandlers struct
		wire.Struct(new(ApplicationHandlers), "*"),
	)

	return ApplicationHandlers{}, nil
}
