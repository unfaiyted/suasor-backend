// Code generated by Wire. DO NOT EDIT.

//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"gorm.io/gorm"
	"suasor/client"
	"suasor/client/media/types"
	clienttypes "suasor/client/types"
	"suasor/database"
	"suasor/handlers"
	"suasor/repository"
	"suasor/services"
	"suasor/types"
	"time"
)

// Injectors from wire.go:

func InitializeAuthHandler(ctx context.Context) (*handlers.AuthHandler, error) {
	db, err := ProvideDB()
	if err != nil {
		return nil, err
	}
	userRepository := ProvideUserRepository(db)
	sessionRepository := ProvideSessionRepository(db)
	authService := ProvideAuthService(userRepository, sessionRepository)
	authHandler := ProvideAuthHandler(authService)
	return authHandler, nil
}

func InitializeConfigHandler(ctx context.Context) (*handlers.ConfigHandler, error) {
	db, err := ProvideDB()
	if err != nil {
		return nil, err
	}
	configRepository := ProvideConfigRepository(db)
	configService := ProvideConfigService(configRepository)
	configHandler := ProvideConfigHandler(configService)
	return configHandler, nil
}

func InitializeHealthHandler(ctx context.Context) (*handlers.HealthHandler, error) {
	db, err := ProvideDB()
	if err != nil {
		return nil, err
	}
	healthService := ProvideHealthService(db)
	healthHandler := ProvideHealthHandler(healthService)
	return healthHandler, nil
}

func InitializeUserHandler(ctx context.Context) (*handlers.UserHandler, error) {
	db, err := ProvideDB()
	if err != nil {
		return nil, err
	}
	userRepository := ProvideUserRepository(db)
	userService := ProvideUserService(userRepository)
	configRepository := ProvideConfigRepository(db)
	configService := ProvideConfigService(configRepository)
	userHandler := ProvideUserHandler(userService, configService)
	return userHandler, nil
}

// InitializeAllHandlers in wire.go has been manually implemented because Wire v0.6.0 
// doesn't fully support multi-parameter generics. See the implementation in wire.go.

// SystemHandlers contains core system handlers
type SystemHandlers struct {
	AuthHandler      *handlers.AuthHandler
	UserHandler      *handlers.UserHandler
	ConfigHandler    *handlers.ConfigHandler
	JobHandler       *handlers.JobHandler
	HealthHandler    *handlers.HealthHandler
	SearchHandler    *handlers.SearchHandler
	UserConfigHandler *handlers.UserConfigHandler
}

// MediaHandlers contains media-related handlers
type MediaHandlers struct {
	// Core Handlers
	MovieHandler   handlers.UserMediaItemHandler[*types.Movie]
	SeriesHandler  handlers.UserMediaItemHandler[*types.Series]
	SeasonHandler  handlers.UserMediaItemHandler[*types.Season]
	EpisodeHandler handlers.UserMediaItemHandler[*types.Episode]
	TrackHandler   handlers.UserMediaItemHandler[*types.Track]
	AlbumHandler   handlers.UserMediaItemHandler[*types.Album]
	ArtistHandler  handlers.UserMediaItemHandler[*types.Artist]

	// List Handlers
	PlaylistHandler   handlers.UserListHandler[*types.Playlist]
	CollectionHandler handlers.UserListHandler[*types.Collection]

	// Special Media Handlers
	PeopleHandler *handlers.PeopleHandler
	CreditHandler *handlers.CreditHandler
}

// MediaDataHandlers contains handlers for media item data
type MediaDataHandlers struct {
	MovieDataHandler      handlers.UserMediaItemDataHandler[*types.Movie]
	SeriesDataHandler     handlers.UserMediaItemDataHandler[*types.Series]
	SeasonDataHandler     handlers.UserMediaItemDataHandler[*types.Season]
	EpisodeDataHandler    handlers.UserMediaItemDataHandler[*types.Episode]
	TrackDataHandler      handlers.UserMediaItemDataHandler[*types.Track]
	AlbumDataHandler      handlers.UserMediaItemDataHandler[*types.Album]
	ArtistDataHandler     handlers.UserMediaItemDataHandler[*types.Artist]
	PlaylistDataHandler   handlers.UserMediaItemDataHandler[*types.Playlist]
	CollectionDataHandler handlers.UserMediaItemDataHandler[*types.Collection]
}

// ClientHandlers contains client-related handlers
type ClientHandlers struct {
	// Master Handler
	ClientsHandler *handlers.ClientsHandler

	// Media Clients
	EmbyHandler     *handlers.ClientHandler[*clienttypes.EmbyConfig]
	JellyfinHandler *handlers.ClientHandler[*clienttypes.JellyfinConfig]
	PlexHandler     *handlers.ClientHandler[*clienttypes.PlexConfig]
	SubsonicHandler *handlers.ClientHandler[*clienttypes.SubsonicConfig]

	// Automation Clients
	RadarrHandler *handlers.ClientHandler[*clienttypes.RadarrConfig]
	SonarrHandler *handlers.ClientHandler[*clienttypes.SonarrConfig]
	LidarrHandler *handlers.ClientHandler[*clienttypes.LidarrConfig]

	// AI Clients
	AIHandler     *handlers.AIHandler[*clienttypes.ClaudeConfig]
	ClaudeHandler *handlers.ClientHandler[*clienttypes.ClaudeConfig]
	OpenAIHandler *handlers.ClientHandler[*clienttypes.OpenAIConfig]
	OllamaHandler *handlers.ClientHandler[*clienttypes.OllamaConfig]

	// Metadata
	MetadataHandler *handlers.MetadataClientHandler[*clienttypes.TMDBConfig]
}

// SpecializedHandlers contains specialized handlers
type SpecializedHandlers struct {
	RecommendationHandler *handlers.RecommendationHandler
	CalendarHandler       *handlers.CalendarHandler
}

// ApplicationHandlers contains all handlers organized by category
type ApplicationHandlers struct {
	System      SystemHandlers
	Media       MediaHandlers
	MediaData   MediaDataHandlers
	Clients     ClientHandlers
	Specialized SpecializedHandlers
}

// ProvideDB provides the database connection
func ProvideDB() (*gorm.DB, error) {
	// In a real implementation, this would load proper configuration from environment or config file
	// This is a simplified version for demonstration purposes
	dbConfig := types.DatabaseConfig{
		Host:     "localhost",
		Port:     "5432",
		User:     "postgres",
		Password: "postgres",
		Name:     "suasor",
	}

	// Initialize database connection
	return database.Initialize(context.Background(), dbConfig)
}

// ProvideUserRepository provides a new UserRepository
func ProvideUserRepository(db *gorm.DB) repository.UserRepository {
	return repository.NewUserRepository(db)
}

// ProvideSessionRepository provides a new SessionRepository
func ProvideSessionRepository(db *gorm.DB) repository.SessionRepository {
	return repository.NewSessionRepository(db)
}

// ProvideConfigRepository provides a new ConfigRepository
func ProvideConfigRepository(db *gorm.DB) repository.ConfigRepository {
	return repository.NewConfigRepository()
}

// ProvideAuthService provides a new AuthService
func ProvideAuthService(
	userRepo repository.UserRepository,
	sessionRepo repository.SessionRepository,
) services.AuthService {
	// In a real implementation, these would come from configuration
	return services.NewAuthService(
		userRepo,
		sessionRepo,
		"your-jwt-secret",    // JWT secret
		24*time.Hour,         // Access token expiry (24 hours)
		7*24*time.Hour,       // Refresh token expiry (7 days)
		"suasor",             // Token issuer
		"suasor-application", // Token audience
	)
}

// ProvideUserService provides a new UserService
func ProvideUserService(
	userRepo repository.UserRepository,
) services.UserService {
	return services.NewUserService(userRepo)
}

// ProvideConfigService provides a new ConfigService
func ProvideConfigService(
	configRepo repository.ConfigRepository,
) services.ConfigService {
	return services.NewConfigService(configRepo)
}

// ProvideHealthService provides a new HealthService
func ProvideHealthService(db *gorm.DB) services.HealthService {
	return services.NewHealthService(db)
}

// ProvideUserHandler provides a UserHandler
func ProvideUserHandler(
	service services.UserService,
	configService services.ConfigService,
) *handlers.UserHandler {
	return handlers.NewUserHandler(service, configService)
}

// ProvideConfigHandler provides a new ConfigHandler
func ProvideConfigHandler(service services.ConfigService) *handlers.ConfigHandler {
	return handlers.NewConfigHandler(service)
}

// ProvideAuthHandler provides an AuthHandler
func ProvideAuthHandler(service services.AuthService) *handlers.AuthHandler {
	return handlers.NewAuthHandler(service)
}

// ProvideHealthHandler provides a new HealthHandler
func ProvideHealthHandler(service services.HealthService) *handlers.HealthHandler {
	return handlers.NewHealthHandler(service)
}