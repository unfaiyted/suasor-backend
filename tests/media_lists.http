### Media Lists Tests
# This file contains HTTP tests for media list operations
# These tests focus on creating and managing media lists (collections, playlists, etc.)

### Login to get access token
# @name login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{TEST_ADMIN_USER}}",
  "password": "{{TEST_ADMIN_PASSWORD}}"
}

### Create a test movie for list operations
# @name createTestMovie
POST {{baseUrl}}/media/movie
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "type": "movie",
  "title": "List Test Movie",
  "data": {
    "details": {
      "title": "List Test Movie",
      "originalTitle": "List Test Movie Original",
      "overview": "This is a test movie for list operations",
      "releaseDate": "2023-01-01T00:00:00Z",
      "runtime": 120,
      "genres": ["Action", "Drama"]
    },
    "credits": [
      {"name": "Test Director", "role": "Director", "isCrew": true},
      {"name": "Test Writer", "role": "Writer", "isCrew": true},
      {"name": "Actor 1", "character": "Character 1", "isCast": true},
      {"name": "Actor 2", "character": "Character 2", "isCast": true}
    ],
    "trailerURL": "https://example.com/trailer.mp4",
    "resolution": "1080p",
    "videoCodec": "H.264",
    "audioCodec": "AAC"
  },
  "externalIds": []
}

### Create a second test movie
# @name createSecondTestMovie
POST {{baseUrl}}/media/movie
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "type": "movie",
  "title": "List Test Movie 2",
  "data": {
    "details": {
      "title": "List Test Movie 2",
      "originalTitle": "List Test Movie 2 Original",
      "overview": "This is a second test movie for list operations",
      "releaseDate": "2023-02-01T00:00:00Z",
      "runtime": 110,
      "genres": ["Comedy", "Romance"]
    },
    "credits": [
      {"name": "Test Director 2", "role": "Director", "isCrew": true},
      {"name": "Test Writer 2", "role": "Writer", "isCrew": true},
      {"name": "Actor 3", "character": "Character 3", "isCast": true},
      {"name": "Actor 4", "character": "Character 4", "isCast": true}
    ],
    "trailerURL": "https://example.com/trailer2.mp4",
    "resolution": "1080p",
    "videoCodec": "H.264",
    "audioCodec": "AAC"
  },
  "externalIds": []
}

### Create a movie collection/list
# @name createMovieList
POST {{baseUrl}}/playlist
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "type": "collection",
  "title": "Test Movie Collection",
  "data": {
    "details": {
      "title": "Test Movie Collection",
      "overview": "A collection of test movies"
    },
    "items": [],
    "itemCount": 0,
    "isPublic": true,
    "ownerID": {{login.response.body.$.data.user.id}},
    "lastModified": "{{$timestamp}}"
  }
}

### Add movie to list
# @name addMovieToList
POST {{baseUrl}}/lists/{{createMovieList.response.body.$.data.id}}/items/{{createTestMovie.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### Add second movie to list
# @name addSecondMovieToList
POST {{baseUrl}}/lists/{{createMovieList.response.body.$.data.id}}/items/{{createSecondTestMovie.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### Get list items
# @name getListItems
GET {{baseUrl}}/lists/{{createMovieList.response.body.$.data.id}}/items
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### Get all lists
# @name getAllLists
GET {{baseUrl}}/lists
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### Get list by ID
# @name getListById
GET {{baseUrl}}/lists/{{createMovieList.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### Update list
# @name updateList
PUT {{baseUrl}}/lists/{{createMovieList.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "type": "collection",
  "title": "Updated Test Movie Collection",
  "data": {
    "details": {
      "title": "Updated Test Movie Collection",
      "overview": "An updated collection of test movies"
    },
    "isPublic": true,
    "lastModified": "{{$timestamp}}"
  }
}

### Get lists by user
# @name getUserLists
GET {{baseUrl}}/user/{{TEST_USER_ID}}/lists
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### Get lists by type
# @name getListsByType
GET {{baseUrl}}/lists?type=collection
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### Create a music playlist
# @name createMusicPlaylist
POST {{baseUrl}}/playlists
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "type": "playlist",
  "title": "Test Music Playlist",
  "data": {
    "details": {
      "title": "Test Music Playlist",
      "overview": "A playlist of test music tracks"
    },
    "items": [],
    "itemCount": 0,
    "isPublic": true,
    "owner": {{TEST_USER_ID}},
    "lastModified": "{{$timestamp}}"
  }
}

### Remove item from list
# @name removeItemFromList
DELETE {{baseUrl}}/lists/{{createMovieList.response.body.$.data.id}}/items/{{createSecondTestMovie.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### Delete list
# @name deleteList
DELETE {{baseUrl}}/lists/{{createMovieList.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### Cleanup test movies
# @name cleanupTestMovies
DELETE {{baseUrl}}/media/movie/{{createTestMovie.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

DELETE {{baseUrl}}/media/movie/{{createSecondTestMovie.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}
