### List Sync Test
# This file contains HTTP tests for syncing lists (playlists and collections) between local and remote clients

### login
# @name login
POST http://localhost:8080/api/v1/auth/login
Content-Type: application/json

{
  "email": "admin@dev.com",
  "password": "TestPassword123"
}

### getUserProfile
# @name getUserProfile
# Get user profile to ensure we have user ID for tests
GET http://localhost:8080/api/v1/user/profile
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}


### getAllClients
# @name getAllClients
# Get all configured clients to check what's available
GET http://localhost:8080/api/v1/clients
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}


### createTestMovie1
# @name createTestMovie1
# Create a test movie for list operations
POST http://localhost:8080/api/v1/media/movie
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "type": "movie",
  "title": "Sync Test Movie 1",
  "data": {
    "details": {
      "title": "Sync Test Movie 1",
      "originalTitle": "Sync Test Movie 1 Original",
      "overview": "This is a test movie for list sync operations",
      "releaseDate": "2023-01-01T00:00:00Z",
      "runtime": 120,
      "genres": ["Action", "Sci-Fi"]
    },
    "credits": [
      {"name": "Sync Director", "role": "Director", "isCrew": true},
      {"name": "Sync Actor", "character": "Character 1", "isCast": true}
    ],
    "trailerURL": "https://example.com/sync_trailer1.mp4",
    "resolution": "1080p"
  },
  "externalIds": []
}

### createTestMovie2
# @name createTestMovie2
# Create a second test movie
POST http://localhost:8080/api/v1/media/movie
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "type": "movie",
  "title": "Sync Test Movie 2",
  "data": {
    "details": {
      "title": "Sync Test Movie 2",
      "originalTitle": "Sync Test Movie 2 Original",
      "overview": "This is a second test movie for list sync operations",
      "releaseDate": "2023-02-01T00:00:00Z",
      "runtime": 110,
      "genres": ["Drama", "Thriller"]
    },
    "credits": [
      {"name": "Sync Director 2", "role": "Director", "isCrew": true},
      {"name": "Sync Actor 2", "character": "Character 2", "isCast": true}
    ],
    "trailerURL": "https://example.com/sync_trailer2.mp4",
    "resolution": "1080p"
  },
  "externalIds": []
}


### createLocalPlaylist
# @name createLocalPlaylist
# Create a playlist in the local database
POST http://localhost:8080/api/v1/playlist
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "type": "playlist",
  "title": "{{title}}",
  "ownerId": {{login.response.body.$.data.user.id}},
  "isPublic": true,
  "data": {
    "list": {
      "details": {
        "title": "{{title}}",
        "description": "Test playlist for CRUD operations"
      },
      "items": [],
      "itemCount": 0,
      "isPublic": true,
      "ownerId": {{login.response.body.$.data.user.id}}
    }
  }
}

### addItemsToLocalPlaylist
# @name addItemsToLocalPlaylist
# Add items to the local playlist
POST http://localhost:8080/api/v1/playlist/{{createLocalPlaylist.response.body.$.data.id}}/item/{{createTestMovie1.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### addSecondItemToLocalPlaylist
# @name addSecondItemToLocalPlaylist
# Add second item to the local playlist
POST http://localhost:8080/api/v1/playlist/{{createLocalPlaylist.response.body.$.data.id}}/item/{{createTestMovie2.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### getEmbyMovies
# @name getEmbyMovies
# Get movie items from Emby to use in playlists
GET http://localhost:8080/api/v1/client/{{createEmbyClient.response.body.$.data.id}}/media/movie/search?q=test&limit=5
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### getPlexMovies
# @name getPlexMovies
# Get movie items from Plex to use in playlists
GET http://localhost:8080/api/v1/client/{{createPlexClient.response.body.$.data.id}}/media/movie/search?q=test&limit=5
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### syncPlaylistToEmby
# @name syncPlaylistToEmby
# Sync the local playlist to Emby
POST http://localhost:8080/api/v1/playlist/{{createLocalPlaylist.response.body.$.data.id}}/sync/{{createEmbyClient.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}


### checkEmbyPlaylists
# @name checkEmbyPlaylists
# Check for the synced playlist in Emby
GET http://localhost:8080/api/v1/client/{{createEmbyClient.response.body.$.data.id}}/playlist
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### findSyncedPlaylistInEmby
# @name findSyncedPlaylistInEmby
# Find the specific synced playlist in Emby by name
GET http://localhost:8080/api/v1/client/{{createEmbyClient.response.body.$.data.id}}/playlist/search?q=Playlist
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### syncPlaylistToPlex
# @name syncPlaylistToPlex
# Sync the local playlist to Plex
POST http://localhost:8080/api/v1/client/{{createPlexClient}}/sync/playlist/{{createLocalPlaylist.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "clientID": {{createPlexClient.response.body.$.data.id}}
}

### checkPlexPlaylists
# @name checkPlexPlaylists
# Check for the synced playlist in Plex
GET http://localhost:8080/api/v1/client/{{createPlexClient.response.body.$.data.id}}/playlists
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### ===========================================
# Collection Sync Tests
# ===========================================

### createLocalCollection
# @name createLocalCollection
@title=New Collection
# Create a collection in the local database
POST http://localhost:8080/api/v1/collection
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "type": "collection",
  "title": "Test Collection",
  "ownerId": {{login.response.body.$.data.user.id}},
  "isPublic": true,
  "data": {
    "list": {
      "details": {
        "title": "Test Collection",
        "description": "Test collection for CRUD operations"
      },
      "items": [],
      "itemCount": 0,
      "isPublic": true,
      "ownerId": {{login.response.body.$.data.user.id}}
    }
  }
}

### addItemsToLocalCollection
# @name addItemsToLocalCollection
# Add items to the local collection
POST http://localhost:8080/api/v1/collection/{{createLocalCollection.response.body.$.data.id}}/item/{{createTestMovie1.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### addSecondItemToLocalCollection
# @name addSecondItemToLocalCollection
# Add second item to the local collection
POST http://localhost:8080/api/v1/collection/{{createLocalCollection.response.body.$.data.id}}/item/{{createTestMovie2.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### syncCollectionToEmby
# @name syncCollectionToEmby
# Sync the local collection to Emby
POST http://localhost:8080/api/v1/collection/{{createLocalCollection.response.body.$.data.id}}/sync
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "clientID": {{createEmbyClient.response.body.$.data.id}}
}

### checkEmbyCollections
# @name checkEmbyCollections
# Check for the synced collection in Emby
GET http://localhost:8080/api/v1/client/emby/{{createEmbyClient.response.body.$.data.id}}/collections
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### syncCollectionToPlex
# @name syncCollectionToPlex
# Sync the local collection to Plex
POST http://localhost:8080/api/v1/collections/{{createLocalCollection.response.body.$.data.id}}/sync
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "clientID": {{createPlexClient.response.body.$.data.id}}
}

### checkPlexCollections
# @name checkPlexCollections
# Check for the synced collection in Plex
GET http://localhost:8080/api/v1/client/plex/{{createPlexClient.response.body.$.data.id}}/collections
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}


### createEmbyPlaylist
# @name createEmbyPlaylist
# Create a playlist directly in Emby
POST http://localhost:8080/api/v1/client/emby/{{createEmbyClient.response.body.$.data.id}}/playlists
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "name": "Emby Created Playlist",
  "description": "Playlist created directly in Emby to test sync back to local"
}

### addMoviesToEmbyPlaylist
# @name addMoviesToEmbyPlaylist
# Add a movie to the Emby playlist if movies exist
POST http://localhost:8080/api/v1/client/emby/{{createEmbyClient.response.body.$.data.id}}/playlists/{{createEmbyPlaylist.response.body.$.data.clientIDs.emby}}/items
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

{
  "itemID": "{{getEmbyMovies.response.body.$.data.items[0].clientIDs.emby}}"
}

### syncEmbyPlaylistToLocal
# @name syncEmbyPlaylistToLocal
# Sync the Emby-created playlist back to local database
POST http://localhost:8080/api/v1/client/emby/{{createEmbyClient.response.body.$.data.id}}/playlists/{{createEmbyPlaylist.response.body.$.data.clientIDs.emby}}/sync-to-local
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### checkLocalPlaylists
# @name checkLocalPlaylists
# Check if the Emby playlist was synced to local
GET http://localhost:8080/api/v1/playlists/search?q=Emby Created
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

### ===========================================
# Cleanup
# ===========================================

###
# @name deleteLocalPlaylist
# Delete the test playlist from local database
DELETE http://localhost:8080/api/v1/playlist/{{createLocalPlaylist.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

###
# @name deleteLocalCollection
# Delete the test collection from local database
DELETE http://localhost:8080/api/v1/collection/{{createLocalCollection.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

###
# @name deleteSyncedPlaylists
# Delete any synced playlists from Emby
DELETE http://localhost:8080/api/v1/client/emby/{{createEmbyClient.response.body.$.data.id}}/playlists/{{findSyncedPlaylistInEmby.response.body.$.data.items[0].clientIDs.emby}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

###
# @name deleteEmbyCreatePlaylist
# Delete the Emby-created playlist
DELETE http://localhost:8080/api/v1/client/emby/{{createEmbyClient.response.body.$.data.id}}/playlists/{{createEmbyPlaylist.response.body.$.data.clientIDs.emby}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

###
# @name deleteTestMovie1
# Clean up test movie 1
DELETE http://localhost:8080/api/v1/media/movie/{{createTestMovie1.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

###
# @name deleteTestMovie2
# Clean up test movie 2
DELETE http://localhost:8080/api/v1/media/movie/{{createTestMovie2.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

###
# @name deleteEmbyClient
# Clean up test Emby client
DELETE http://localhost:8080/api/v1/admin/client/emby/{{createEmbyClient.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}

###
# @name deletePlexClient
# Clean up test Plex client
DELETE http://localhost:8080/api/v1/admin/client/plex/{{createPlexClient.response.body.$.data.id}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.accessToken}}
